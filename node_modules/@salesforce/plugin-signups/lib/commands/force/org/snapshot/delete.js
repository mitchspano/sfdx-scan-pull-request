"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotGet = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const snapshot_1 = require("../../../../shared/snapshot");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'snapshot.delete');
// jsforce can return SaveError[] or never[]
const isSaveError = (error) => error.message !== undefined;
class SnapshotGet extends command_1.SfdxCommand {
    async run() {
        // resolve the query to an ID.  This also verifies the snapshot exists in the org
        const result = await (0, snapshot_1.queryByNameOrId)(this.hubOrg.getConnection(), this.flags.snapshot);
        const deleteResult = await this.hubOrg.getConnection().sobject('OrgSnapshot').delete(result.Id);
        if (deleteResult.success) {
            this.ux.log(messages.getMessage('success', [this.flags.snapshot]));
            return deleteResult;
        }
        else if (deleteResult.errors) {
            throw new Error(deleteResult.errors
                .filter(isSaveError)
                .map((error) => error.message)
                .join(os_1.EOL));
        }
    }
}
exports.SnapshotGet = SnapshotGet;
SnapshotGet.description = messages.getMessage('description');
SnapshotGet.examples = messages.getMessage('examples').split(os_1.EOL);
SnapshotGet.requiresDevhubUsername = true;
SnapshotGet.flagsConfig = {
    snapshot: command_1.flags.string({
        char: 's',
        description: messages.getMessage('flags.snapshot'),
        longDescription: messages.getMessage('flagsLong.snapshot'),
        required: true,
    }),
};
//# sourceMappingURL=delete.js.map
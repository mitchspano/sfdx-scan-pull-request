"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotGet = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const snapshot_1 = require("../../../../shared/snapshot");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'snapshot.create');
class SnapshotGet extends command_1.SfdxCommand {
    async run() {
        var _a, _b;
        // sourceorg might be a username or alias, but we need an orgId
        let sourceOrgId = this.flags.sourceorg;
        if (!sourceOrgId.startsWith('00D')) {
            const stateAggregator = await core_1.StateAggregator.create();
            const username = (_a = stateAggregator.aliases.getValue(sourceOrgId)) !== null && _a !== void 0 ? _a : sourceOrgId;
            sourceOrgId = (_b = (await stateAggregator.orgs.read(username))) === null || _b === void 0 ? void 0 : _b.orgId;
        }
        const createResponse = await this.hubOrg
            .getConnection()
            .sobject('OrgSnapshot')
            .create({
            SourceOrg: sourceOrgId,
            Description: this.flags.description,
            SnapshotName: this.flags.snapshotname,
            Content: 'metadatadata',
        });
        const result = await (0, snapshot_1.queryByNameOrId)(this.hubOrg.getConnection(), createResponse.id);
        if (!this.flags.json) {
            (0, snapshot_1.printSingleRecordTable)(result);
        }
        return result;
    }
}
exports.SnapshotGet = SnapshotGet;
SnapshotGet.description = messages.getMessage('description');
SnapshotGet.examples = messages.getMessage('examples').split(os_1.EOL);
SnapshotGet.requiresDevhubUsername = true;
SnapshotGet.flagsConfig = {
    sourceorg: command_1.flags.string({
        char: 'o',
        description: messages.getMessage('flags.sourceorg'),
        longDescription: messages.getMessage('flagsLong.sourceorg'),
        required: true,
    }),
    snapshotname: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('flags.snapshotname'),
        longDescription: messages.getMessage('flagsLong.snapshotname'),
        required: true,
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('flags.description'),
        longDescription: messages.getMessage('flagsLong.description'),
    }),
};
//# sourceMappingURL=create.js.map
"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgShapeDeleteCommand = void 0;
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const orgShapeListUtils_1 = require("../../../../shared/orgShapeListUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'shape.delete');
class OrgShapeDeleteCommand extends command_1.SfdxCommand {
    async run() {
        if (!this.flags.noprompt) {
            if (!(await this.ux.confirm(messages.getMessage('deleteCommandYesNo', [this.org.getUsername()])))) {
                return;
            }
        }
        this.conn = this.org.getConnection();
        if (!(await (0, orgShapeListUtils_1.isShapeEnabled)(this.conn))) {
            const err = messages.createError('noAccess', [this.org.getUsername()]);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore override readonly .name field
            err.name = 'noAccess';
            throw err;
        }
        const deleteRes = await this.deleteAll();
        if (deleteRes.shapeIds.length === 0) {
            this.ux.log(messages.getMessage('noShapesHumanSuccess', [this.org.getOrgId()]));
            return;
        }
        if (deleteRes.failures.length > 0 && deleteRes.shapeIds.length > 0) {
            this.setExitCode(68);
            this.ux.styledHeader('Partial Success');
            this.ux.log(messages.getMessage('humanSuccess', [this.org.getOrgId()]));
            this.ux.log('');
            this.ux.styledHeader('Failures');
            const columns = {
                shapeId: { header: 'Shape ID' },
                message: { header: 'Error Message' },
            };
            this.ux.table(deleteRes.failures, columns);
        }
        else if (deleteRes.failures.length > 0) {
            this.setExitCode(1);
        }
        else if (deleteRes.shapeIds.length > 0) {
            this.setExitCode(0);
            this.ux.log(messages.getMessage('humanSuccess', [this.org.getOrgId()]));
        }
        return {
            orgId: this.org.getOrgId(),
            shapeIds: deleteRes.shapeIds,
            failures: deleteRes.failures,
        };
    }
    setExitCode(code) {
        process.exitCode = code;
    }
    /**
     * Delete all ShapeRepresentation records for the shapeOrg.
     *
     * @return List of SR IDs that were deleted
     */
    async deleteAll() {
        const deleteAllResult = {
            shapeIds: [],
            failures: [],
        };
        let shapeIds = [];
        try {
            const result = await this.conn.query('SELECT Id FROM ShapeRepresentation');
            if (result.totalSize === 0) {
                return deleteAllResult;
            }
            shapeIds = result.records.map((shape) => shape.Id);
        }
        catch (err) {
            const JsForceErr = err;
            if (JsForceErr.errorCode && JsForceErr.errorCode === 'INVALID_TYPE') {
                // ShapeExportPref is not enabled, or user does not have CRUD access
                const e = messages.createError('noAccess', [this.org.getUsername()]);
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore override readonly .name field
                e.name = 'noAccess';
                throw e;
            }
            // non-access error
            throw JsForceErr;
        }
        await Promise.allSettled(shapeIds.map(async (id) => {
            try {
                const delResult = await this.conn.sobject('ShapeRepresentation').delete(id);
                if (delResult.success) {
                    deleteAllResult.shapeIds.push(id);
                }
            }
            catch (err) {
                deleteAllResult.failures.push({
                    shapeId: id,
                    message: err instanceof Error ? err.message : 'error contained no message',
                });
            }
        }));
        return deleteAllResult;
    }
}
exports.OrgShapeDeleteCommand = OrgShapeDeleteCommand;
OrgShapeDeleteCommand.description = messages.getMessage('description');
OrgShapeDeleteCommand.examples = messages.getMessage('help').split(os_1.EOL);
OrgShapeDeleteCommand.requiresUsername = true;
OrgShapeDeleteCommand.flagsConfig = {
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('noPrompt'),
    }),
};
//# sourceMappingURL=delete.js.map
"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgShapeCreateCommand = void 0;
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const orgShapeListUtils_1 = require("../../../../shared/orgShapeListUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'shape.create');
class OrgShapeCreateCommand extends command_1.SfdxCommand {
    async run() {
        this.conn = this.org.getConnection();
        if (!(await (0, orgShapeListUtils_1.isShapeEnabled)(this.conn))) {
            const err = messages.createError('noAccess', [this.org.getUsername()]);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore override readonly .name field
            err.name = 'noAccess';
            throw err;
        }
        const createShapeResponse = await this.createShapeOrg();
        if (createShapeResponse.success !== true) {
            this.logger.error('Shape create failed', createShapeResponse['errors']);
            const err = messages.createError('shape_create_failed_message');
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore override readonly .name field
            err.name = 'shape_create_failed_message';
            throw err;
        }
        const output = {
            shapeId: createShapeResponse.id,
            success: true,
            errors: [],
        };
        this.ux.log(messages.getMessage('create_shape_command_success_id', [output.shapeId]));
        return output;
    }
    createShapeOrg() {
        try {
            return this.conn.sobject('ShapeRepresentation').create({
                Description: '',
            });
        }
        catch (err) {
            const JsForceErr = err;
            if (JsForceErr.errorCode && JsForceErr.errorCode === 'NOT_FOUND' && JsForceErr['name'] === 'ACCESS_DENIED') {
                const e = messages.createError('create_shape_command_no_crud_access');
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore override readonly .name field
                e.name = 'create_shape_command_no_crud_access';
                throw e;
            }
            else {
                throw JsForceErr;
            }
        }
    }
}
exports.OrgShapeCreateCommand = OrgShapeCreateCommand;
OrgShapeCreateCommand.description = messages.getMessage('create_shape_command_description');
OrgShapeCreateCommand.examples = messages.getMessage('create_shape_command_help').split(os_1.EOL);
OrgShapeCreateCommand.requiresUsername = true;
//# sourceMappingURL=create.js.map
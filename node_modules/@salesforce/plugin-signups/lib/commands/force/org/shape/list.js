"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgShapeListCommand = void 0;
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
const orgShapeListUtils_1 = require("../../../../shared/orgShapeListUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-signups', 'shape.list');
// default columns for the shape list
const orgShapeColumns = {
    alias: {
        header: 'ALIAS',
        get: (data) => { var _a; return (_a = data.alias) !== null && _a !== void 0 ? _a : ''; },
    },
    username: { header: 'USERNAME' },
    orgId: { header: 'ORG ID' },
    status: { header: 'SHAPE STATUS' },
    createdBy: { header: 'CREATED BY' },
    createdDate: { header: 'CREATED DATE' },
};
class OrgShapeListCommand extends command_1.SfdxCommand {
    async run() {
        const shapes = await this.getAllOrgShapesFromAuthenticatedOrgs();
        if (shapes.length === 0) {
            this.ux.log(messages.getMessage('noOrgShapes'));
            return shapes;
        }
        this.ux.styledHeader('Org Shapes');
        this.ux.table(shapes.map((shape) => (shape.status === 'Active' ? { ...shape, status: chalk.green(shape.status) } : shape)), orgShapeColumns);
        return shapes;
    }
    async getAllOrgShapesFromAuthenticatedOrgs() {
        const orgs = await core_1.AuthInfo.listAllAuthorizations((orgAuth) => !orgAuth.error && !orgAuth.isScratchOrg);
        if (orgs.length === 0) {
            const e = messages.createError('noAuthFound');
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore override readonly .name field
            e.name = 'noAuthFound';
            throw e;
        }
        const shapes = await Promise.all(orgs.map((o) => (0, orgShapeListUtils_1.getAllShapesFromOrg)(o)));
        return shapes.flat();
    }
}
exports.OrgShapeListCommand = OrgShapeListCommand;
OrgShapeListCommand.description = messages.getMessage('description');
OrgShapeListCommand.examples = messages.getMessage('help').split(os_1.EOL);
OrgShapeListCommand.flagsConfig = {
    verbose: command_1.flags.builtin({
        description: messages.getMessage('verbose'),
    }),
};
//# sourceMappingURL=list.js.map
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printRecordTable = exports.printSingleRecordTable = exports.queryByNameOrId = exports.queryAll = exports.ORG_SNAPSHOT_FIELDS = void 0;
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const change_case_1 = require("change-case");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.load('@salesforce/plugin-signups', 'snapshot', ['snapshotNotEnabled', 'noSnapshots']);
exports.ORG_SNAPSHOT_FIELDS = [
    'Id',
    'SnapshotName',
    'Description',
    'Status',
    'SourceOrg',
    'CreatedDate',
    'LastModifiedDate',
    'ExpirationDate',
    'LastClonedDate',
    'LastClonedById',
    'Error',
];
const dateTimeFormatter = (dateString) => dateString
    ? new Date(dateString).toLocaleString(undefined, {
        month: '2-digit',
        year: 'numeric',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
    })
    : '';
const rowDateTimeFormatter = (row, field) => dateTimeFormatter(row[field]);
const ORG_SNAPSHOT_COLUMNS = {
    Id: {},
    SnapshotName: { header: 'Snapshot Name' },
    Status: {},
    SourceOrg: { header: 'Source Org Id' },
    CreatedDate: {
        header: 'Created Date',
        get: (row) => rowDateTimeFormatter(row, 'CreatedDate'),
    },
    LastModifiedDate: {
        header: 'Last Modified Date',
        get: (row) => rowDateTimeFormatter(row, 'LastModifiedDate'),
    },
    ExpirationDate: {
        header: 'Expiration Date',
        get: (row) => (row.ExpirationDate ? new Date(row.ExpirationDate).toLocaleDateString() : ''),
    },
    LastClonedDate: {
        header: 'Last Cloned Date',
        get: (row) => rowDateTimeFormatter(row, 'LastClonedDate'),
    },
    LastClonedById: { header: 'Last Cloned By Id', get: (row) => { var _a; return (_a = row.LastClonedById) !== null && _a !== void 0 ? _a : ''; } },
};
const invalidTypeErrorHandler = (e) => {
    if (e instanceof Error && e.name === 'INVALID_TYPE') {
        e.message = messages.getMessage('snapshotNotEnabled');
    }
    throw e;
};
const queryAll = async (conn) => {
    const query = `SELECT ${exports.ORG_SNAPSHOT_FIELDS.join(',')} FROM OrgSnapshot Order by CreatedDate`;
    try {
        const result = (await conn.query(query)).records;
        return result;
    }
    catch (e) {
        invalidTypeErrorHandler(e);
    }
};
exports.queryAll = queryAll;
const queryByNameOrId = async (conn, nameOrId) => {
    const query = `SELECT ${exports.ORG_SNAPSHOT_FIELDS.join(',')} FROM OrgSnapshot WHERE ${nameOrId.startsWith('0Oo') ? 'Id' : 'SnapshotName'} = '${nameOrId}'`;
    try {
        const result = await conn.singleRecordQuery(query);
        return result;
    }
    catch (e) {
        if (e instanceof core_2.SfError && e.name === 'SingleRecordQuery_NoRecords') {
            e.message = messages.getMessage('noSnapshots', [nameOrId]);
        }
        invalidTypeErrorHandler(e);
    }
};
exports.queryByNameOrId = queryByNameOrId;
const printSingleRecordTable = (snapshotRecord) => {
    core_1.CliUx.ux.table(Object.entries(snapshotRecord)
        .filter(([key]) => key !== 'attributes')
        // remove empty error field
        .filter(([key, value]) => key !== 'Error' || value)
        .map(([key, value]) => ({
        Name: (0, change_case_1.capitalCase)(key),
        // format the datetime values
        Value: ['LastModifiedDate', 'LastClonedDate', 'CreatedDate'].includes(key)
            ? dateTimeFormatter(value)
            : value,
    }))
        // null/undefined becomes empty string
        .map((row) => (row.Value ? row : { ...row, Value: '' })), { Name: {}, Value: {} });
};
exports.printSingleRecordTable = printSingleRecordTable;
const printRecordTable = (snapshotRecords) => {
    if (snapshotRecords.length === 0) {
        core_1.CliUx.ux.log('No snapshots found');
        return;
    }
    core_1.CliUx.ux.table(
    // snapshotRecords,
    // without this, you encounter typing errors from CliUx.ux.table
    snapshotRecords.map((s) => ({ ...s })), ORG_SNAPSHOT_COLUMNS, { title: `Org Snapshots [${snapshotRecords.length}]`, 'no-truncate': true });
};
exports.printRecordTable = printRecordTable;
//# sourceMappingURL=snapshot.js.map
"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isShapeEnabled = exports.getAllShapesFromOrg = void 0;
const core_1 = require("@salesforce/core");
async function getAllShapesFromOrg(orgAuth) {
    const org = await core_1.Org.create({ aliasOrUsername: orgAuth.username });
    const conn = org.getConnection();
    const logger = await core_1.Logger.child(`getAllShapesFromOrg, ${orgAuth.username}`);
    logger.info(`Query org: ${orgAuth.username} for shapes`);
    try {
        const shapesFound = await conn.query("SELECT Id, Status, CreatedBy.Username, CreatedDate FROM ShapeRepresentation WHERE Status IN ( 'Active', 'InProgress' )");
        return shapesFound.records.map((shape) => {
            var _a;
            return ({
                ...{
                    orgId: orgAuth.orgId,
                    username: orgAuth.username,
                    shapeId: shape.Id,
                    status: shape.Status,
                    createdBy: shape.CreatedBy.Username,
                    createdDate: shape.CreatedDate,
                },
                ...(((_a = orgAuth.aliases) === null || _a === void 0 ? void 0 : _a.length) > 0 ? { alias: orgAuth.aliases.join(',') } : {}),
            });
        });
    }
    catch (err) {
        const JsForceErr = err;
        if (JsForceErr.errorCode === 'INVALID_TYPE') {
            return [];
        }
        else {
            logger.error(false, 'Error finding org shapes', JsForceErr);
            throw JsForceErr;
        }
    }
}
exports.getAllShapesFromOrg = getAllShapesFromOrg;
/**
 * Check if the ShapeExportPilot preference is enabled.
 */
async function isShapeEnabled(conn) {
    var _a, _b;
    const prefValue = await conn.tooling.query(`SELECT IsShapeExportPrefEnabled FROM ${'DevHubSettings'}`);
    // no records are returned if ShapeExportPilot perm is disabled
    return prefValue.totalSize > 0 && ((_b = (_a = prefValue.records) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.IsShapeExportPrefEnabled);
}
exports.isShapeEnabled = isShapeEnabled;
//# sourceMappingURL=orgShapeListUtils.js.map
import { AnyArray, AnyConstructor, AnyFunction, Dictionary, Many, Nullable, Optional, View } from '../types';
/**
 * @ignore
 */
export declare type PrimitiveType = 'boolean' | 'function' | 'number' | 'object' | 'string' | 'symbol' | 'undefined';
/**
 * @ignore
 */
export declare type VerifiableType = PrimitiveType | AnyConstructor;
/**
 * @ignore
 */
export declare type PropertyShape = {
    type: VerifiableType;
    optional: boolean;
};
/**
 * @ignore
 */
export declare type ObjectShape = Dictionary<VerifiableType | PropertyShape>;
/**
 * @ignore
 */
export declare function is<T extends object>(obj: Nullable<object>, shape: ObjectShape): obj is T;
/**
 * @ignore
 */
export declare function as<T extends object>(obj: Nullable<object>, shape: ObjectShape): Optional<T>;
/**
 * A view over an `object` with constrainable, optional properties.
 *
 * @ignore
 */
export declare type ViewOptional<K extends string, V = unknown> = {
    [_ in K]?: V;
};
/**
 * @ignore
 */
export declare function hasNull<T, K extends string>(value: T, key: K): value is T & View<K, string>;
/**
 * @ignore
 */
export declare function view<T, K extends string>(value: Nullable<T>, keys: Many<K>): Optional<T & ViewOptional<K>>;
/**
 * @ignore
 */
export declare function viewString<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, string>>;
/**
 * @ignore
 */
export declare function viewNumber<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, number>>;
/**
 * @ignore
 */
export declare function viewBoolean<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, boolean>>;
/**
 * @ignore
 */
export declare function viewObject<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, object>>;
/**
 * @ignore
 */
export declare function viewPlainObject<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, object>>;
/**
 * @ignore
 */
export declare function viewInstance<T, K extends string, C extends AnyConstructor>(value: Nullable<T>, key: K, ctor: C): Optional<T & ViewOptional<K, InstanceType<C>>>;
/**
 * @ignore
 */
export declare function viewArray<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, AnyArray>>;
/**
 * @ignore
 */
export declare function viewFunction<T, K extends string>(value: Nullable<T>, key: K): Optional<T & ViewOptional<K, AnyFunction>>;

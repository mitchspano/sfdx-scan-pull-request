"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.viewFunction = exports.viewArray = exports.viewInstance = exports.viewPlainObject = exports.viewObject = exports.viewBoolean = exports.viewNumber = exports.viewString = exports.view = exports.hasNull = exports.as = exports.is = void 0;
/**
 * A staging area for either introducing or removing type and functions, incrementally.
 */
const narrowing_1 = require("../narrowing");
/**
 * @ignore
 */
function is(obj, shape) {
    const isVerifiable = (v) => narrowing_1.isString(v) || narrowing_1.isFunction(v);
    return (!obj ||
        narrowing_1.definiteEntriesOf(shape)
            .map(([k, v]) => ({
            key: k,
            ...(isVerifiable(v) ? { type: v, optional: false } : v),
        }))
            .every(({ key, type, optional }) => (optional && !(key in obj)) ||
            (narrowing_1.isString(type) ? typeof narrowing_1.get(obj, key) === type : narrowing_1.get(obj, key) instanceof type)));
}
exports.is = is;
/**
 * @ignore
 */
// type Foo = { name: string, bar: Bar };
// class Bar { public baz = 'bar'; }
// const maybeFoo: object = { name: 'bar', bar: new Bar() };
// const foo = ensure(as<Foo>(maybeFoo, { name: 'string', bar: Bar }));
function as(obj, shape) {
    return is(obj, shape) ? obj : undefined;
}
exports.as = as;
/**
 * @ignore
 */
function hasNull(value, key) {
    return narrowing_1.has(value, key) && value[key] == null;
}
exports.hasNull = hasNull;
/**
 * @ignore
 */
function view(value, keys) {
    return narrowing_1.has(value, keys) ? value : undefined;
}
exports.view = view;
/**
 * @ignore
 */
function viewOptional(value, key, hasType) {
    return hasType(value, key) ? value : hasNull(value, key) ? value : undefined;
}
/**
 * @ignore
 */
function viewString(value, key) {
    return viewOptional(value, key, narrowing_1.hasString);
}
exports.viewString = viewString;
/**
 * @ignore
 */
function viewNumber(value, key) {
    return viewOptional(value, key, narrowing_1.hasNumber);
}
exports.viewNumber = viewNumber;
/**
 * @ignore
 */
function viewBoolean(value, key) {
    return viewOptional(value, key, narrowing_1.hasBoolean);
}
exports.viewBoolean = viewBoolean;
/**
 * @ignore
 */
function viewObject(value, key) {
    return viewOptional(value, key, narrowing_1.hasObject);
}
exports.viewObject = viewObject;
/**
 * @ignore
 */
function viewPlainObject(value, key) {
    return viewOptional(value, key, narrowing_1.hasPlainObject);
}
exports.viewPlainObject = viewPlainObject;
/**
 * @ignore
 */
function viewInstance(value, key, ctor) {
    const hasType = (v, k) => narrowing_1.hasInstance(v, k, ctor);
    return viewOptional(value, key, hasType);
}
exports.viewInstance = viewInstance;
/**
 * @ignore
 */
function viewArray(value, key) {
    return viewOptional(value, key, narrowing_1.hasArray);
}
exports.viewArray = viewArray;
/**
 * @ignore
 */
function viewFunction(value, key) {
    return viewOptional(value, key, narrowing_1.hasFunction);
}
exports.viewFunction = viewFunction;
//# sourceMappingURL=index.js.map
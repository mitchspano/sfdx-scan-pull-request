"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJsonArray = exports.getJsonMap = exports.getAnyJson = exports.getFunction = exports.getArray = exports.getInstance = exports.getDictionary = exports.getPlainObject = exports.getObject = exports.getBoolean = exports.getNumber = exports.getString = exports.get = void 0;
const as_1 = require("./as");
const coerce_1 = require("./coerce");
const has_1 = require("./has");
const internal_1 = require("./internal");
/**
 * Given a deep-search query path, returns an object property or array value of an object or array.
 *
 * ```
 * const obj = { foo: { bar: ['baz'] } };
 * const value = get(obj, 'foo.bar[0]');
 * // type of value -> unknown; value === 'baz'
 *
 * const value = get(obj, 'foo.bar.nothing', 'default');
 * // type of value -> unknown; value === 'default'
 *
 * const value = get(obj, 'foo["bar"][0]');
 * // type of value -> unknown; value === 'baz'
 *
 * const arr = [obj];
 * const value = get(arr, '[0].foo.bar[0]');
 * // type of value -> unknown; value === 'baz'
 * ```
 *
 * @param from Any value to query.
 * @param path The query path.
 * @param defaultValue The default to return if the query result was not defined.
 */
function get(from, path, defaultValue) {
    return internal_1.valueOrDefault(path
        // keep values in quotes together
        .split(/['"]/)
        // values in quotes will always be odd indexes, split the non-quotes values as normal
        .reduce((r, p, index) => (index % 2 === 1 ? [...r, p] : [...r, ...p.split(/[.[\]]/)]), [])
        .filter((p) => !!p)
        .reduce((r, p) => (has_1.has(r, p) ? r[p] : undefined), from), defaultValue);
}
exports.get = get;
// underlying function
function getString(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asString(get(from, path)), defaultValue);
}
exports.getString = getString;
// underlying function
function getNumber(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asNumber(get(from, path)), defaultValue);
}
exports.getNumber = getNumber;
// underlying function
function getBoolean(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asBoolean(get(from, path)), defaultValue);
}
exports.getBoolean = getBoolean;
// underlying function
function getObject(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asObject(get(from, path)), defaultValue);
}
exports.getObject = getObject;
// underlying function
function getPlainObject(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asPlainObject(get(from, path)), defaultValue);
}
exports.getPlainObject = getPlainObject;
// underlying function
function getDictionary(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asDictionary(get(from, path)), defaultValue);
}
exports.getDictionary = getDictionary;
// underlying function
function getInstance(from, path, ctor, defaultValue) {
    return internal_1.valueOrDefault(as_1.asInstance(get(from, path), ctor), defaultValue);
}
exports.getInstance = getInstance;
// underlying function
function getArray(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asArray(get(from, path)), defaultValue);
}
exports.getArray = getArray;
// underlying function
function getFunction(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asFunction(get(from, path)), defaultValue);
}
exports.getFunction = getFunction;
// underlying function
function getAnyJson(from, path, defaultValue) {
    return internal_1.valueOrDefault(coerce_1.coerceAnyJson(get(from, path)), defaultValue);
}
exports.getAnyJson = getAnyJson;
// underlying function
function getJsonMap(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asJsonMap(getAnyJson(from, path)), defaultValue);
}
exports.getJsonMap = getJsonMap;
// underlying function
function getJsonArray(from, path, defaultValue) {
    return internal_1.valueOrDefault(as_1.asJsonArray(getAnyJson(from, path)), defaultValue);
}
exports.getJsonArray = getJsonArray;
//# sourceMappingURL=get.js.map
"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.asJsonArray = exports.asJsonMap = exports.asFunction = exports.asArray = exports.asInstance = exports.asDictionary = exports.asPlainObject = exports.asObject = exports.asBoolean = exports.asNumber = exports.asString = void 0;
const is_1 = require("./is");
// underlying function
function asString(value, defaultValue) {
    return is_1.isString(value) ? value : defaultValue;
}
exports.asString = asString;
// underlying function
function asNumber(value, defaultValue) {
    return is_1.isNumber(value) ? value : defaultValue;
}
exports.asNumber = asNumber;
// underlying function
function asBoolean(value, defaultValue) {
    return is_1.isBoolean(value) ? value : defaultValue;
}
exports.asBoolean = asBoolean;
// underlying function
function asObject(value, defaultValue) {
    return is_1.isObject(value) ? value : defaultValue;
}
exports.asObject = asObject;
// underlying function
function asPlainObject(value, defaultValue) {
    return is_1.isPlainObject(value) ? value : defaultValue;
}
exports.asPlainObject = asPlainObject;
// underlying function
function asDictionary(value, defaultValue) {
    return is_1.isDictionary(value) ? value : defaultValue;
}
exports.asDictionary = asDictionary;
// underlying function
function asInstance(value, ctor, defaultValue) {
    return is_1.isInstance(value, ctor) ? value : defaultValue;
}
exports.asInstance = asInstance;
// underlying function
function asArray(value, defaultValue) {
    return is_1.isArray(value) ? value : defaultValue;
}
exports.asArray = asArray;
// underlying function
function asFunction(value, defaultValue) {
    return is_1.isFunction(value) ? value : defaultValue;
}
exports.asFunction = asFunction;
// underlying function
function asJsonMap(value, defaultValue) {
    return is_1.isJsonMap(value) ? value : defaultValue;
}
exports.asJsonMap = asJsonMap;
// underlying function
function asJsonArray(value, defaultValue) {
    return is_1.isJsonArray(value) ? value : defaultValue;
}
exports.asJsonArray = asJsonArray;
//# sourceMappingURL=as.js.map
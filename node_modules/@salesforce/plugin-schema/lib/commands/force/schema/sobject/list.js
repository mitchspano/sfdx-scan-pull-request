"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaSobjectList = exports.SObjectType = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-schema', 'list');
// eslint-disable-next-line no-shadow
var SObjectType;
(function (SObjectType) {
    SObjectType[SObjectType["ALL"] = 0] = "ALL";
    SObjectType[SObjectType["STANDARD"] = 1] = "STANDARD";
    SObjectType[SObjectType["CUSTOM"] = 2] = "CUSTOM";
})(SObjectType = exports.SObjectType || (exports.SObjectType = {}));
class SchemaSobjectList extends command_1.SfdxCommand {
    async run() {
        const category = this.flags.sobjecttypecategory.toUpperCase();
        const type = SObjectType[category];
        const typeDescriptions = [];
        const conn = this.org.getConnection();
        const allDescriptions = await conn.describeGlobal();
        let havePrinted = false;
        allDescriptions.sobjects.forEach((sobject) => {
            const isCustom = sobject.custom === true;
            const doPrint = type === SObjectType.ALL ||
                (type === SObjectType.CUSTOM && isCustom) ||
                (type === SObjectType.STANDARD && !isCustom);
            if (doPrint) {
                havePrinted = true;
                this.ux.log(sobject.name);
                typeDescriptions.push(sobject.name);
            }
        });
        if (!havePrinted) {
            this.ux.log(messages.getMessage('noTypeFound', [SObjectType[type]]));
        }
        return typeDescriptions;
    }
}
exports.SchemaSobjectList = SchemaSobjectList;
SchemaSobjectList.description = messages.getMessage('description');
SchemaSobjectList.examples = messages.getMessage('examples').split(os_1.EOL);
SchemaSobjectList.flagsConfig = {
    sobjecttypecategory: command_1.flags.string({
        char: 'c',
        default: 'ALL',
        validate: (val) => {
            const capitalized = val.toUpperCase();
            const result = capitalized === 'ALL' || capitalized === 'STANDARD' || capitalized === 'CUSTOM';
            if (!result) {
                throw messages.createError('flags.invalidTypeError');
            }
            return result;
        },
        description: messages.getMessage('flags.typeDescription'),
    }),
};
SchemaSobjectList.requiresUsername = true;
//# sourceMappingURL=list.js.map
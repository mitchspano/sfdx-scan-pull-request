"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseReleaseNotes = void 0;
const marked_1 = require("marked");
const semver = require("semver");
const parseReleaseNotes = (notes, version, baseUrl) => {
    let found = false;
    let closestVersion;
    let versions;
    const parsed = marked_1.marked.lexer(notes);
    let tokens;
    const findVersion = (desiredVersion) => {
        versions = [];
        tokens = parsed.filter((token) => {
            // TODO: Could make header depth (2) a setting in oclif.info.releasenotes
            if (token.type === 'heading' && token.depth === 2) {
                const coercedVersion = semver.coerce(token.text).version;
                // We will use this to find the closest patch if passed version is not found
                versions.push(coercedVersion);
                if (coercedVersion === desiredVersion) {
                    found = true;
                    return token;
                }
                found = false;
            }
            else if (found === true) {
                return token;
            }
        });
    };
    findVersion(version);
    if (!tokens.length) {
        // If version was not found, try again with the closest patch version
        const semverRange = `${semver.major(version)}.${semver.minor(version)}.x`;
        closestVersion = semver.maxSatisfying(versions, semverRange);
        findVersion(closestVersion);
        if (!tokens.length) {
            throw new Error(`Didn't find version '${version}'. View release notes online at: ${baseUrl}`);
        }
    }
    const fixRelativeLinks = (token) => {
        // If link is relative, add the baseurl. https://regex101.com/r/h802kJ/1
        // FWIW: 'marked' does have a 'baseURL' option, but the 'marked-terminal' renderer does not honor it
        if (token.type === 'link' && !token.href.match(/(?:[a-z][a-z0-9+.-]*:|\/\/)/gi)) {
            token.href = `${baseUrl}/${token.href}`;
        }
    };
    marked_1.marked.walkTokens(tokens, fixRelativeLinks);
    if (closestVersion !== undefined) {
        const warning = marked_1.marked.lexer(`# ATTENTION: Version ${version} was not found. Showing notes for closest patch version ${closestVersion}.`)[0];
        tokens.unshift(warning);
    }
    return tokens;
};
exports.parseReleaseNotes = parseReleaseNotes;
//# sourceMappingURL=parseReleaseNotes.js.map
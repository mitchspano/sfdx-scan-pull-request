"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReleaseNotes = void 0;
const got_1 = require("got");
const semver_1 = require("semver");
const proxy_from_env_1 = require("proxy-from-env");
const ProxyAgent = require("proxy-agent");
const constants_1 = require("../constants");
const getReleaseNotes = async (base, filename, version) => {
    const majorVersion = (0, semver_1.major)(version);
    const rawBase = base.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/').replace('/tree/', '/');
    const options = {
        timeout: constants_1.SFDX_RELEASE_NOTES_TIMEOUT,
        throwHttpErrors: false,
        agent: { https: ProxyAgent((0, proxy_from_env_1.getProxyForUrl)(rawBase)) },
    };
    const getPromises = [
        (0, got_1.default)(`${rawBase}/v${majorVersion}.md`, options),
        (0, got_1.default)(`${rawBase}/${filename}`, { ...options, throwHttpErrors: true }),
    ];
    const [versioned, readme] = await Promise.all(getPromises);
    const { body } = versioned.statusCode === 200 ? versioned : readme;
    return body;
};
exports.getReleaseNotes = getReleaseNotes;
//# sourceMappingURL=getReleaseNotes.js.map
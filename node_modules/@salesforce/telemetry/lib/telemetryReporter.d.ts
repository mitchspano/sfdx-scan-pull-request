import { AsyncCreatable } from '@salesforce/kit';
import { Attributes, Properties, TelemetryOptions } from './appInsights';
import { TelemetryClient } from './exported';
export { TelemetryOptions, Attributes, Properties, TelemetryClient } from './appInsights';
/**
 * Reports telemetry events to app insights. We do not send if the config 'disableTelemetry' is set.
 */
export declare class TelemetryReporter extends AsyncCreatable<TelemetryOptions> {
    private static config;
    private options;
    private logger;
    private config;
    private reporter;
    constructor(options: TelemetryOptions);
    /**
     * Determine if the telemetry event should be logged.
     * Setting the disableTelemetry config var to true will disable insights for errors and diagnostics.
     */
    static determineSfdxTelemetryEnabled(): Promise<boolean>;
    init(): Promise<void>;
    /**
     * Starts data collection services. This is for long running processes. Short lived
     * processes can call send*Event directly then finish it by TelemetryReporter.stop().
     */
    start(): void;
    /**
     * Immediately flush and dispose of the reporter. This can usually take 1-3 seconds
     * not counting timeouts.
     */
    stop(): void;
    waitForConnection(): Promise<void>;
    testConnection(): Promise<boolean>;
    /**
     * Sends message to child process.
     *
     * @param eventName {string} - name of the event you want published.
     * @param attributes {Attributes} - map of properties to publish alongside the event.
     */
    sendTelemetryEvent(eventName: string, attributes?: Attributes): void;
    /**
     * Sends exception to child process.
     *
     * @param exception {Error} - exception you want published.
     * @param attributes {Attributes} - map of measurements to publish alongside the event.
     */
    sendTelemetryException(exception: Error, attributes?: Attributes): void;
    /**
     * Publishes diagnostic information to app insights dashboard
     *
     * @param traceMessage {string} - trace message to sen to app insights.
     * @param properties {Properties} - map of properties to publish alongside the event.
     */
    sendTelemetryTrace(traceMessage: string, properties?: Properties): void;
    /**
     * Publishes metric to app insights dashboard
     *
     * @param metricName {string} - name of the metric you want published
     * @param value {number} - value of the metric
     * @param properties {Properties} - map of properties to publish alongside the event.
     */
    sendTelemetryMetric(metricName: string, value: number, properties?: Properties): void;
    /**
     * Determine if the telemetry event should be logged.
     * Setting the disableTelemetry config var to true will disable insights for errors and diagnostics.
     */
    isSfdxTelemetryEnabled(): boolean;
    logTelemetryStatus(): void;
    /**
     * Gets the underline telemetry client. This should only be used to set
     * additional options that are not exposed in the init options. This should
     * NOT be used to send events as it will by pass disabled checks.
     */
    getTelemetryClient(): TelemetryClient;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppInsights = exports.buildPropertiesAndMeasurements = exports.getCpus = exports.getPlatformVersion = exports.TelemetryClient = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const ts_types_1 = require("@salesforce/ts-types");
const appInsights = require("applicationinsights");
var applicationinsights_1 = require("applicationinsights");
Object.defineProperty(exports, "TelemetryClient", { enumerable: true, get: function () { return applicationinsights_1.TelemetryClient; } });
function getPlatformVersion() {
    return (os.release() || '').replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/, '$1$2$3');
}
exports.getPlatformVersion = getPlatformVersion;
function getCpus() {
    const cpus = os.cpus();
    if (cpus && cpus.length > 0) {
        return `${cpus[0].model}(${cpus.length} x ${cpus[0].speed})`;
    }
    else {
        return '';
    }
}
exports.getCpus = getCpus;
const homeDir = os.homedir();
const sanitizeError = (err) => {
    if (err.name) {
        err.name = err.name.replace(homeDir, '~');
    }
    if (err.message) {
        err.message = err.message.replace(homeDir, '~');
    }
    if (err.stack) {
        // there might be lots of this one
        err.stack = err.stack.replace(new RegExp(`\\b${homeDir}\\b`, 'gi'), '~');
    }
    return err;
};
function getSystemMemory() {
    return `${(os.totalmem() / (1024 * 1024 * 1024)).toFixed(2)} GB`;
}
function isAsimovKey(key) {
    return !!(key && key.startsWith('AIF-'));
}
function buildPropertiesAndMeasurements(attributes) {
    const properties = {};
    const measurements = {};
    Object.keys(attributes).forEach((key) => {
        const value = attributes[key];
        if ((0, ts_types_1.isString)(value)) {
            properties[key] = value.replace(homeDir, '~');
        }
        else if ((0, ts_types_1.isNumber)(value)) {
            measurements[key] = value;
        }
        else if ((0, ts_types_1.isBoolean)(value)) {
            properties[key] = value.toString();
        }
    });
    return { properties, measurements };
}
exports.buildPropertiesAndMeasurements = buildPropertiesAndMeasurements;
/**
 * This is a wrapper around appinsights sdk for convenience.
 *
 * NOTE: THis should not be used directly. Use TelemetryReporter which
 * will check if telemetry is disabled and do GDPR checks.
 */
class AppInsights extends kit_1.AsyncCreatable {
    constructor(options) {
        super(options);
        this.gdprSensitiveKeys = [];
        this.options = options;
        this.env = this.options.env || new kit_1.Env();
        if (this.options.gdprSensitiveKeys) {
            this.gdprSensitiveKeys = this.options.gdprSensitiveKeys;
        }
        else {
            // By default, cloudRoleInstance if a gdpr sensitive property.
            const keys = new appInsights.Contracts.ContextTagKeys();
            this.gdprSensitiveKeys = [keys.cloudRoleInstance];
        }
    }
    async init() {
        this.logger = await core_1.Logger.child('AppInsights');
        this.createAppInsightsClient();
    }
    /**
     * Publishes event to app insights dashboard
     *
     * @param eventName {string} - name of the event you want published. Will be concatenated with this.options.project
     * @param attributes {Attributes} - map of properties to publish alongside the event.
     */
    sendTelemetryEvent(eventName, attributes = {}) {
        const name = `${this.options.project}/${eventName}`;
        this.logger.debug(`Sending telemetry event: ${name}`);
        const { properties, measurements } = buildPropertiesAndMeasurements(attributes);
        this.appInsightsClient.trackEvent({ name, properties, measurements });
    }
    /**
     * Publishes exception to app insights dashboard
     *
     * @param exception {Error} - exception you want published.
     * @param attributes {Attributes} - map of measurements to publish alongside the exception.
     */
    sendTelemetryException(exception, attributes = {}) {
        const cleanException = sanitizeError(exception);
        this.logger.debug(`Sending telemetry exception: ${cleanException.message}`);
        const { properties, measurements } = buildPropertiesAndMeasurements(attributes);
        this.appInsightsClient.trackException({ exception: cleanException, properties, measurements });
    }
    /**
     * Publishes diagnostic information to app insights dashboard
     *
     * @param traceMessage {string} - trace message to sen to app insights.
     * @param properties {Properties} - map of properties to publish alongside the event.
     */
    sendTelemetryTrace(traceMessage, properties) {
        this.logger.debug(`Sending telemetry: trace ${traceMessage}`);
        this.appInsightsClient.trackTrace({ message: traceMessage, properties });
    }
    /**
     * Publishes metric to app insights dashboard
     *
     * @param metricName {string} - name of the metric you want published
     * @param value {number} - value of the metric
     * @param properties {Properties} - map of properties to publish alongside the event.
     */
    sendTelemetryMetric(metricName, value, properties) {
        this.logger.debug(`Sending telemetry metric: ${metricName}`);
        this.appInsightsClient.trackMetric({ name: metricName, value, properties });
    }
    start() {
        // Start data collection services
        appInsights.start();
    }
    stop() {
        this.appInsightsClient.flush();
        appInsights.dispose();
    }
    /**
     * Initiates the app insights client
     */
    createAppInsightsClient() {
        this.logger.debug('creating appInsightsClient');
        appInsights.setup(this.options.key);
        this.appInsightsClient = appInsights.defaultClient;
        this.appInsightsClient.commonProperties = this.buildCommonProperties();
        this.appInsightsClient.context.tags = this.buildContextTags();
        if (isAsimovKey(this.options.key)) {
            this.appInsightsClient.config.endpointUrl = AppInsights.ASIMOV_ENDPOINT;
        }
        if (this.options.userId) {
            this.appInsightsClient.context.tags['ai.user.id'] = this.options.userId;
        }
        if (this.options.sessionId) {
            this.appInsightsClient.context.tags['ai.session.id'] = this.options.sessionId;
        }
    }
    /**
     * Builds the properties to send with every event
     *
     * @return {Properties} map of base properties and properties provided when class was created
     */
    buildCommonProperties() {
        const baseProperties = {
            'common.cpus': getCpus(),
            'common.os': os.platform(),
            'common.platformversion': getPlatformVersion(),
            'common.systemmemory': getSystemMemory(),
            'common.usertype': this.env.getString('SFDX_USER_TYPE') || 'normal',
        };
        return Object.assign(baseProperties, this.options.commonProperties);
    }
    /**
     * Builds the context tags for appInsightsClient
     *
     * @return {Properties} map of tags to add to this.appInsightsClient.context.tags
     */
    buildContextTags() {
        const currentTags = this.appInsightsClient ? this.appInsightsClient.context.tags : {};
        const cleanedTags = this.hideGDPRdata(currentTags);
        return Object.assign({}, cleanedTags, this.options.contextTags);
    }
    // filters out non-GDPR compliant tags
    hideGDPRdata(tags) {
        this.gdprSensitiveKeys.forEach((key) => {
            tags[key] = AppInsights.GDPR_HIDDEN;
        });
        return tags;
    }
}
exports.AppInsights = AppInsights;
AppInsights.GDPR_HIDDEN = '<GDPR_HIDDEN>';
AppInsights.APP_INSIGHTS_SERVER = 'https://dc.services.visualstudio.com';
AppInsights.ASIMOV_ENDPOINT = 'https://vortex.data.microsoft.com/collect/v1';
//# sourceMappingURL=appInsights.js.map
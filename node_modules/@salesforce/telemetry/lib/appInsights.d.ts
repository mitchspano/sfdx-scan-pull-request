import { AsyncCreatable, Env } from '@salesforce/kit';
import { JsonPrimitive } from '@salesforce/ts-types';
import * as appInsights from 'applicationinsights';
export { TelemetryClient } from 'applicationinsights';
export declare type Properties = {
    [key: string]: string;
};
export declare type Measurements = {
    [key: string]: number;
};
export declare type Attributes = {
    [key: string]: JsonPrimitive | undefined;
};
export interface TelemetryOptions {
    project: string;
    key: string;
    commonProperties?: Properties;
    contextTags?: Properties;
    env?: Env;
    gdprSensitiveKeys?: string[];
    userId?: string;
    sessionId?: string;
    waitForConnection?: boolean;
}
export declare function getPlatformVersion(): string;
export declare function getCpus(): string;
export declare function buildPropertiesAndMeasurements(attributes: Attributes): {
    properties: Properties;
    measurements: Measurements;
};
/**
 * This is a wrapper around appinsights sdk for convenience.
 *
 * NOTE: THis should not be used directly. Use TelemetryReporter which
 * will check if telemetry is disabled and do GDPR checks.
 */
export declare class AppInsights extends AsyncCreatable<TelemetryOptions> {
    static GDPR_HIDDEN: string;
    static APP_INSIGHTS_SERVER: string;
    private static ASIMOV_ENDPOINT;
    appInsightsClient: appInsights.TelemetryClient;
    private options;
    private logger;
    private env;
    private gdprSensitiveKeys;
    constructor(options: TelemetryOptions);
    init(): Promise<void>;
    /**
     * Publishes event to app insights dashboard
     *
     * @param eventName {string} - name of the event you want published. Will be concatenated with this.options.project
     * @param attributes {Attributes} - map of properties to publish alongside the event.
     */
    sendTelemetryEvent(eventName: string, attributes?: Attributes): void;
    /**
     * Publishes exception to app insights dashboard
     *
     * @param exception {Error} - exception you want published.
     * @param attributes {Attributes} - map of measurements to publish alongside the exception.
     */
    sendTelemetryException(exception: Error, attributes?: Attributes): void;
    /**
     * Publishes diagnostic information to app insights dashboard
     *
     * @param traceMessage {string} - trace message to sen to app insights.
     * @param properties {Properties} - map of properties to publish alongside the event.
     */
    sendTelemetryTrace(traceMessage: string, properties?: Properties): void;
    /**
     * Publishes metric to app insights dashboard
     *
     * @param metricName {string} - name of the metric you want published
     * @param value {number} - value of the metric
     * @param properties {Properties} - map of properties to publish alongside the event.
     */
    sendTelemetryMetric(metricName: string, value: number, properties?: Properties): void;
    start(): void;
    stop(): void;
    /**
     * Initiates the app insights client
     */
    private createAppInsightsClient;
    /**
     * Builds the properties to send with every event
     *
     * @return {Properties} map of base properties and properties provided when class was created
     */
    private buildCommonProperties;
    /**
     * Builds the context tags for appInsightsClient
     *
     * @return {Properties} map of tags to add to this.appInsightsClient.context.tags
     */
    private buildContextTags;
    private hideGDPRdata;
}

"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const prompts_1 = require("../../../prompts");
const common_1 = require("../../../common");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'device.login');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
class Login extends command_1.SfdxCommand {
    async run() {
        if (await prompts_1.Prompts.shouldExitCommand(this.ux, this.flags.noprompt))
            return {};
        const oauthConfig = {
            loginUrl: await common_1.Common.resolveLoginUrl((0, ts_types_1.get)(this.flags.instanceurl, 'href', null)),
            clientId: this.flags.clientid,
        };
        if (this.flags.clientid) {
            oauthConfig.clientSecret = await prompts_1.Prompts.askForClientSecret(this.ux, this.flags.disablemasking);
        }
        const deviceOauthService = await core_1.DeviceOauthService.create(oauthConfig);
        const loginData = await deviceOauthService.requestDeviceLogin();
        if (this.flags.json) {
            this.ux.logJson(loginData);
        }
        else {
            this.ux.styledHeader(messages.getMessage('actionRequired'));
            this.ux.log(messages.getMessage('enterCode'), loginData.user_code, loginData.verification_uri);
            this.ux.log();
        }
        const approval = await deviceOauthService.awaitDeviceApproval(loginData);
        if (approval) {
            const authInfo = await deviceOauthService.authorizeAndSave(approval);
            await authInfo.handleAliasAndDefaultSettings({
                alias: this.flags.setalias,
                setDefault: this.flags.setdefaultusername,
                setDefaultDevHub: this.flags.setdefaultdevhubusername,
            });
            const fields = authInfo.getFields(true);
            await core_1.AuthInfo.identifyPossibleScratchOrgs(fields, authInfo);
            const successMsg = messages.getMessage('success', [fields.username]);
            this.ux.log(successMsg);
            return fields;
        }
        else {
            return {};
        }
    }
}
exports.default = Login;
Login.description = messages.getMessage('description');
Login.examples = messages.getMessage('examples').split(os.EOL);
Login.aliases = ['force:auth:device:login'];
Login.flagsConfig = {
    clientid: command_1.flags.string({
        char: 'i',
        description: commonMessages.getMessage('clientId'),
    }),
    instanceurl: command_1.flags.url({
        char: 'r',
        description: commonMessages.getMessage('instanceUrl'),
    }),
    setdefaultdevhubusername: command_1.flags.boolean({
        char: 'd',
        description: commonMessages.getMessage('setDefaultDevHub'),
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: commonMessages.getMessage('setDefaultUsername'),
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: commonMessages.getMessage('setAlias'),
    }),
    disablemasking: command_1.flags.boolean({
        description: commonMessages.getMessage('disableMasking'),
        hidden: true,
    }),
};
//# sourceMappingURL=login.js.map
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const prompts_1 = require("../../../prompts");
const common_1 = require("../../../common");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'jwt.grant');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
class Grant extends command_1.SfdxCommand {
    async run() {
        let result = {};
        if (await prompts_1.Prompts.shouldExitCommand(this.ux, this.flags.noprompt))
            return {};
        try {
            const authInfo = await this.initAuthInfo();
            await authInfo.handleAliasAndDefaultSettings({
                alias: this.flags.setalias,
                setDefault: this.flags.setdefaultusername,
                setDefaultDevHub: this.flags.setdefaultdevhubusername,
            });
            result = authInfo.getFields(true);
            await core_1.AuthInfo.identifyPossibleScratchOrgs(result, authInfo);
        }
        catch (err) {
            const msg = (0, ts_types_1.getString)(err, 'message');
            throw messages.createError('JwtGrantError', [msg]);
        }
        const successMsg = commonMessages.getMessage('authorizeCommandSuccess', [result.username, result.orgId]);
        this.ux.log(successMsg);
        return result;
    }
    async initAuthInfo() {
        const oauth2OptionsBase = {
            clientId: this.flags.clientid,
            privateKeyFile: this.flags.jwtkeyfile,
        };
        const loginUrl = await common_1.Common.resolveLoginUrl((0, ts_types_1.get)(this.flags.instanceurl, 'href', null));
        const oauth2Options = loginUrl ? Object.assign(oauth2OptionsBase, { loginUrl }) : oauth2OptionsBase;
        let authInfo;
        try {
            authInfo = await core_1.AuthInfo.create({
                username: this.flags.username,
                oauth2Options,
            });
        }
        catch (error) {
            const err = error;
            if (err.name === 'AuthInfoOverwriteError') {
                this.logger.debug('Auth file already exists. Removing and starting fresh.');
                const remover = await core_1.AuthRemover.create();
                await remover.removeAuth(this.flags.username);
                authInfo = await core_1.AuthInfo.create({
                    username: this.flags.username,
                    oauth2Options,
                });
            }
            else {
                throw err;
            }
        }
        await authInfo.save();
        return authInfo;
    }
}
exports.default = Grant;
Grant.description = messages.getMessage('description');
Grant.examples = messages.getMessage('examples').split(os.EOL);
Grant.aliases = ['force:auth:jwt:grant'];
Grant.flagsConfig = {
    username: command_1.flags.string({
        char: 'u',
        description: messages.getMessage('username'),
        required: true,
    }),
    jwtkeyfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('key'),
        required: true,
    }),
    clientid: command_1.flags.string({
        char: 'i',
        description: commonMessages.getMessage('clientId'),
        required: true,
    }),
    instanceurl: command_1.flags.url({
        char: 'r',
        description: commonMessages.getMessage('instanceUrl'),
    }),
    setdefaultdevhubusername: command_1.flags.boolean({
        char: 'd',
        description: commonMessages.getMessage('setDefaultDevHub'),
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: commonMessages.getMessage('setDefaultUsername'),
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: commonMessages.getMessage('setAlias'),
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: commonMessages.getMessage('noPromptAuth'),
        required: false,
        hidden: true,
    }),
};
//# sourceMappingURL=grant.js.map
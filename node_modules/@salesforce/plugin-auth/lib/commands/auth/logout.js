"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const core_1 = require("@salesforce/core");
const command_1 = require("@salesforce/command");
const prompts_1 = require("../../prompts");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'logout');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
class Logout extends command_1.SfdxCommand {
    async run() {
        if (this.flags.targetusername && this.flags.all) {
            throw new core_1.SfError(messages.getMessage('specifiedBothUserAndAllError'), 'SpecifiedBothUserAndAllError');
        }
        const remover = await core_1.AuthRemover.create();
        const targetUsername = this.flags.targetusername
            ? this.flags.targetusername
            : this.configAggregator.getInfo(core_1.OrgConfigProperties.TARGET_ORG).value;
        let usernames;
        try {
            usernames = this.shouldFindAllAuths()
                ? Object.keys(remover.findAllAuths())
                : [(await remover.findAuth(targetUsername)).username];
        }
        catch (e) {
            // keep the error name the same for SFDX
            const err = e;
            err.name = 'NoOrgFound';
            throw core_1.SfError.wrap(err);
        }
        if (await this.shouldRunCommand(usernames)) {
            for (const username of usernames) {
                await remover.removeAuth(username);
            }
            this.ux.log(messages.getMessage('logoutOrgCommandSuccess', [usernames.join(os.EOL)]));
            return usernames;
        }
        else {
            return [];
        }
    }
    shouldFindAllAuths() {
        return !!this.flags.all || (!this.flags.targetusername && core_1.Global.getEnvironmentMode() === core_1.Mode.DEMO);
    }
    async shouldRunCommand(usernames) {
        const orgsToDelete = [usernames.join(os.EOL)];
        const message = messages.getMessage('logoutCommandYesNo', orgsToDelete);
        return prompts_1.Prompts.shouldRunCommand(this.ux, this.flags.noprompt, message);
    }
}
exports.default = Logout;
Logout.description = messages.getMessage('description');
Logout.examples = messages.getMessage('examples').split(os.EOL);
Logout.supportsUsername = true;
Logout.aliases = ['force:auth:logout'];
Logout.flagsConfig = {
    all: command_1.flags.boolean({
        char: 'a',
        description: messages.getMessage('all'),
        longDescription: messages.getMessage('allLong'),
        required: false,
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: commonMessages.getMessage('noPrompt'),
        required: false,
    }),
};
//# sourceMappingURL=logout.js.map
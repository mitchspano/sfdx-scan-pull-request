"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Common = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-auth', 'messages');
class Common {
    static async resolveLoginUrl(instanceUrl) {
        var _a;
        const logger = await core_1.Logger.child('Common', { tag: 'resolveLoginUrl' });
        if (instanceUrl) {
            if (instanceUrl.includes('lightning.force.com')) {
                logger.warn(messages.getMessage('invalidInstanceUrl'));
                throw new core_1.SfError(messages.getMessage('invalidInstanceUrl'), 'URL_WARNING');
            }
            return instanceUrl;
        }
        let loginUrl;
        try {
            const project = await core_1.SfProject.resolve();
            const projectJson = await project.resolveProjectConfig();
            loginUrl = (0, ts_types_1.getString)(projectJson, 'sfdcLoginUrl', core_1.SfdcUrl.PRODUCTION);
        }
        catch (err) {
            const message = ((0, ts_types_1.isObject)(err) ? (_a = Reflect.get(err, 'message')) !== null && _a !== void 0 ? _a : err : err);
            logger.debug(`error occurred while trying to determine loginUrl: ${message}`);
            loginUrl = core_1.SfdcUrl.PRODUCTION;
        }
        if (loginUrl.includes('lightning.force.com')) {
            logger.warn(messages.getMessage('invalidInstanceUrl'));
            throw new core_1.SfError(messages.getMessage('invalidInstanceUrl'), 'URL_WARNING');
        }
        logger.debug(`loginUrl: ${loginUrl}`);
        return loginUrl;
    }
}
exports.Common = Common;
//# sourceMappingURL=common.js.map
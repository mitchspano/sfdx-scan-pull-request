"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.Node = void 0;
class Node {
    constructor() {
        this.children = {};
        this.elapsed = 0;
    }
}
exports.Node = Node;
const micros = () => {
    const [seconds, nanoseconds] = process.hrtime();
    return seconds * 1000000 + Math.floor(nanoseconds / 1000);
};
function start(enabled, Module) {
    const list = {};
    let node = new Node();
    let loading = false;
    let time = 0;
    if (enabled) {
        const paths = require('path');
        Module = Module || require('module');
        const origLoad = Module._load;
        let path = '';
        Module._load = (request, parent, isMain) => {
            const wasLoading = loading;
            loading = true;
            const lastPath = path;
            path = paths.resolve(path, request);
            const lastNode = node;
            if (!lastNode.children[request]) {
                lastNode.children[request] = new Node();
            }
            node = lastNode.children[request];
            const mark = micros();
            const mod = origLoad.call(Module, request, parent, isMain);
            const elapsed = micros() - mark;
            if (!list[path])
                list[path] = elapsed;
            if (node.elapsed === 0)
                node.elapsed = elapsed;
            node = lastNode;
            path = lastPath;
            if (!wasLoading) {
                loading = false;
                node.elapsed += elapsed;
                time += elapsed;
            }
            return mod;
        };
    }
    const analytics = {
        report() {
            return { time, size: Object.keys(list).length, list, tree: node };
        },
        dump() {
            if (enabled) {
                // eslint-disable-next-line no-console
                console.error(JSON.stringify(analytics.report(), null, 2));
            }
        },
    };
    return analytics;
}
exports.start = start;
//# sourceMappingURL=index.js.map
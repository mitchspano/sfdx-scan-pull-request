"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toBoolean = exports.upperFirst = exports.snakeCase = exports.camelCaseToTitleCase = exports.lowerFirst = exports.isEmpty = void 0;
const ts_types_1 = require("@salesforce/ts-types");
/**
 * Checks if value is empty. A value is considered empty unless itâ€™s an arguments object, array, string, or
 * jQuery-like collection with a length greater than 0 or an object with own enumerable properties.
 *
 * @param value The value to inspect.
 */
function isEmpty(value) {
    if (value == null)
        return true;
    if (ts_types_1.isNumber(value))
        return false;
    if (ts_types_1.isBoolean(value))
        return false;
    if (ts_types_1.isArrayLike(value) && value.length > 0)
        return false;
    if (ts_types_1.hasNumber(value, 'size') && value.size > 0)
        return false;
    if (ts_types_1.isObject(value) && Object.keys(value).length > 0)
        return false;
    return true;
}
exports.isEmpty = isEmpty;
// underlying function
function lowerFirst(value) {
    return value && value.charAt(0).toLowerCase() + value.slice(1);
}
exports.lowerFirst = lowerFirst;
/**
 * Formats a camel case style `string` into a title case.
 *
 * @param text Text to transform.
 */
function camelCaseToTitleCase(text) {
    return text
        .replace(/(^\w|\s\w)/g, (m) => m.toUpperCase())
        .replace(/([A-Z][a-z]+)/g, ' $1')
        .replace(/\s{2,}/g, ' ')
        .trim();
}
exports.camelCaseToTitleCase = camelCaseToTitleCase;
// underlying function
function snakeCase(str) {
    return (str &&
        str
            .replace(/([a-z])([A-Z])/g, '$1_$2')
            .toLowerCase()
            .replace(/\W/g, '_')
            .replace(/^_+|_+$/g, ''));
}
exports.snakeCase = snakeCase;
// underlying function
function upperFirst(value) {
    return value && value.charAt(0).toUpperCase() + value.slice(1);
}
exports.upperFirst = upperFirst;
/**
 * Converts value to a boolean.
 *
 * @param value The value to convert
 * @returns boolean
 */
function toBoolean(value) {
    switch (typeof value) {
        case 'boolean':
            return value;
        case 'string':
            return value.toLowerCase() === 'true' || value === '1';
        default:
            return false;
    }
}
exports.toBoolean = toBoolean;
//# sourceMappingURL=internal.js.map
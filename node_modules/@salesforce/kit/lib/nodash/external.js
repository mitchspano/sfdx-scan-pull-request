"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toNumber = exports.sortBy = exports.set = exports.once = exports.omit = exports.merge = exports.maxBy = exports.minBy = exports.mapKeys = exports.keyBy = exports.includes = exports.findKey = exports.defaults = void 0;
/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */
// @ts-ignore ignore the demand for typings for the locally built lodash
const _ = require("../../vendor/lodash");
// underlying function
function defaults(obj, ...otherArgs) {
    return _.defaults(obj, ...otherArgs);
}
exports.defaults = defaults;
/**
 * This method is like `find` except that it returns the key of the first element predicate returns truthy for
 * instead of the element itself.
 *
 * @param obj The object to search.
 * @param predicate The function invoked per iteration.
 */
function findKey(obj, predicate) {
    return _.findKey(obj, predicate);
}
exports.findKey = findKey;
/**
 * Checks if target is in collection using SameValueZero for equality comparisons. If fromIndex is negative,
 * itâ€™s used as the offset from the end of collection.
 *
 * @param collection The collection to search.
 * @param target The value to search for.
 * @param fromIndex The index to search from.
 */
function includes(collection, target, fromIndex) {
    return _.includes(collection, target, fromIndex);
}
exports.includes = includes;
// underlying function
function keyBy(collection, iteratee) {
    return _.keyBy(collection, iteratee);
}
exports.keyBy = keyBy;
// underlying function
function mapKeys(obj, iteratee) {
    return _.mapKeys(obj, iteratee);
}
exports.mapKeys = mapKeys;
/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @param array The array to iterate over.
 * @param iteratee The iteratee invoked per element.
 */
function minBy(collection, iteratee) {
    return _.minBy(collection, iteratee);
}
exports.minBy = minBy;
/**
 * This method is like `_.max` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @param array The array to iterate over.
 * @param iteratee The iteratee invoked per element.
 */
function maxBy(collection, iteratee) {
    return _.maxBy(collection, iteratee);
}
exports.maxBy = maxBy;
// underlying function
function merge(obj, ...otherArgs) {
    return _.merge(obj, ...otherArgs);
}
exports.merge = merge;
// underlying function
function omit(obj, ...paths) {
    return _.omit(obj, ...paths);
}
exports.omit = omit;
/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls to the function return the value
 * of the first call. The `func` is invoked with the this binding and arguments of the created function.
 *
 * @param func The function to restrict.
 */
function once(func) {
    return _.once(func);
}
exports.once = once;
// underlying function
function set(obj, path, value) {
    return _.set(obj, path, value);
}
exports.set = set;
// underlying function
function sortBy(collection, ...iteratees) {
    return _.sortBy(collection, ...iteratees);
}
exports.sortBy = sortBy;
/**
 * Converts `value` to a number.
 *
 * @param value The value to process.
 *
 * ```
 * _.toNumber(3);
 * // => 3
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3');
 * // => 3
 * ```
 */
function toNumber(value) {
    return _.toNumber(value);
}
exports.toNumber = toNumber;
//# sourceMappingURL=external.js.map
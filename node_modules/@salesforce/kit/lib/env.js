"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.env = exports.Env = void 0;
const ts_types_1 = require("@salesforce/ts-types");
const errors_1 = require("./errors");
const nodash_1 = require("./nodash");
/**
 * An injectable abstraction on top of `process.env` with various convenience functions
 * for accessing environment variables of different anticipated shapes.
 */
class Env {
    constructor(store = (process && process.env) || {}) {
        this.store = store;
        this.store = store;
    }
    // underlying method
    getString(key, def) {
        return this.store[key] || def;
    }
    // underlying method
    getStringIn(key, values, def) {
        const re = new RegExp(values.join('|'), 'i');
        if (def && !re.test(def.toString())) {
            const valueAsString = values.join(', ');
            throw new errors_1.InvalidDefaultEnvValueError(`${def} is not a member of ${valueAsString}`);
        }
        const value = this.getString(key);
        if (!value)
            return def;
        return re.test(value) ? value : def;
    }
    // underlying method
    getKeyOf(key, obj, defOrTransform, transform) {
        let value;
        let def;
        if (typeof defOrTransform === 'function') {
            transform = defOrTransform;
        }
        else {
            def = defOrTransform;
        }
        if (def === undefined) {
            value = this.getStringIn(key, Object.keys(obj));
        }
        else {
            if (transform)
                def = transform(def);
            value = this.getStringIn(key, Object.keys(obj), def);
        }
        if (!value)
            return;
        if (typeof transform === 'function')
            value = transform(value);
        if (ts_types_1.isKeyOf(obj, value))
            return value;
    }
    /**
     * Sets a `string` value for a given key, or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param value The value to set.
     */
    setString(key, value) {
        if (value == null) {
            this.unset(key);
            return;
        }
        this.store[key] = value;
    }
    // underlying method
    getList(key, def) {
        const value = this.getString(key);
        return value ? value.split(',') : def;
    }
    /**
     * Sets a `string` value from a list for a given key by joining values with a `,` into a raw `string` value,
     * or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param values The values to set.
     */
    setList(key, values) {
        if (values == null) {
            this.unset(key);
            return;
        }
        this.setString(key, values.join(','));
    }
    /**
     * Gets a `boolean` value for a given key. Returns the default value if no value was found.
     *
     * @param key The name of the envar.
     * @param def A default boolean, which itself defaults to `false` if not otherwise supplied.
     */
    getBoolean(key, def = false) {
        const value = this.getString(key, def.toString());
        return nodash_1.toBoolean(value);
    }
    /**
     * Sets a `boolean` value for a given key, or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param value The value to set.
     */
    setBoolean(key, value) {
        if (value == null) {
            this.unset(key);
            return;
        }
        this.setString(key, value.toString());
    }
    /**
     * Gets a `number` value for a given key. Returns the default value if no value was found.
     *
     * @param key The name of the envar.
     * @param def A default number, which itself defaults to `undefined` if not otherwise supplied.
     */
    getNumber(key, def) {
        const value = this.getString(key);
        if (value) {
            const num = nodash_1.toNumber(value);
            return isNaN(num) && ts_types_1.isNumber(def) ? def : num;
        }
        return ts_types_1.isNumber(def) ? def : undefined;
    }
    /**
     * Sets a `number` value for a given key, or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param value The value to set.
     */
    setNumber(key, value) {
        if (value == null) {
            this.unset(key);
            return;
        }
        this.setString(key, ts_types_1.isNumber(value) ? String(value) : value);
    }
    /**
     * Unsets a value for a given key.
     *
     * @param key The name of the envar.
     */
    unset(key) {
        delete this.store[key];
    }
    /**
     * Gets an array of all definitely assigned key-value pairs from the underlying envar store.
     */
    entries() {
        return ts_types_1.definiteEntriesOf(this.store);
    }
}
exports.Env = Env;
/**
 * The default `Env` instance, which wraps `process.env`.
 */
exports.env = new Env();
//# sourceMappingURL=env.js.map
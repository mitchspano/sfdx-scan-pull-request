/**
 * A base class for classes that must be constructed and initialized asynchronously.
 */
export declare abstract class AsyncCreatable<O = object> {
    /**
     * Constructs a new `AsyncCreatable` instance. For internal and subclass use only.
     * New subclass instances must be created with the static {@link create} method.
     *
     * @param options An options object providing initialization params.
     */
    constructor(options: O);
    /**
     * Asynchronously constructs and initializes a new instance of a concrete subclass with the provided `options`.
     *
     * @param options An options object providing initialization params to the async constructor.
     */
    static create<P, T extends AsyncCreatable<P>>(this: new (opts: P) => T, options: P): Promise<T>;
    /**
     * Asynchronously initializes newly constructed instances of a concrete subclass.
     */
    protected abstract init(): Promise<void>;
}
/**
 * A base class for classes that must be constructed and initialized asynchronously without requiring an options object.
 */
export declare abstract class AsyncOptionalCreatable<O = object> {
    /**
     * Constructs a new `AsyncCreatable` instance. For internal and subclass use only.
     * New subclass instances must be created with the static {@link create} method.
     *
     * @param options An options object providing initialization params.
     */
    constructor(options?: O);
    /**
     * Asynchronously constructs and initializes a new instance of a concrete subclass with the optional `options`.
     *
     * @param options An options object providing initialization params to the async constructor.
     */
    static create<P, T extends AsyncOptionalCreatable<P>>(this: new (opts?: P) => T, options?: P): Promise<T>;
    /**
     * Asynchronously initializes newly constructed instances of a concrete subclass.
     */
    protected abstract init(): Promise<void>;
}

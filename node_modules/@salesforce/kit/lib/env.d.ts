import { Dictionary, KeyValue, Nullable, Optional } from '@salesforce/ts-types';
/**
 * An injectable abstraction on top of `process.env` with various convenience functions
 * for accessing environment variables of different anticipated shapes.
 */
export declare class Env {
    private store;
    constructor(store?: Dictionary<string>);
    /**
     * Gets a `string` value for a given key.
     *
     * @param key The name of the envar.
     */
    getString(key: string): Optional<string>;
    /**
     * Gets a `string` value for a given key.
     *
     * @param key The name of the envar.
     * @param def A default value.
     */
    getString(key: string, def: string): string;
    /**
     * Gets a `string` value from a finite set of expected values, matched case-insensitively.
     *
     * @param key The name of the envar.
     * @param values The finite set of expected values.
     */
    getStringIn(key: string, values: string[]): Optional<string>;
    /**
     * Gets a `string` value from a finite set of expected values, matched case-insensitively, using a default if
     * not found.
     *
     * @param key The name of the envar.
     * @param values The finite set of expected values.
     * @param def A default value.
     * @throws {@link InvalidDefaultEnvValueError} If the provided default value is not a member of the expected set.
     */
    getStringIn(key: string, values: string[], def: string): string;
    /**
     * Gets a `string` value from a finite set of expected values derived from the keys of a given object of type `T`,
     * matched case-insensitively. An optional `transform` may be provided that will preprocess both the found value
     * and any provided default before testing for membership in the target object's key set.
     *
     * @param key The name of the envar.
     * @param obj The object providing the keys to test with.
     * @param transform A transform function applied to both the default and value before testing that
     * either is a key of `T`.
     *
     * ```
     * enum Mode { TEST = 'test', DEMO = 'demo' }
     * env.setString('MY_ENVAR', Mode.DEMO);
     * const check = env.getString('MY_ENVAR');
     * // check -> 'demo'
     * // typeof check -> string
     * const value = env.getKeyOf('MY_ENVAR', Mode, v => v.toUpperCase());
     * // value -> 'DEMO'
     * // typeof value -> 'TEST' | 'DEMO' (i.e. Extract<keyof typeof Mode, string>)
     * const enumValue = Mode[value];
     * // enumValue -> 'demo'
     * // typeof enumValue -> Mode
     * ```
     */
    getKeyOf<T extends Record<string, unknown>>(key: string, obj: T, transform?: (k: string) => string): Optional<Extract<keyof T, string>>;
    /**
     * Gets a `string` value from a finite set of expected values derived from the keys of a given object of type `T`,
     * matched case-insensitively, using a default if not found. An optional `transform` may be provided that will
     * preprocess both the found value and any provided default before testing for membership in the target object's
     * key set.
     *
     * @param key The name of the envar.
     * @param obj The object providing the keys to test with.
     * @param def A default value.
     * @param transform A transform function applied to both the default and value before testing that
     * either is a key of `T`.
     * @param {@link InvalidDefaultEnvValueError} If the provided default value is not a member of the expected set.
     *
     * ```
     * enum Mode { TEST = 'test', DEMO = 'demo' }
     * env.setString('MY_ENVAR', Mode.DEMO);
     * const check = env.getString('MY_ENVAR');
     * // check -> 'demo'
     * // typeof check -> string
     * const value = env.getKeyOf('MY_ENVAR', Mode, Mode.TEST, v => v.toUpperCase());
     * // value -> 'DEMO'
     * // typeof value -> 'TEST' | 'DEMO' (Extract<keyof typeof Mode, string>)
     * const enumValue = Mode[value];
     * // enumValue -> 'demo'
     * // typeof enumValue -> Mode
     * ```
     */
    getKeyOf<T extends Record<string, unknown>>(key: string, obj: T, def: string, transform?: (k: string) => string): Extract<keyof T, string>;
    /**
     * Sets a `string` value for a given key, or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param value The value to set.
     */
    setString(key: string, value: Nullable<string>): void;
    /**
     * Gets a list of `string` values for a given key by splitting the raw value on `,` chars.
     *
     * @param key The name of the envar.
     */
    getList(key: string): Optional<string[]>;
    /**
     * Gets a list of `string` values for a given key by splitting the raw value on `,` chars.
     *
     * @param key The name of the envar.
     * @param def A default list of values.
     */
    getList(key: string, def: string[]): string[];
    /**
     * Sets a `string` value from a list for a given key by joining values with a `,` into a raw `string` value,
     * or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param values The values to set.
     */
    setList(key: string, values: Nullable<string[]>): void;
    /**
     * Gets a `boolean` value for a given key. Returns the default value if no value was found.
     *
     * @param key The name of the envar.
     * @param def A default boolean, which itself defaults to `false` if not otherwise supplied.
     */
    getBoolean(key: string, def?: boolean): boolean;
    /**
     * Sets a `boolean` value for a given key, or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param value The value to set.
     */
    setBoolean(key: string, value: Nullable<boolean>): void;
    /**
     * Gets a `number` value for a given key. Returns the default value if no value was found.
     *
     * @param key The name of the envar.
     * @param def A default number, which itself defaults to `undefined` if not otherwise supplied.
     */
    getNumber(key: string, def?: number): Optional<number>;
    /**
     * Sets a `number` value for a given key, or removes the current value when no value is given.
     *
     * @param key The name of the envar.
     * @param value The value to set.
     */
    setNumber(key: string, value: Nullable<number>): void;
    /**
     * Unsets a value for a given key.
     *
     * @param key The name of the envar.
     */
    unset(key: string): void;
    /**
     * Gets an array of all definitely assigned key-value pairs from the underlying envar store.
     */
    entries(): Array<KeyValue<string>>;
}
/**
 * The default `Env` instance, which wraps `process.env`.
 */
export declare const env: Env;

"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncOptionalCreatable = exports.AsyncCreatable = void 0;
/**
 * A base class for classes that must be constructed and initialized asynchronously.
 */
class AsyncCreatable {
    /**
     * Constructs a new `AsyncCreatable` instance. For internal and subclass use only.
     * New subclass instances must be created with the static {@link create} method.
     *
     * @param options An options object providing initialization params.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(options) {
        /* leave up to implementer */
    }
    /**
     * Asynchronously constructs and initializes a new instance of a concrete subclass with the provided `options`.
     *
     * @param options An options object providing initialization params to the async constructor.
     */
    static async create(options) {
        const instance = new this(options);
        await instance.init();
        return instance;
    }
}
exports.AsyncCreatable = AsyncCreatable;
/**
 * A base class for classes that must be constructed and initialized asynchronously without requiring an options object.
 */
class AsyncOptionalCreatable {
    /**
     * Constructs a new `AsyncCreatable` instance. For internal and subclass use only.
     * New subclass instances must be created with the static {@link create} method.
     *
     * @param options An options object providing initialization params.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(options) {
        /* leave up to implementer */
    }
    /**
     * Asynchronously constructs and initializes a new instance of a concrete subclass with the optional `options`.
     *
     * @param options An options object providing initialization params to the async constructor.
     */
    static async create(options) {
        const instance = new this(options);
        await instance.init();
        return instance;
    }
}
exports.AsyncOptionalCreatable = AsyncOptionalCreatable;
//# sourceMappingURL=creatable.js.map
/**
 * Any `Error` compatible with the `NamedError` type signature.
 */
declare type NamedErrorLike = Error & {
    readonly name: string;
    readonly cause?: NamedErrorLike;
    readonly fullStack?: string;
};
export declare class NamedError extends Error {
    readonly name: string;
    readonly cause?: NamedErrorLike;
    constructor(name: string, cause?: NamedErrorLike);
    constructor(name: string, message?: string, cause?: NamedErrorLike);
    get fullStack(): string | undefined;
}
export declare class JsonParseError extends NamedError {
    readonly path?: string | undefined;
    readonly line?: number | undefined;
    readonly errorPortion?: string | undefined;
    constructor(cause: Error, path?: string | undefined, line?: number | undefined, errorPortion?: string | undefined);
    /**
     * Creates a `JsonParseError` from a `SyntaxError` thrown during JSON parsing.
     *
     * @param error The `SyntaxError` to convert to a `JsonParseError`.
     * @param data The data input that caused the error.
     * @param jsonPath The path from which the data was read, if known.
     */
    static create(error: SyntaxError, data: string, jsonPath?: string): JsonParseError;
    private static format;
}
export declare class JsonStringifyError extends NamedError {
    constructor(cause: Error);
}
export declare class JsonDataFormatError extends NamedError {
    constructor(message: string);
}
export declare class InvalidDefaultEnvValueError extends NamedError {
    constructor(message: string);
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserListCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'list');
class UserListCommand extends command_1.SfdxCommand {
    async run() {
        this.ux.warn('The --targetdevhubusername flag is deprecated and will be removed in v57 or later.');
        this.conn = this.org.getConnection();
        // parallelize 2 org queries and 2 fs operations
        const [userInfos, profileInfos, userAuthData, aliases] = await Promise.all([
            this.buildUserInfos(),
            this.buildProfileInfos(),
            this.org.readUserAuthFiles(),
            (await core_1.StateAggregator.getInstance()).aliases,
        ]);
        const authList = userAuthData.map((authData) => {
            const username = authData.getUsername();
            // if they passed in a alias and it maps to something we have an Alias.
            const alias = aliases.get(username);
            return {
                defaultMarker: this.org.getUsername() === username ? '(A)' : '',
                alias: alias || '',
                username,
                profileName: profileInfos[userInfos[username].ProfileId],
                orgId: this.org.getOrgId(),
                accessToken: authData.getFields().accessToken,
                instanceUrl: authData.getFields().instanceUrl,
                loginUrl: authData.getFields().loginUrl,
                userId: userInfos[username].Id,
            };
        });
        const columns = {
            defaultMarker: { header: 'Default' },
            alias: { header: 'Alias' },
            username: { header: 'Username' },
            profileName: { header: 'Profile Name' },
            userId: { header: 'User Id' },
        };
        this.ux.styledHeader(`Users in org ${this.org.getOrgId()}`);
        this.ux.table(authList, columns);
        return authList;
    }
    /**
     * Build a map of { [Username]: { ProfileId, Id } } for all users in the org
     *
     * @private
     * @return Promise<UserInfo>
     */
    async buildUserInfos() {
        const userRecords = await this.conn.query('SELECT username, profileid, id FROM User');
        if (userRecords.records) {
            return userRecords.records.reduce((userInfo, { Username, ProfileId, Id }) => {
                userInfo[Username] = { ProfileId, Id };
                return userInfo;
            }, {});
        }
    }
    /**
     * Build a map of { [ProfileId]: ProfileName } for all profiles in the org
     *
     * @private
     * @return Promise<ProfileInfo>
     */
    async buildProfileInfos() {
        const profileRecords = await this.conn.query('SELECT id, name FROM Profile');
        if (profileRecords.records) {
            return profileRecords.records.reduce((profileInfo, { Id, Name }) => {
                profileInfo[Id] = Name;
                return profileInfo;
            }, {});
        }
    }
}
exports.UserListCommand = UserListCommand;
UserListCommand.description = messages.getMessage('description');
UserListCommand.examples = messages.getMessage('examples').split(os.EOL);
UserListCommand.requiresUsername = true;
UserListCommand.supportsDevhubUsername = true;
//# sourceMappingURL=list.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPasswordGenerateCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'password.generate');
class UserPasswordGenerateCommand extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.passwordData = [];
    }
    async run() {
        var _a;
        this.ux.warn('The --targetdevhubusername flag is deprecated and will be removed in v57 or later.');
        this.usernames = (_a = this.flags.onbehalfof) !== null && _a !== void 0 ? _a : [this.org.getUsername()];
        const passwordCondition = {
            length: (0, ts_types_1.asNumber)(this.flags.length, 13),
            complexity: (0, ts_types_1.asNumber)(this.flags.complexity, 5),
        };
        for (const aliasOrUsername of this.usernames) {
            try {
                // Convert any aliases to usernames
                // fetch will return undefined if there's no Alias for that name
                const username = (await core_1.StateAggregator.getInstance()).aliases.resolveUsername(aliasOrUsername);
                const authInfo = await core_1.AuthInfo.create({ username });
                const connection = await core_1.Connection.create({ authInfo });
                const org = await core_1.Org.create({ connection });
                const user = await core_1.User.create({ org });
                const password = core_1.User.generatePasswordUtf8(passwordCondition);
                // we only need the Id, so instead of User.retrieve we'll just query
                // this avoids permission issues if ProfileId is restricted for the user querying for it
                const result = await connection.singleRecordQuery(`SELECT Id FROM User WHERE Username='${username}'`);
                // userId is used by `assignPassword` so we need to set it here
                authInfo.getFields().userId = result.Id;
                await user.assignPassword(authInfo, password);
                password.value((pass) => {
                    this.passwordData.push({ username, password: pass.toString('utf-8') });
                    authInfo.update({ password: pass.toString('utf-8') });
                });
                await authInfo.save();
            }
            catch (e) {
                const err = e;
                if (err.message.includes('Cannot set password for self') ||
                    err.message.includes('The requested Resource does not exist')) {
                    // we don't have access to the apiVersion from what happened in the try, so until v51 is r2, we have to check versions the hard way
                    const authInfo = await core_1.AuthInfo.create({ username: aliasOrUsername });
                    const connection = await core_1.Connection.create({ authInfo });
                    const org = await core_1.Org.create({ connection });
                    if (parseInt(await org.retrieveMaxApiVersion(), 10) >= 51) {
                        throw new core_1.SfError(messages.getMessage('noSelfSetError'), 'noSelfSetErrorError', messages.getMessage('noSelfSetErrorActions').split(os.EOL));
                    }
                    throw new core_1.SfError(messages.getMessage('noSelfSetErrorV50'), 'noSelfSetErrorError');
                }
                throw core_1.SfError.wrap(err);
            }
        }
        this.print();
        return this.passwordData.length === 1 ? this.passwordData[0] : this.passwordData;
    }
    print() {
        if (this.passwordData) {
            const successMsg = messages.getMessage('success', [this.passwordData[0].password, this.passwordData[0].username]);
            const viewMsg = messages.getMessage('viewWithCommand', [this.passwordData[0].username]);
            this.ux.log(`${successMsg}${os.EOL}${viewMsg}`);
        }
        else {
            this.ux.log(messages.getMessage('successMultiple', [os.EOL]));
            const columnData = {
                username: { header: 'USERNAME' },
                password: { header: 'PASSWORD' },
            };
            this.ux.table(this.passwordData, columnData);
        }
    }
}
exports.UserPasswordGenerateCommand = UserPasswordGenerateCommand;
UserPasswordGenerateCommand.description = messages.getMessage('description');
UserPasswordGenerateCommand.examples = messages.getMessage('examples').split(os.EOL);
UserPasswordGenerateCommand.requiresUsername = true;
UserPasswordGenerateCommand.supportsDevhubUsername = true;
UserPasswordGenerateCommand.flagsConfig = {
    onbehalfof: command_1.flags.array({
        char: 'o',
        description: messages.getMessage('flags.onBehalfOf'),
    }),
    length: command_1.flags.integer({
        char: 'l',
        description: messages.getMessage('flags.length'),
        min: 8,
        max: 1000,
        default: 13,
    }),
    // the higher the value, the stronger the password
    complexity: command_1.flags.integer({
        char: 'c',
        description: messages.getMessage('flags.complexity'),
        min: 0,
        max: 5,
        default: 5,
    }),
};
//# sourceMappingURL=generate.js.map
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPermsetAssignCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'permset.assign');
class UserPermsetAssignCommand extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.successes = [];
        this.failures = [];
    }
    async run() {
        var _a;
        try {
            const aliasOrUsernames = (_a = this.flags.onbehalfof) !== null && _a !== void 0 ? _a : [this.org.getUsername()];
            const connection = this.org.getConnection();
            const org = await core_1.Org.create({ connection });
            for (const aliasOrUsername of aliasOrUsernames) {
                // Attempt to convert any aliases to usernames.  Not found alias will be **assumed** to be a username
                const username = (await core_1.StateAggregator.getInstance()).aliases.resolveUsername(aliasOrUsername);
                const user = await core_1.User.create({ org });
                // get userId of whomever the permset will be assigned to via query to avoid AuthInfo if remote user
                const queryResult = await connection.singleRecordQuery(`SELECT Id FROM User WHERE Username='${username}'`);
                // this is hard to parallelize because core returns void instead of some result object we can handle.  Promise.allSettled might work
                for (const permsetName of this.flags.permsetname) {
                    try {
                        await user.assignPermissionSets(queryResult.Id, [permsetName]);
                        this.successes.push({
                            name: aliasOrUsername,
                            value: permsetName,
                        });
                    }
                    catch (e) {
                        const err = e;
                        this.failures.push({
                            name: aliasOrUsername,
                            message: err.message,
                        });
                    }
                }
            }
        }
        catch (e) {
            if (e instanceof Error || typeof e === 'string') {
                throw core_1.SfError.wrap(e);
            }
            throw e;
        }
        this.print();
        this.setExitCode();
        return {
            successes: this.successes,
            failures: this.failures,
        };
    }
    print() {
        if (this.failures.length > 0 && this.successes.length > 0) {
            this.ux.styledHeader('Partial Success');
            this.ux.styledHeader('Permsets Assigned');
            this.ux.table(this.successes, { name: { header: 'Username' }, value: { header: 'Permission Set Assignment' } });
            this.ux.log('');
            this.ux.styledHeader('Failures');
            this.ux.table(this.failures, { name: { header: 'Username' }, message: { header: 'Error Message' } });
        }
        else if (this.successes.length > 0) {
            this.ux.styledHeader('Permsets Assigned');
            this.ux.table(this.successes, { name: { header: 'Username' }, value: { header: 'Permission Set Assignment' } });
        }
        else if (this.failures.length > 0) {
            this.ux.styledHeader('Failures');
            this.ux.table(this.failures, { name: { header: 'Username' }, message: { header: 'Error Message' } });
        }
    }
    setExitCode() {
        if (this.failures.length && this.successes.length) {
            process.exitCode = 68;
        }
        else if (this.failures.length) {
            process.exitCode = 1;
        }
        else if (this.successes.length) {
            process.exitCode = 0;
        }
    }
}
exports.UserPermsetAssignCommand = UserPermsetAssignCommand;
UserPermsetAssignCommand.description = messages.getMessage('description');
UserPermsetAssignCommand.examples = messages.getMessage('examples').split(os.EOL);
UserPermsetAssignCommand.requiresUsername = true;
UserPermsetAssignCommand.flagsConfig = {
    permsetname: command_1.flags.array({
        char: 'n',
        description: messages.getMessage('flags.permsetName'),
        required: true,
    }),
    onbehalfof: command_1.flags.array({
        char: 'o',
        description: messages.getMessage('flags.onBehalfOf'),
    }),
};
//# sourceMappingURL=assign.js.map
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDisplayCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-user', 'display');
class UserDisplayCommand extends command_1.SfdxCommand {
    async run() {
        this.ux.warn('The --targetdevhubusername flag is deprecated and will be removed in v57 or later.');
        this.logger = await core_1.Logger.child(this.constructor.name);
        if (core_1.sfdc.matchesAccessToken(this.flags.targetusername)) {
            throw new core_1.SfError(messages.getMessage('accessTokenError'), 'accessTokenErrorError', [
                messages.getMessage('accessTokenAction'),
            ]);
        }
        const username = this.org.getUsername();
        const userAuthDataArray = await this.org.readUserAuthFiles();
        // userAuthDataArray contains all of the Org's users AuthInfo, we just need the default or -u, which is in the username variable
        const userAuthData = userAuthDataArray
            .find((uat) => uat.getFields().username === username)
            .getFields(true);
        const conn = this.org.getConnection();
        let profileName = userAuthData.userProfileName;
        let userId = userAuthData.userId;
        try {
            // the user executing this command may not have access to the Profile sObject.
            if (!profileName) {
                const PROFILE_NAME_QUERY = `SELECT name FROM Profile WHERE Id IN (SELECT ProfileId FROM User WHERE username='${username}')`;
                profileName = (0, ts_types_1.getString)(await conn.query(PROFILE_NAME_QUERY), 'records[0].Name');
            }
        }
        catch (err) {
            profileName = 'unknown';
            this.logger.debug(`Query for the profile name failed for username: ${username} with message: ${(0, ts_types_1.getString)(err, 'message')}`);
        }
        try {
            if (!userId) {
                const USER_QUERY = `SELECT id FROM User WHERE username='${username}'`;
                userId = (0, ts_types_1.getString)(await conn.query(USER_QUERY), 'records[0].Id');
            }
        }
        catch (err) {
            userId = 'unknown';
            this.logger.debug(`Query for the user ID failed for username: ${username} with message: ${(0, ts_types_1.getString)(err, 'message')}`);
        }
        const result = {
            accessToken: conn.accessToken,
            id: userId,
            instanceUrl: userAuthData.instanceUrl,
            loginUrl: userAuthData.loginUrl,
            orgId: this.org.getOrgId(),
            profileName,
            username,
        };
        const stateAggregator = await core_1.StateAggregator.getInstance();
        const alias = stateAggregator.aliases.get(username);
        if (alias) {
            result.alias = alias;
        }
        if (userAuthData.password) {
            result.password = userAuthData.password;
        }
        this.ux.warn(messages.getMessage('securityWarning'));
        this.ux.log('');
        this.print(result);
        return result;
    }
    print(result) {
        const columns = {
            key: { header: 'key' },
            label: { header: 'label' },
        };
        const tableRow = [];
        // to get proper capitalization and spacing, enter the rows
        tableRow.push({ key: 'Username', label: result.username });
        tableRow.push({ key: 'Profile Name', label: result.profileName });
        tableRow.push({ key: 'Id', label: result.id });
        tableRow.push({ key: 'Org Id', label: result.orgId });
        tableRow.push({ key: 'Access Token', label: result.accessToken });
        tableRow.push({ key: 'Instance Url', label: result.instanceUrl });
        tableRow.push({ key: 'Login Url', label: result.loginUrl });
        if (result.alias)
            tableRow.push({ key: 'Alias', label: result.alias });
        if (result.password)
            tableRow.push({ key: 'Password', label: result.password });
        this.ux.styledHeader('User Description');
        this.ux.table(tableRow, columns);
    }
}
exports.UserDisplayCommand = UserDisplayCommand;
UserDisplayCommand.description = messages.getMessage('description');
UserDisplayCommand.examples = messages.getMessage('examples').split(os.EOL);
UserDisplayCommand.requiresUsername = true;
UserDisplayCommand.supportsDevhubUsername = true;
//# sourceMappingURL=display.js.map
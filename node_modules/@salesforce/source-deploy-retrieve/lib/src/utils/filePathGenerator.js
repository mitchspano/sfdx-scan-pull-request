"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filePathsFromMetadataComponent = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const constants_1 = require("../common/constants");
const registryAccess_1 = require("../registry/registryAccess");
const __1 = require("..");
const registryAccess = new registryAccess_1.RegistryAccess();
/**
 * Provided a metadata fullName and type pair, return an array of file paths that should
 * be expected based on the type's definition in the metadata registry.
 *
 * This won't give all the filenames for decomposed types (that would require retrieving
 * the actual parent xml) but should provide enough of the filePath to figure out if the
 * forceignore would ignore it.
 *
 * Example:
 * `const type = new RegistryAccess().getTypeByName('ApexClass');`
 * `filePathsFromMetadataComponent({ fullName: 'MyClass', type }, 'myPackageDir');`
 * returns:
 * `['myPackageDir/classes/MyClass.cls', 'myPackageDir/classes/MyClass.cls-meta.xml']`
 *
 * @param param a MetadataComponent (type/name pair) for which to generate file paths
 * @param packageDir optional package directory to apply to the file paths
 * @returns array of file paths
 */
const filePathsFromMetadataComponent = ({ fullName, type }, packageDir) => {
    const packageDirWithTypeDir = packageDir ? (0, path_1.join)(packageDir, type.directoryName) : type.directoryName;
    if (type.strategies?.adapter === 'decomposed') {
        return [(0, path_1.join)(packageDirWithTypeDir, `${fullName}${path_1.sep}${fullName}.${type.suffix}${constants_1.META_XML_SUFFIX}`)];
    }
    // this needs to be done before the other types because of potential overlaps
    if (!type.children && Object.keys(__1.registry.childTypes).includes(type.id)) {
        return getDecomposedChildType({ fullName, type }, packageDir);
    }
    // Non-decomposed parents (i.e., any type that defines children and not a decomposed transformer)
    if (type.children) {
        return [(0, path_1.join)(packageDirWithTypeDir, `${fullName}.${type.suffix}${constants_1.META_XML_SUFFIX}`)];
    }
    // basic metadata (with or without folders)
    if (!type.children && !type.strategies) {
        return (type.inFolder || type.folderType ? generateFolders({ fullName, type }, packageDirWithTypeDir) : []).concat([
            (0, path_1.join)(packageDirWithTypeDir, `${fullName}.${type.suffix}${constants_1.META_XML_SUFFIX}`),
        ]);
    }
    // matching content (with or without folders)
    if (type.strategies?.adapter === 'matchingContentFile') {
        return (type.inFolder ? generateFolders({ fullName, type }, packageDirWithTypeDir) : []).concat([
            (0, path_1.join)(packageDirWithTypeDir, `${fullName}.${type.suffix}${constants_1.META_XML_SUFFIX}`),
            (0, path_1.join)(packageDirWithTypeDir, `${fullName}.${type.suffix}`),
        ]);
    }
    // mixed content in folder (ex: document)
    if (type.strategies?.adapter === 'mixedContent' && type.inFolder && !type.strategies.transformer) {
        return generateFolders({ fullName, type }, packageDirWithTypeDir).concat([
            (0, path_1.join)(packageDirWithTypeDir, `${fullName}${constants_1.META_XML_SUFFIX}`),
            (0, path_1.join)(packageDirWithTypeDir, `${fullName}`),
        ]);
    }
    // mixed content not in folder (ex: staticResource,experienceBundle)
    if (type.strategies?.adapter === 'mixedContent' && !type.inFolder) {
        return [
            (0, path_1.join)(packageDirWithTypeDir, 
            // registry doesn't have a suffix for EB (it comes down inside the mdapi response)
            `${fullName}.${type.strategies?.transformer === 'staticResource' ? type.suffix : 'site'}${constants_1.META_XML_SUFFIX}`),
            (0, path_1.join)(packageDirWithTypeDir, `${fullName}`),
        ];
    }
    // lwc, aura, waveTemplate
    if (type.strategies?.adapter === 'bundle') {
        const mappings = new Map([
            ['WaveTemplateBundle', (0, path_1.join)(packageDirWithTypeDir, `${fullName}${path_1.sep}template-info.json`)],
            ['LightningComponentBundle', (0, path_1.join)(packageDirWithTypeDir, `${fullName}${path_1.sep}${fullName}.js${constants_1.META_XML_SUFFIX}`)],
            ['AuraDefinitionBundle', (0, path_1.join)(packageDirWithTypeDir, `${fullName}${path_1.sep}${fullName}.cmp${constants_1.META_XML_SUFFIX}`)],
        ]);
        if (!mappings.has(type.name)) {
            throw new Error(`Unsupported Bundle Type: ${type.name}`);
        }
        return [mappings.get(type.name)];
    }
    throw new Error(`type not supported for filepath generation: ${type.name}`);
};
exports.filePathsFromMetadataComponent = filePathsFromMetadataComponent;
const generateFolders = ({ fullName, type }, packageDirWithTypeDir) => {
    // create a folder for each part of the filename between the directory name and the fullname
    const splits = fullName.split('/');
    return splits
        .slice(0, splits.length - 1) // the last one is not a folder
        .map((value, index, originalArray) => (0, path_1.join)(packageDirWithTypeDir, `${originalArray.slice(0, index + 1).join(path_1.sep)}.${registryAccess.getTypeByName(type.folderType).suffix}${constants_1.META_XML_SUFFIX}`));
};
const getDecomposedChildType = ({ fullName, type }, packageDir) => {
    const topLevelType = registryAccess.findType((t) => t.children && Object.keys(t.children.types).includes(type.id));
    const topLevelTypeDir = packageDir ? (0, path_1.join)(packageDir, topLevelType.directoryName) : topLevelType.directoryName;
    return [
        // parent
        (0, path_1.join)(topLevelTypeDir, `${fullName.split('.')[0]}${path_1.sep}${fullName.split('.')[0]}.${topLevelType.suffix}${constants_1.META_XML_SUFFIX}`),
        // child
        (0, path_1.join)(topLevelTypeDir, fullName.split('.')[0], type.directoryName, `${fullName.split('.')[1]}.${type.suffix}${constants_1.META_XML_SUFFIX}`),
    ];
};
//# sourceMappingURL=filePathGenerator.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataConverter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const core_1 = require("@salesforce/core");
const graceful_fs_1 = require("graceful-fs");
const fileSystemHandler_1 = require("../utils/fileSystemHandler");
const collections_1 = require("../collections");
const registry_1 = require("../registry");
const streams_1 = require("./streams");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/source-deploy-retrieve', 'sdr', [
    'error_failed_convert',
    'error_merge_metadata_target_unsupported',
]);
class MetadataConverter {
    constructor(registry = new registry_1.RegistryAccess()) {
        this.registry = registry;
    }
    async convert(comps, targetFormat, output) {
        try {
            const cs = comps instanceof collections_1.ComponentSet ? comps : new collections_1.ComponentSet(comps, this.registry);
            const components = (comps instanceof collections_1.ComponentSet ? Array.from(comps.getSourceComponents()) : comps).filter((comp) => comp.type.isAddressable !== false);
            let manifestContents;
            const isSource = targetFormat === 'source';
            const tasks = [];
            let writer;
            let mergeSet;
            let packagePath;
            let defaultDirectory;
            switch (output.type) {
                case 'directory':
                    if (output.packageName) {
                        cs.fullName = output.packageName;
                    }
                    manifestContents = await cs.getPackageXml();
                    packagePath = this.getPackagePath(output);
                    defaultDirectory = packagePath;
                    writer = new streams_1.StandardWriter(packagePath);
                    if (!isSource) {
                        const manifestPath = (0, path_1.join)(packagePath, MetadataConverter.PACKAGE_XML_FILE);
                        tasks.push(graceful_fs_1.promises.writeFile(manifestPath, manifestContents), ...cs.getTypesOfDestructiveChanges().map(async (destructiveChangesType) => 
                        // for each of the destructive changes in the component set, convert and write the correct metadata
                        // to each manifest
                        graceful_fs_1.promises.writeFile((0, path_1.join)(packagePath, this.getDestructiveManifest(destructiveChangesType)), await cs.getPackageXml(4, destructiveChangesType))));
                    }
                    break;
                case 'zip':
                    if (output.packageName) {
                        cs.fullName = output.packageName;
                    }
                    manifestContents = await cs.getPackageXml();
                    packagePath = this.getPackagePath(output);
                    defaultDirectory = packagePath;
                    writer = new streams_1.ZipWriter(packagePath);
                    if (!isSource) {
                        writer.addToZip(manifestContents, MetadataConverter.PACKAGE_XML_FILE);
                        // for each of the destructive changes in the component set, convert and write the correct metadata
                        // to each manifest
                        for (const destructiveChangeType of cs.getTypesOfDestructiveChanges()) {
                            writer.addToZip(await cs.getPackageXml(4, destructiveChangeType), this.getDestructiveManifest(destructiveChangeType));
                        }
                    }
                    break;
                case 'merge':
                    if (!isSource) {
                        throw new core_1.SfError(messages.getMessage('error_merge_metadata_target_unsupported'));
                    }
                    defaultDirectory = output.defaultDirectory;
                    mergeSet = new collections_1.ComponentSet();
                    // since child components are composed in metadata format, we need to merge using the parent
                    for (const component of output.mergeWith) {
                        mergeSet.add(component.parent ?? component);
                    }
                    writer = new streams_1.StandardWriter(output.defaultDirectory);
                    writer.forceIgnoredPaths = output.forceIgnoredPaths;
                    break;
            }
            const conversionPipeline = (0, streams_1.pipeline)(new streams_1.ComponentReader(components), new streams_1.ComponentConverter(targetFormat, this.registry, mergeSet, defaultDirectory), writer);
            await Promise.all([conversionPipeline, ...tasks]);
            const result = { packagePath };
            if (output.type === 'zip' && !packagePath) {
                result.zipBuffer = writer.buffer;
            }
            else if (output.type !== 'zip') {
                result.converted = writer.converted;
            }
            return result;
        }
        catch (e) {
            throw new core_1.SfError(messages.getMessage('error_failed_convert', [e.message]), 'ConversionError', [], e);
        }
    }
    getPackagePath(outputConfig) {
        let packagePath;
        const { genUniqueDir = true, outputDirectory, packageName, type } = outputConfig;
        if (outputDirectory) {
            if (packageName) {
                packagePath = (0, path_1.join)(outputDirectory, packageName);
            }
            else {
                if (genUniqueDir) {
                    packagePath = (0, path_1.join)(outputDirectory, `${MetadataConverter.DEFAULT_PACKAGE_PREFIX}_${Date.now()}`);
                }
                else {
                    packagePath = (0, path_1.normalize)(outputDirectory);
                }
            }
            if (type === 'zip') {
                packagePath += '.zip';
                (0, fileSystemHandler_1.ensureDirectoryExists)((0, path_1.dirname)(packagePath));
            }
            else {
                (0, fileSystemHandler_1.ensureDirectoryExists)(packagePath);
            }
        }
        return packagePath;
    }
    getDestructiveManifest(destructiveChangesType) {
        if (destructiveChangesType === collections_1.DestructiveChangesType.POST) {
            return MetadataConverter.DESTRUCTIVE_CHANGES_POST_XML_FILE;
        }
        else if (destructiveChangesType === collections_1.DestructiveChangesType.PRE) {
            return MetadataConverter.DESTRUCTIVE_CHANGES_PRE_XML_FILE;
        }
    }
}
exports.MetadataConverter = MetadataConverter;
MetadataConverter.PACKAGE_XML_FILE = 'package.xml';
MetadataConverter.DESTRUCTIVE_CHANGES_POST_XML_FILE = 'destructiveChangesPost.xml';
MetadataConverter.DESTRUCTIVE_CHANGES_PRE_XML_FILE = 'destructiveChangesPre.xml';
MetadataConverter.DEFAULT_PACKAGE_PREFIX = 'metadataPackage';
//# sourceMappingURL=metadataConverter.js.map
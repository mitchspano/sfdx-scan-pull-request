/// <reference types="node" />
/// <reference types="node" />
import { Readable } from 'stream';
import { SourcePath } from '../common/types';
import { MetadataComponent, SourceComponent } from '../resolve';
export declare type WriteInfo = {
    output: SourcePath;
    source: Readable;
};
export declare type WriterFormat = {
    component: MetadataComponent;
    writeInfos: WriteInfo[];
};
declare type PackageName = {
    /**
     * Optional name to give to the package, otherwise one is generated.
     */
    packageName?: string;
};
declare type UniqueOutputDir = {
    /**
     * Whether to generate a unique directory within the outputDirectory. Default is true.
     */
    genUniqueDir?: boolean;
};
export declare type DirectoryConfig = PackageName & UniqueOutputDir & {
    type: 'directory';
    /**
     * Directory path to output the converted package to.
     */
    outputDirectory: SourcePath;
};
export declare type ZipConfig = PackageName & UniqueOutputDir & {
    type: 'zip';
    /**
     * Directory path to output the zip package to.
     */
    outputDirectory?: SourcePath;
};
export declare type MergeConfig = {
    type: 'merge';
    /**
     * Existing components to merge and replace the converted components with.
     */
    mergeWith: Iterable<SourceComponent>;
    /**
     * Location to store components that aren't merged.
     */
    defaultDirectory: SourcePath;
    forceIgnoredPaths?: Set<string>;
};
/**
 * Transforms metadata component files into different SFDX file formats
 */
export interface MetadataTransformer {
    defaultDirectory?: string;
    toMetadataFormat(component: SourceComponent): Promise<WriteInfo[]>;
    toSourceFormat(component: SourceComponent, mergeWith?: SourceComponent): Promise<WriteInfo[]>;
}
/**
 * The file format for a set of metadata components.
 *
 * `metadata` - Structure for use with the metadata api.
 *
 * `source` - Friendly for local editing and comitting files to source control.
 */
export declare type SfdxFileFormat = 'metadata' | 'source';
export declare type ConvertOutputConfig = DirectoryConfig | ZipConfig | MergeConfig;
export declare type ConvertResult = {
    /**
     * Location of converted package. `Undefined` if `outputDirectory` is omitted from output config.
     */
    packagePath?: SourcePath;
    /**
     * Buffer of converted package. `Undefined` if `outputDirectory` is omitted from zip output config.
     */
    zipBuffer?: Buffer;
    /**
     * Converted source components. Not set if archving the package.
     */
    converted?: SourceComponent[];
};
export {};

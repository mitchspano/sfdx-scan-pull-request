"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertContext = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const ts_types_1 = require("@salesforce/ts-types");
const core_1 = require("@salesforce/core");
const common_1 = require("../common");
const collections_1 = require("../collections");
const utils_1 = require("../utils");
const resolve_1 = require("../resolve");
const streams_1 = require("./streams");
class ConvertTransactionFinalizer {
    setState(props) {
        props(this.transactionState);
    }
    get state() {
        return this.transactionState;
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 */
class RecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this.transactionState = {};
        // A cache of SourceComponent xml file paths to parsed contents so that identical child xml
        // files are not read and parsed multiple times.
        this.parsedXmlCache = new Map();
    }
    async finalize() {
        const writerData = [];
        for (const { component: parent, children } of Object.values(this.state)) {
            const recomposedXmlObj = await this.recompose(children, parent);
            writerData.push({
                component: parent,
                writeInfos: [
                    {
                        source: new streams_1.JsToXml(recomposedXmlObj),
                        output: (0, path_1.join)(parent.type.directoryName, `${parent.fullName}.${parent.type.suffix}`),
                    },
                ],
            });
        }
        return writerData;
    }
    async recompose(children, parent) {
        // When recomposing children that are non-decomposed, read and cache the parent XML to prevent
        // reading the parent source file (referenced in all child SourceComponents) multiple times.
        let parentXml;
        if (parent.type.strategies.transformer === "nonDecomposed" /* TransformerStrategy.NonDecomposed */) {
            parentXml = await parent.parseXml();
            this.parsedXmlCache.set(parent.xml, parentXml);
        }
        const parentXmlObj = parent.type.strategies.recomposition === "startEmpty" /* RecompositionStrategy.StartEmpty */
            ? {}
            : parentXml ?? (await parent.parseXml());
        for (const child of children) {
            const { directoryName: groupName } = child.type;
            const { name: parentName } = child.parent.type;
            const childSourceComponent = child;
            let xmlObj;
            if (parentXml) {
                // If the xml file for the child is in the cache, use it. Otherwise
                // read and cache the xml file that contains this child and use it.
                if (!this.parsedXmlCache.has(childSourceComponent.xml)) {
                    this.parsedXmlCache.set(childSourceComponent.xml, await parent.parseXml(childSourceComponent.xml));
                }
                xmlObj = childSourceComponent.parseFromParentXml(this.parsedXmlCache.get(childSourceComponent.xml));
            }
            else {
                xmlObj = await childSourceComponent.parseXml();
            }
            const childContents = xmlObj[child.type.name] || xmlObj;
            if (!parentXmlObj[parentName]) {
                parentXmlObj[parentName] = { [common_1.XML_NS_KEY]: common_1.XML_NS_URL };
            }
            // type safe way of checking childContents for the key
            if ((0, ts_types_1.getString)(childContents, common_1.XML_NS_KEY)) {
                // child don't need to be written with `xmlns="http://soap.sforce.com/2006/04/metadata"` attribute
                delete childContents[common_1.XML_NS_KEY];
            }
            const parentObj = parentXmlObj[parentName];
            if (!parentObj[groupName]) {
                parentObj[groupName] = [];
            }
            // it might be an object and not an array.  Example: custom object with a Field property containing a single field
            const group = (0, utils_1.normalizeToArray)(parentObj[groupName]);
            group.push(childContents);
        }
        return parentXmlObj;
    }
}
/**
 * Creates write infos for any children that haven't been written yet. Children may
 * delay being written in order to find potential existing children to merge
 * with in the conversion pipeline.
 */
class DecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this.transactionState = {};
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async finalize() {
        const writerData = [];
        for (const toDecompose of Object.values(this.transactionState)) {
            if (!toDecompose.foundMerge) {
                writerData.push({
                    component: toDecompose.origin.parent ?? toDecompose.origin,
                    writeInfos: [toDecompose.writeInfo],
                });
            }
        }
        return writerData;
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 *
 * Inserts unclaimed child components into the parent that belongs to the default package
 */
class NonDecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this.transactionState = {
            childrenByUniqueElement: new Map(),
            exampleComponent: undefined,
        };
        // filename => (childName => childXml)
        this.mergeMap = new Map();
        // filename => sourceComponent
        this.parentComponentMap = new Map();
    }
    async finalize(defaultDirectory, tree = new resolve_1.NodeFSTreeContainer()) {
        const writerData = [];
        if (this.transactionState.childrenByUniqueElement.size === 0) {
            return writerData;
        }
        this.tree = tree;
        const packageDirectories = core_1.SfProject.getInstance().getPackageDirectories();
        const pkgPaths = packageDirectories.map((pkg) => pkg.fullPath);
        // nondecomposed metadata types can exist in multiple locations under the same name
        // so we have to find all components that could potentially match inbound components
        let allNonDecomposed;
        if (pkgPaths.includes(defaultDirectory)) {
            allNonDecomposed = this.getAllComponentsOfType(pkgPaths, this.transactionState.exampleComponent.type.name);
        }
        else {
            // defaultDirectory isn't a package, assumes it's the target output dir for conversion
            // so no need to scan this folder
            allNonDecomposed = [];
        }
        // prepare 3 maps to simplify component merging
        await this.initMergeMap(allNonDecomposed);
        this.parentComponentMap = new Map(allNonDecomposed.map((c) => [c.xml, c]));
        const childNameToParentFilePath = this.initChildMapping();
        // we'll merge any new labels into the default location
        const defaultKey = (0, path_1.join)(defaultDirectory, this.getDefaultOutput(this.transactionState.exampleComponent));
        this.ensureDefaults(defaultKey);
        // put the incoming components into the mergeMap.  Keep track of any files we need to write
        const filesToWrite = new Set();
        this.state.childrenByUniqueElement.forEach((child, childUniqueElement) => {
            const parentKey = childNameToParentFilePath.get(childUniqueElement) ?? defaultKey;
            const parentItemMap = this.mergeMap.get(parentKey);
            parentItemMap.set(childUniqueElement, child);
            filesToWrite.add(parentKey);
        });
        // use the mergeMap to return the writables
        this.mergeMap.forEach((children, parentKey) => {
            if (filesToWrite.has(parentKey)) {
                const parentSourceComponent = this.parentComponentMap.get(parentKey);
                const recomposedXmlObj = this.recompose(children, parentSourceComponent);
                writerData.push({
                    component: parentSourceComponent,
                    writeInfos: [{ source: new streams_1.JsToXml(recomposedXmlObj), output: parentKey }],
                });
            }
        });
        return writerData;
    }
    initChildMapping() {
        const output = new Map();
        this.mergeMap.forEach((children, parentKey) => {
            children.forEach((child, childName) => {
                output.set(childName, parentKey);
            });
        });
        return output;
    }
    /**
     * check both top-level maps and make sure there are defaults
     */
    ensureDefaults(defaultKey) {
        if (!this.mergeMap.has(defaultKey)) {
            // If project has no files of this type, there won't be anything from allNonDecomposed.
            this.mergeMap.set(defaultKey, new Map());
        }
        if (!this.parentComponentMap.has(defaultKey)) {
            // it's possible to get here if there are no files of this type in the project.
            // we don't have any SourceComponent to reference except the new incoming ones
            // so this creates a "default" component with the correct path for the xml file
            this.parentComponentMap.set(defaultKey, {
                ...this.transactionState.exampleComponent,
                xml: defaultKey,
            });
        }
    }
    /**
     * Returns all the components of the incoming type in the project.
     *
     * Some components are not resolved during component resolution.
     * This typically only happens when a specific source path was resolved. This is problematic for
     * nondecomposed metadata types (like CustomLabels) because we need to know the location of each
     * child type before recomposing the final xml.
     * The labels could belong in any of the files OR need to go in the default location which already contains labels
     */
    getAllComponentsOfType(pkgDirs, componentType) {
        const unprocessedComponents = collections_1.ComponentSet.fromSource({
            fsPaths: pkgDirs,
            include: new collections_1.ComponentSet([{ fullName: '*', type: componentType }]),
            tree: this.tree,
        }).getSourceComponents();
        return unprocessedComponents.toArray();
    }
    /**
     * Populate the mergeMap with all the children of all the local components
     */
    async initMergeMap(allComponentsOfType) {
        // A function we can parallelize since we have to parseXml for each local file
        const getMappedChildren = async (component) => {
            const results = await Promise.all(component.getChildren().map(async (child) => {
                const childXml = await child.parseXml();
                return [(0, ts_types_1.getString)(childXml, child.type.uniqueIdElement), childXml];
            }));
            return new Map(results);
        };
        const result = await Promise.all(allComponentsOfType.map(async (c) => [c.xml, await getMappedChildren(c)]));
        this.mergeMap = new Map(result);
    }
    /**
     * Return a json object that's built up from the mergeMap children
     */
    recompose(children, parentSourceComponent) {
        // for CustomLabels, that's `labels`
        const groupName = parentSourceComponent.type.directoryName;
        return {
            [parentSourceComponent.type.name]: {
                [common_1.XML_NS_KEY]: common_1.XML_NS_URL,
                [groupName]: Array.from(children.values()),
            },
        };
    }
    /**
     * Return the default filepath for new metadata of this type
     */
    getDefaultOutput(component) {
        const { fullName } = component;
        const [baseName] = fullName.split('.');
        const output = `${baseName}.${component.type.suffix}${common_1.META_XML_SUFFIX}`;
        return (0, path_1.join)(component.getPackageRelativePath('', 'source'), output);
    }
}
/**
 * A state manager over the course of a single metadata conversion call.
 */
class ConvertContext {
    constructor() {
        this.decomposition = new DecompositionFinalizer();
        this.recomposition = new RecompositionFinalizer();
        this.nonDecomposition = new NonDecompositionFinalizer();
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async *executeFinalizers(defaultDirectory) {
        for (const member of Object.values(this)) {
            if (member instanceof ConvertTransactionFinalizer) {
                yield member.finalize(defaultDirectory);
            }
        }
    }
}
exports.ConvertContext = ConvertContext;
//# sourceMappingURL=convertContext.js.map
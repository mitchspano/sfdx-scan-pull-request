"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonDecomposedMetadataTransformer = void 0;
const ts_types_1 = require("@salesforce/ts-types");
const utils_1 = require("../../utils");
const decomposedMetadataTransformer_1 = require("./decomposedMetadataTransformer");
/**
 * Metadata Transformer for metadata types with children types that are NOT decomposed into separate files.
 *
 * Example Types:
 * - CustomLabels
 */
class NonDecomposedMetadataTransformer extends decomposedMetadataTransformer_1.DecomposedMetadataTransformer {
    // streams uses mergeWith for all types.  Removing it would break the interface
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async toSourceFormat(component, mergeWith) {
        // this will only include the incoming (retrieved) labels, not the local file
        const parentXml = await component.parseXml();
        const xmlPathToChildren = `${component.type.name}.${component.type.directoryName}`;
        const incomingChildrenXml = (0, utils_1.normalizeToArray)((0, ts_types_1.get)(parentXml, xmlPathToChildren));
        // presumes they only have 1 child!
        const [childTypeId] = Object.keys(component.type.children.types);
        const { uniqueIdElement } = component.type.children.types[childTypeId];
        this.context.nonDecomposition.setState((state) => {
            state.exampleComponent ?? (state.exampleComponent = component);
        });
        incomingChildrenXml.map((child) => {
            const childName = (0, ts_types_1.getString)(child, uniqueIdElement);
            this.context.nonDecomposition.setState((state) => {
                state.childrenByUniqueElement.set(childName, child);
            });
        });
        return [];
    }
}
exports.NonDecomposedMetadataTransformer = NonDecomposedMetadataTransformer;
//# sourceMappingURL=nonDecomposedMetadataTransformer.js.map
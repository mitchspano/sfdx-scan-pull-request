import { ComponentSet } from '../collections';
import { RegistryAccess } from '../registry';
import { MetadataTransfer, MetadataTransferOptions } from './metadataTransfer';
import { AsyncResult, FileResponse, MetadataApiRetrieveStatus, MetadataTransferResult, RetrieveOptions } from './types';
export declare type MetadataApiRetrieveOptions = MetadataTransferOptions & RetrieveOptions & {
    registry?: RegistryAccess;
};
export declare class RetrieveResult implements MetadataTransferResult {
    readonly response: MetadataApiRetrieveStatus;
    readonly components: ComponentSet;
    private localComponents;
    private fileResponses;
    /**
     * @param response The metadata retrieve response from the server
     * @param components The ComponentSet of retrieved source components
     * @param localComponents The ComponentSet used to create the retrieve request
     */
    constructor(response: MetadataApiRetrieveStatus, components: ComponentSet, localComponents?: ComponentSet);
    getFileResponses(): FileResponse[];
}
export declare class MetadataApiRetrieve extends MetadataTransfer<MetadataApiRetrieveStatus, RetrieveResult> {
    static DEFAULT_OPTIONS: Partial<MetadataApiRetrieveOptions>;
    private options;
    private orgId;
    constructor(options: MetadataApiRetrieveOptions);
    /**
     * Check the status of the retrieve operation.
     *
     * @returns Status of the retrieve
     */
    checkStatus(): Promise<MetadataApiRetrieveStatus>;
    /**
     * Cancel the retrieve operation.
     *
     * Canceling a retrieve occurs immediately and requires no additional status
     * checks to the org, unlike {@link MetadataApiDeploy.cancel}.
     */
    cancel(): Promise<void>;
    post(result: MetadataApiRetrieveStatus): Promise<RetrieveResult>;
    protected pre(): Promise<AsyncResult>;
    private getPackageNames;
    private getPackageOptions;
    private extract;
}
/**
 * register a listener to `scopedPreRetrieve`
 */
export interface ScopedPreRetrieve {
    componentSet: ComponentSet;
    orgId: string;
}
/**
 * register a listener to `scopedPostRetrieve`
 */
export interface ScopedPostRetrieve {
    retrieveResult: RetrieveResult;
    orgId: string;
}

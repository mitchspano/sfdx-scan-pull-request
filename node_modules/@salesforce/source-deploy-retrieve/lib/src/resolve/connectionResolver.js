"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionResolver = void 0;
const core_1 = require("@salesforce/core");
const registry_1 = require("../registry");
const standardvalueset_1 = require("../registry/standardvalueset");
const utils_1 = require("../utils");
/**
 * Resolve MetadataComponents from an org connection
 */
class ConnectionResolver {
    constructor(connection, registry = new registry_1.RegistryAccess()) {
        this.connection = connection;
        this.registry = registry;
        this.logger = core_1.Logger.childFromRoot(this.constructor.name);
    }
    async resolve(componentFilter = (component) => !!component) {
        const Aggregator = [];
        const childrenPromises = [];
        const componentTypes = new Set();
        const componentPromises = [];
        for (const type of Object.values(registry_1.registry.types)) {
            componentPromises.push(this.listMembers({ type: type.name }));
        }
        for await (const componentResult of componentPromises) {
            for (const component of componentResult) {
                let componentType;
                if (typeof component.type === 'string' && component.type.length) {
                    componentType = this.registry.getTypeByName(component.type);
                }
                else {
                    // fix { type: { "$": { "xsi:nil": "true" } } }
                    componentType = this.registry.getTypeBySuffix((0, utils_1.extName)(component.fileName));
                    component.type = componentType.name;
                }
                Aggregator.push(component);
                componentTypes.add(componentType);
                const folderContentType = componentType.folderContentType;
                if (folderContentType) {
                    childrenPromises.push(this.listMembers({
                        type: this.registry.getTypeByName(folderContentType).name,
                        folder: component.fullName,
                    }));
                }
            }
        }
        for (const componentType of componentTypes) {
            const childTypes = componentType.children?.types;
            if (childTypes) {
                Object.values(childTypes).map((childType) => {
                    childrenPromises.push(this.listMembers({ type: childType.name }));
                });
            }
        }
        for await (const childrenResult of childrenPromises) {
            Aggregator.push(...childrenResult);
        }
        return {
            components: Aggregator.filter(componentFilter).map((component) => {
                return { fullName: component.fullName, type: this.registry.getTypeByName(component.type) };
            }),
            apiVersion: this.connection.getApiVersion(),
        };
    }
    async listMembers(query) {
        let members;
        try {
            members = (0, utils_1.normalizeToArray)((await this.connection.metadata.list(query)));
        }
        catch (error) {
            this.logger.debug(error.message);
            members = [];
        }
        // if the Metadata Type doesn't return a correct fileName then help it out
        for (const m of members) {
            if (typeof m.fileName == 'object') {
                const t = this.registry.getTypeByName(query.type);
                m.fileName = `${t.directoryName}/${m.fullName}.${t.suffix}`;
            }
        }
        // Workaround because metadata.list({ type: 'StandardValueSet' }) returns []
        if (query.type === registry_1.registry.types.standardvalueset.name && members.length === 0) {
            const standardValueSetPromises = standardvalueset_1.standardValueSet.fullnames.map(async (standardValueSetFullName) => {
                try {
                    const standardValueSetRecord = await this.connection.singleRecordQuery(`SELECT Id, MasterLabel, Metadata FROM StandardValueSet WHERE MasterLabel = '${standardValueSetFullName}'`, { tooling: true });
                    return (standardValueSetRecord.Metadata.standardValue.length && {
                        fullName: standardValueSetRecord.MasterLabel,
                        fileName: `${registry_1.registry.types.standardvalueset.directoryName}/${standardValueSetRecord.MasterLabel}.${registry_1.registry.types.standardvalueset.suffix}`,
                        type: registry_1.registry.types.standardvalueset.name,
                        createdById: '',
                        createdByName: '',
                        createdDate: '',
                        id: '',
                        lastModifiedById: '',
                        lastModifiedByName: '',
                        lastModifiedDate: '',
                    });
                }
                catch (error) {
                    this.logger.debug(error.message);
                }
            });
            for await (const standardValueSetResult of standardValueSetPromises) {
                if (standardValueSetResult) {
                    members.push(standardValueSetResult);
                }
            }
        }
        return members;
    }
}
exports.ConnectionResolver = ConnectionResolver;
//# sourceMappingURL=connectionResolver.js.map
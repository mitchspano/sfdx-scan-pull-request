"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseSourceAdapter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const core_1 = require("@salesforce/core");
const utils_1 = require("../../utils");
const forceIgnore_1 = require("../forceIgnore");
const treeContainers_1 = require("../treeContainers");
const sourceComponent_1 = require("../sourceComponent");
const registry_1 = require("../../registry");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/source-deploy-retrieve', 'sdr', ['error_no_metadata_xml_ignore']);
class BaseSourceAdapter {
    constructor(type, registry = new registry_1.RegistryAccess(), forceIgnore = new forceIgnore_1.ForceIgnore(), tree = new treeContainers_1.NodeFSTreeContainer()) {
        /**
         * Whether or not an adapter should expect a component to be in its own, self-named
         * folder, including its root metadata xml file.
         */
        this.ownFolder = false;
        this.metadataWithContent = true;
        this.type = type;
        this.registry = registry;
        this.forceIgnore = forceIgnore;
        this.tree = tree;
    }
    getComponent(path, isResolvingSource = true) {
        let rootMetadata = this.parseAsRootMetadataXml(path);
        if (!rootMetadata) {
            const rootMetadataPath = this.getRootMetadataXmlPath(path);
            if (rootMetadataPath) {
                rootMetadata = (0, utils_1.parseMetadataXml)(rootMetadataPath);
            }
        }
        if (rootMetadata && this.forceIgnore.denies(rootMetadata.path)) {
            throw new core_1.SfError(messages.getMessage('error_no_metadata_xml_ignore', [rootMetadata.path, path]), 'UnexpectedForceIgnore');
        }
        let component;
        if (rootMetadata) {
            component = new sourceComponent_1.SourceComponent({
                name: this.calculateName(rootMetadata),
                type: this.type,
                xml: rootMetadata.path,
                parentType: this.type.folderType ? this.registry.getTypeByName(this.type.folderType) : undefined,
            }, this.tree, this.forceIgnore);
        }
        return this.populate(path, component, isResolvingSource);
    }
    /**
     * Control whether metadata and content metadata files are allowed for an adapter.
     */
    allowMetadataWithContent() {
        return this.metadataWithContent;
    }
    /**
     * If the path given to `getComponent` is the root metadata xml file for a component,
     * parse the name and return it. This is an optimization to not make a child adapter do
     * anymore work to find it.
     *
     * @param path File path of a metadata component
     */
    parseAsRootMetadataXml(path) {
        const metaXml = (0, utils_1.parseMetadataXml)(path);
        if (metaXml) {
            let isRootMetadataXml = false;
            if (this.type.strictDirectoryName) {
                const parentPath = (0, path_1.dirname)(path);
                const typeDirName = (0, path_1.basename)(this.type.inFolder ? (0, path_1.dirname)(parentPath) : parentPath);
                const nameMatchesParent = (0, path_1.basename)(parentPath) === metaXml.fullName;
                const inTypeDir = typeDirName === this.type.directoryName;
                // if the parent folder name matches the fullName OR parent folder name is
                // metadata type's directory name, it's a root metadata xml.
                isRootMetadataXml = nameMatchesParent || inTypeDir;
            }
            else {
                isRootMetadataXml = true;
            }
            return isRootMetadataXml ? metaXml : undefined;
        }
        const folderMetadataXml = this.parseAsFolderMetadataXml(path);
        if (folderMetadataXml) {
            return folderMetadataXml;
        }
        if (!this.allowMetadataWithContent()) {
            return this.parseAsContentMetadataXml(path);
        }
    }
    /**
     * If the path given to `getComponent` serves as the sole definition (metadata and content)
     * for a component, parse the name and return it. This allows matching files in metadata
     * format such as:
     *
     * .../tabs/MyTab.tab
     *
     * @param path File path of a metadata component
     */
    parseAsContentMetadataXml(path) {
        // InFolder metadata can be nested more than 1 level beneath its
        // associated directoryName.
        if (this.type.inFolder) {
            const fullName = (0, utils_1.parseNestedFullName)(path, this.type.directoryName);
            if (fullName) {
                return { fullName, suffix: this.type.suffix, path };
            }
        }
        const parentPath = (0, path_1.dirname)(path);
        const parts = parentPath.split(path_1.sep);
        const typeFolderIndex = parts.lastIndexOf(this.type.directoryName);
        // nestedTypes (ex: territory2) have a folderType equal to their type but are themselves
        // in a folder per metadata item, with child folders for rules/territories
        const allowedIndex = this.type.folderType === this.type.id ? parts.length - 2 : parts.length - 1;
        if (typeFolderIndex !== allowedIndex) {
            return undefined;
        }
        const match = new RegExp(/(.+)\.(.+)/).exec((0, path_1.basename)(path));
        if (match && this.type.suffix === match[2]) {
            return { fullName: match[1], suffix: match[2], path };
        }
    }
    parseAsFolderMetadataXml(fsPath) {
        const match = new RegExp(/(.+)-meta\.xml$/).exec((0, path_1.basename)(fsPath));
        const parts = fsPath.split(path_1.sep);
        if (match && !match[1].includes('.') && parts.length > 1) {
            return { fullName: match[1], suffix: undefined, path: fsPath };
        }
    }
    // Given a MetadataXml, build a fullName from the path and type.
    calculateName(rootMetadata) {
        const { directoryName, inFolder, folderType, folderContentType } = this.type;
        // inFolder types (report, dashboard, emailTemplate, document) and their folder
        // container types (reportFolder, dashboardFolder, emailFolder, documentFolder)
        if (inFolder || folderContentType) {
            return (0, utils_1.parseNestedFullName)(rootMetadata.path, directoryName);
        }
        // not using folders?  then name is fullname
        if (!folderType) {
            return rootMetadata.fullName;
        }
        const grandparentType = this.registry.getTypeByName(folderType);
        // type is nested inside another type (ex: Territory2Model).  So the names are modelName.ruleName or modelName.territoryName
        if (grandparentType.folderType && grandparentType.folderType !== this.type.id) {
            const splits = rootMetadata.path.split(path_1.sep);
            return `${splits[splits.indexOf(grandparentType.directoryName) + 1]}.${rootMetadata.fullName}`;
        }
        // this is the top level of nested types (ex: in a Territory2Model, the Territory2Model)
        if (grandparentType.folderType === this.type.id) {
            return rootMetadata.fullName;
        }
    }
}
exports.BaseSourceAdapter = BaseSourceAdapter;
//# sourceMappingURL=baseSourceAdapter.js.map
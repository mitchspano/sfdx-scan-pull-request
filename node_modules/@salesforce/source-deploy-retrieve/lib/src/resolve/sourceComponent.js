"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceComponent = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const core_1 = require("@salesforce/core");
const fast_xml_parser_1 = require("fast-xml-parser");
const ts_types_1 = require("@salesforce/ts-types");
const utils_1 = require("../utils");
const common_1 = require("../common");
const collections_1 = require("../collections");
const filePathGenerator_1 = require("../utils/filePathGenerator");
const treeContainers_1 = require("./treeContainers");
const forceIgnore_1 = require("./forceIgnore");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/source-deploy-retrieve', 'sdr', [
    'error_unexpected_child_type',
    'invalid_xml_parsing',
]);
/**
 * Representation of a MetadataComponent in a file tree.
 */
class SourceComponent {
    constructor(props, tree = new treeContainers_1.NodeFSTreeContainer(), forceIgnore = new forceIgnore_1.ForceIgnore()) {
        this.markedForDelete = false;
        this.name = props.name;
        this.type = props.type;
        this.xml = props.xml;
        this.parent = props.parent;
        this.content = props.content;
        this.parentType = props.parentType;
        this.treeContainer = tree;
        this.forceIgnore = forceIgnore;
    }
    /**
     *
     * @param props component properties (at a minimum, name and type)
     * @param fs VirtualTree.  If not provided, one will be constructed based on the name/type of the props
     * @param forceIgnore
     * @returns SourceComponent
     */
    static createVirtualComponent(props, fs, forceIgnore) {
        const tree = fs
            ? new treeContainers_1.VirtualTreeContainer(fs)
            : treeContainers_1.VirtualTreeContainer.fromFilePaths((0, filePathGenerator_1.filePathsFromMetadataComponent)({ fullName: props.name, type: props.type }));
        return new SourceComponent(props, tree, forceIgnore);
    }
    walkContent() {
        const sources = [];
        if (this.content) {
            for (const fsPath of this.walk(this.content)) {
                if (fsPath !== this.xml) {
                    sources.push(fsPath);
                }
            }
        }
        return sources;
    }
    /**
     * returns the children of a parent SourceComponent
     *
     * Ensures that the children of SourceComponent are valid child types.
     * Invalid child types can occur when projects are structured in an atypical way such as having
     * ApexClasses or Layouts within a CustomObject folder.
     *
     * @return SourceComponent[] containing valid children
     */
    getChildren() {
        if (!this.parent && this.type.children) {
            const children = this.content ? this.getDecomposedChildren(this.content) : this.getNonDecomposedChildren();
            const validChildTypes = this.type?.children ? Object.keys(this.type?.children?.types) : [];
            for (const child of children) {
                // Ensure only valid child types are included with the parent.
                if (!validChildTypes.includes(child.type?.id)) {
                    const filePath = child.xml || child.content;
                    throw new core_1.SfError(messages.getMessage('error_unexpected_child_type', [filePath, this.type.name]), 'TypeInferenceError');
                }
            }
            return children;
        }
        return [];
    }
    async parseXml(xmlFilePath) {
        const xml = xmlFilePath ?? this.xml;
        if (xml) {
            const contents = (await this.tree.readFile(xml)).toString();
            return this.parseAndValidateXML(contents, xml);
        }
        return {};
    }
    parseXmlSync(xmlFilePath) {
        const xml = xmlFilePath ?? this.xml;
        if (xml) {
            const contents = this.tree.readFileSync(xml).toString();
            return this.parseAndValidateXML(contents, xml);
        }
        return {};
    }
    /**
     * will return this instance of the forceignore, or will create one if undefined
     *
     * @return ForceIgnore
     */
    getForceIgnore() {
        if (this.forceIgnore) {
            return this.forceIgnore;
        }
        else {
            return forceIgnore_1.ForceIgnore.findAndCreate(this.content);
        }
    }
    /**
     * As a performance enhancement, use the already parsed parent xml source
     * to return the child section of xml source. This is useful for non-decomposed
     * transformers where all child source components reference the parent's
     * xml file to prevent re-reading the same file multiple times.
     *
     * @param parentXml parsed parent XMl source as an object
     * @returns child section of the parent's xml
     */
    parseFromParentXml(parentXml) {
        if (!this.parent) {
            return parentXml;
        }
        const children = (0, utils_1.normalizeToArray)((0, ts_types_1.get)(parentXml, `${this.parent.type.name}.${this.type.xmlElementName || this.type.directoryName}`));
        return children.find((c) => (0, ts_types_1.getString)(c, this.type.uniqueIdElement) === this.name);
    }
    getPackageRelativePath(fsPath, format) {
        return format === 'source'
            ? (0, path_1.join)(common_1.DEFAULT_PACKAGE_ROOT_SFDX, this.calculateRelativePath(fsPath))
            : this.calculateRelativePath(fsPath);
    }
    /**
     * @returns whether this component should be part of destructive changes.
     */
    isMarkedForDelete() {
        return this.markedForDelete;
    }
    getDestructiveChangesType() {
        return this.destructiveChangesType;
    }
    setMarkedForDelete(destructiveChangeType) {
        if (destructiveChangeType === false) {
            this.markedForDelete = false;
            // unset destructiveChangesType if it was already set
            delete this.destructiveChangesType;
        }
        else {
            this.markedForDelete = true;
            // eslint-disable-next-line no-unused-expressions
            destructiveChangeType === collections_1.DestructiveChangesType.PRE
                ? (this.destructiveChangesType = collections_1.DestructiveChangesType.PRE)
                : (this.destructiveChangesType = collections_1.DestructiveChangesType.POST);
        }
    }
    calculateRelativePath(fsPath) {
        const { directoryName, suffix, inFolder, folderType, folderContentType } = this.type;
        // if there isn't a suffix, assume this is a mixed content component that must
        // reside in the directoryName of its type. trimUntil maintains the folder structure
        // the file resides in for the new destination. This also applies to inFolder types:
        // (report, dashboard, emailTemplate, document) and their folder container types:
        // (reportFolder, dashboardFolder, emailFolder, documentFolder)
        if (!suffix || inFolder || folderContentType) {
            return (0, utils_1.trimUntil)(fsPath, directoryName, true);
        }
        if (folderType) {
            // types like Territory2Model have child types inside them.  We have to preserve those folder structures
            if (this.parentType?.folderType && this.parentType?.folderType !== this.type.id) {
                return (0, utils_1.trimUntil)(fsPath, this.parentType.directoryName);
            }
            return (0, path_1.join)(directoryName, this.fullName.split('/')[0], (0, path_1.basename)(fsPath));
        }
        return (0, path_1.join)(directoryName, (0, path_1.basename)(fsPath));
    }
    parse(contents) {
        // include tag attributes and don't parse text node as number
        const parsed = (0, fast_xml_parser_1.parse)(contents.toString(), {
            ignoreAttributes: false,
            parseNodeValue: false,
            cdataTagName: '__cdata',
        });
        const [firstElement] = Object.keys(parsed);
        if (firstElement === this.type.name) {
            return parsed;
        }
        else if (this.parent) {
            return this.parseFromParentXml(parsed);
        }
        else {
            return parsed;
        }
    }
    parseAndValidateXML(contents, path) {
        try {
            return this.parse(contents);
        }
        catch (e) {
            // only attempt validating once there's an error to avoid the performance hit of validating every file
            const validation = (0, fast_xml_parser_1.validate)(contents);
            if (validation !== true) {
                throw new core_1.SfError(messages.getMessage('invalid_xml_parsing', [
                    path,
                    validation.err.msg,
                    validation.err.line.toString(),
                    validation.err.code,
                ]), 'LibraryError');
            }
            throw e;
        }
    }
    getDecomposedChildren(dirPath) {
        const children = [];
        for (const fsPath of this.walk(dirPath)) {
            const childXml = (0, utils_1.parseMetadataXml)(fsPath);
            const fileIsRootXml = childXml?.suffix === this.type.suffix;
            if (childXml && !fileIsRootXml) {
                // TODO: Log warning if missing child type definition
                const childTypeId = this.type.children.suffixes[childXml.suffix];
                const childComponent = new SourceComponent({
                    name: (0, utils_1.baseName)(fsPath),
                    type: this.type.children.types[childTypeId],
                    xml: fsPath,
                    parent: this,
                }, this.treeContainer, this.forceIgnore);
                children.push(childComponent);
            }
        }
        return children;
    }
    // Get the children for non-decomposed types that have an xmlElementName
    // and uniqueIdElement defined in the registry.
    // E.g., CustomLabels, Workflows, SharingRules, AssignmentRules.
    getNonDecomposedChildren() {
        const parsed = this.parseXmlSync();
        const children = [];
        for (const childTypeId of Object.keys(this.type.children.types)) {
            const childType = this.type.children.types[childTypeId];
            const uniqueIdElement = childType.uniqueIdElement;
            if (uniqueIdElement) {
                const xmlPathToChildren = `${this.type.name}.${childType.xmlElementName}`;
                const elements = (0, utils_1.normalizeToArray)((0, ts_types_1.get)(parsed, xmlPathToChildren, []));
                const childComponents = elements.map((element) => {
                    return new SourceComponent({
                        name: (0, ts_types_1.getString)(element, uniqueIdElement),
                        type: childType,
                        xml: this.xml,
                        parent: this,
                    }, this.treeContainer, this.forceIgnore);
                });
                children.push(...childComponents);
            }
        }
        return children;
    }
    *walk(fsPath) {
        if (!this.treeContainer.isDirectory(fsPath)) {
            yield fsPath;
        }
        else {
            for (const child of this.treeContainer.readDirectory(fsPath)) {
                const childPath = (0, path_1.join)(fsPath, child);
                if (this.forceIgnore.denies(childPath)) {
                    continue;
                }
                else if (this.treeContainer.isDirectory(childPath)) {
                    yield* this.walk(childPath);
                }
                else {
                    yield childPath;
                }
            }
        }
    }
    get fullName() {
        if (this.type.ignoreParsedFullName) {
            return this.type.name;
        }
        if (this.parent && this.type.ignoreParentName) {
            return this.name;
        }
        else {
            return `${this.parent ? `${this.parent.fullName}.` : ''}${this.name}`;
        }
    }
    get tree() {
        return this.treeContainer;
    }
    /**
     * Returns whether this component type is supported by the Metadata API
     * and therefore should have an entry added to the manifest.
     *
     * This is defined on the type in the registry. The type is required to
     * be in the registry for proper classification and for possible use in
     * decomposition/recomposition.
     *
     * Default value is true, so the only way to return false is to explicitly
     * set it in the registry as false.
     *
     * E.g., CustomFieldTranslation.
     */
    get isAddressable() {
        return this.type.isAddressable !== false;
    }
}
exports.SourceComponent = SourceComponent;
//# sourceMappingURL=sourceComponent.js.map
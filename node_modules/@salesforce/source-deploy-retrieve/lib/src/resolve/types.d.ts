/// <reference types="node" />
import { SourcePath } from '../common/types';
import { MetadataType } from '../registry';
import { SourceComponent } from '.';
export interface MetadataComponent {
    fullName: string;
    type: MetadataType;
    parent?: MetadataComponent;
}
export interface MetadataMember {
    fullName: string;
    type: string;
}
export declare type ComponentLike = MetadataComponent | MetadataMember;
/**
 * Properties of a metadata xml's file name
 */
export declare type MetadataXml = {
    fullName: string;
    suffix: string;
    path: SourcePath;
};
export declare type VirtualFile = {
    name: string;
    data?: Buffer;
};
export declare type VirtualDirectory = {
    dirPath: SourcePath;
    children: Array<VirtualFile | string>;
};
/**
 * Infers the source format structure of a metadata component when given a file path.
 */
export interface SourceAdapter {
    /**
     * Create a metadata component object from a file path.
     *
     * @param fsPath Path to resolve
     * @param isResolvingSource Whether the path to resolve is a single file
     */
    getComponent(fsPath: SourcePath, isResolvingSource?: boolean): SourceComponent;
    /**
     * Whether the adapter allows content-only metadata definitions.
     */
    allowMetadataWithContent(): boolean;
}

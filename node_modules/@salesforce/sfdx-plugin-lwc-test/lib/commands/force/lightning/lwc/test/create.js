"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const path = require("path");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/sfdx-plugin-lwc-test', 'create');
class Create extends command_1.SfdxCommand {
    // eslint-disable-next-line @typescript-eslint/require-await
    async run() {
        const testDirName = '__tests__';
        const filepath = this.flags.filepath;
        const modulePath = path.isAbsolute(filepath) ? filepath : path.join(process.cwd(), filepath);
        if (path.extname(modulePath) !== '.js') {
            throw new core_1.SfError(messages.getMessage('errorFileNotJs', [this.flags.filepath]));
        }
        if (!fs.existsSync(modulePath)) {
            throw new core_1.SfError(messages.getMessage('errorFileNotFound', [this.flags.filepath]));
        }
        const bundlePath = path.dirname(modulePath);
        const testDirPath = path.join(bundlePath, testDirName);
        const moduleName = path.basename(modulePath, '.js');
        const testName = `${moduleName}.test.js`;
        const testPath = path.join(testDirPath, testName);
        if (fs.existsSync(testPath)) {
            throw new core_1.SfError(messages.getMessage('errorFileExists', [testPath]));
        }
        const className = moduleName.charAt(0).toUpperCase() + moduleName.slice(1);
        const elementName = 'c-' + moduleName.replace(/[A-Z]/g, '-$&').toLowerCase();
        const testSuiteTemplate = `import { createElement } from 'lwc';
import ${className} from 'c/${moduleName}';

describe('${elementName}', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('TODO: test case generated by CLI command, please fill in test logic', () => {
        const element = createElement('${elementName}', {
            is: ${className}
        });
        document.body.appendChild(element);
        expect(1).toBe(2);
    });
});`;
        if (!fs.existsSync(testDirPath)) {
            fs.mkdirSync(testDirPath);
        }
        fs.writeFileSync(testPath, testSuiteTemplate);
        this.ux.log(messages.getMessage('logSuccess', [testPath]));
        return {
            message: messages.getMessage('logSuccess', [testPath]),
            testPath,
            className,
            elementName,
        };
    }
}
exports.default = Create;
Create.description = messages.getMessage('commandDescription');
Create.longDescription = messages.getMessage('longDescription');
Create.examples = [messages.getMessage('example')];
Create.requiresProject = true;
Create.flagsConfig = {
    filepath: command_1.flags.string({
        char: 'f',
        description: messages.getMessage('filepathFlagDescription'),
        longDescription: messages.getMessage('filepathFlagLongDescription'),
        required: true,
    }),
};
//# sourceMappingURL=create.js.map
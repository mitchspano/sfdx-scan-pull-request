"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureRelative = exports.chunkArray = exports.pathIsInFolder = exports.isLwcLocalOnlyTest = exports.isBundle = exports.getKeyFromObject = exports.getMetadataKey = void 0;
const path_1 = require("path");
const ts_types_1 = require("@salesforce/ts-types");
const getMetadataKey = (metadataType, metadataName) => {
    return `${metadataType}__${metadataName}`;
};
exports.getMetadataKey = getMetadataKey;
const getKeyFromObject = (element) => {
    if (element.type && element.name) {
        return (0, exports.getMetadataKey)(element.type, element.name);
    }
    throw new Error(`unable to complete key from ${JSON.stringify(element)}`);
};
exports.getKeyFromObject = getKeyFromObject;
const isBundle = (cmp) => { var _a; return ((_a = cmp.type.strategies) === null || _a === void 0 ? void 0 : _a.adapter) === 'bundle'; };
exports.isBundle = isBundle;
const isLwcLocalOnlyTest = (filePath) => filePath.includes('__utam__') || filePath.includes('__tests__');
exports.isLwcLocalOnlyTest = isLwcLocalOnlyTest;
/**
 * Verify that a filepath starts exactly with a complete parent path
 * ex: '/foo/bar-extra/baz'.startsWith('foo/bar') would be true, but this function understands that they are not in the same folder
 */
const pathIsInFolder = (filePath, folder) => {
    const biggerStringParts = (0, path_1.normalize)(filePath).split(path_1.sep).filter(nonEmptyStringFilter);
    return (0, path_1.normalize)(folder)
        .split(path_1.sep)
        .filter(nonEmptyStringFilter)
        .every((part, index) => part === biggerStringParts[index]);
};
exports.pathIsInFolder = pathIsInFolder;
const nonEmptyStringFilter = (value) => {
    return (0, ts_types_1.isString)(value) && value.length > 0;
};
// adapted for TS from https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/chunk.md
const chunkArray = (arr, size) => Array.from({ length: Math.ceil(arr.length / size) }, (v, i) => arr.slice(i * size, i * size + size));
exports.chunkArray = chunkArray;
const ensureRelative = (filePath, projectPath) => (0, path_1.isAbsolute)(filePath) ? (0, path_1.relative)(projectPath, filePath) : filePath;
exports.ensureRelative = ensureRelative;
//# sourceMappingURL=functions.js.map
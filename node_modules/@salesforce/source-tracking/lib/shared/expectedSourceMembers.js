"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateExpectedSourceMembers = void 0;
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const metadataKeys_1 = require("./metadataKeys");
const typesToNoPollFor = [
    'CustomObject',
    'EmailFolder',
    'EmailTemplateFolder',
    'StandardValueSet',
    'Portal',
    'StandardValueSetTranslation',
    'SharingRules',
    'SharingCriteriaRule',
    'GlobalValueSetTranslation',
    'AssignmentRules',
    'InstalledPackage',
];
const typesNotToPollForIfNamespace = ['CustomLabels', 'CustomMetadata', 'DuplicateRule', 'WebLink'];
const isEncodedTypeWithPercentSign = (type, filePath) => ['Layout', 'Profile', 'HomePageComponent', 'HomePageLayout', 'MilestoneType'].includes(type) &&
    Boolean(filePath === null || filePath === void 0 ? void 0 : filePath.includes('%'));
// aura xml aren't tracked as SourceMembers
const isSpecialAuraXml = (filePath) => Boolean(filePath &&
    (filePath.endsWith('.cmp-meta.xml') ||
        filePath.endsWith('.tokens-meta.xml') ||
        filePath.endsWith('.evt-meta.xml') ||
        filePath.endsWith('.app-meta.xml') ||
        filePath.endsWith('.intf-meta.xml')));
const calculateExpectedSourceMembers = (expectedMembers) => {
    const outstandingSourceMembers = new Map();
    expectedMembers
        .filter((fileResponse) => {
        var _a, _b, _c, _d;
        // unchanged files will never be in the sourceMembers.  Not really sure why SDR returns them.
        return fileResponse.state !== source_deploy_retrieve_1.ComponentStatus.Unchanged &&
            // if a listView is the only change inside an object, the object won't have a sourceMember change.  We won't wait for those to be found
            // we don't know which email folder type might be there, so don't require either
            // Portal doesn't support source tracking, according to the coverage report
            !typesToNoPollFor.includes(fileResponse.type) &&
            // don't wait for standard fields on standard objects
            !(fileResponse.type === 'CustomField' && !((_a = fileResponse.filePath) === null || _a === void 0 ? void 0 : _a.includes('__c'))) &&
            // deleted fields
            !(fileResponse.type === 'CustomField' && ((_b = fileResponse.filePath) === null || _b === void 0 ? void 0 : _b.includes('_del__c'))) &&
            // built-in report type ReportType__screen_flows_prebuilt_crt
            !(fileResponse.type === 'ReportType' && ((_c = fileResponse.filePath) === null || _c === void 0 ? void 0 : _c.includes('screen_flows_prebuilt_crt'))) &&
            // they're settings to mdapi, and FooSettings in sourceMembers
            !fileResponse.type.includes('Settings') &&
            // mdapi encodes these, sourceMembers don't have encoding
            !isEncodedTypeWithPercentSign(fileResponse.type, fileResponse.filePath) &&
            !(typesNotToPollForIfNamespace.includes(fileResponse.type) && ((_d = fileResponse.filePath) === null || _d === void 0 ? void 0 : _d.includes('__'))) &&
            // don't wait on workflow children
            !fileResponse.type.startsWith('Workflow') &&
            !isSpecialAuraXml(fileResponse.filePath);
    })
        .map((member) => {
        (0, metadataKeys_1.getMetadataKeyFromFileResponse)(member)
            // remove some individual members known to not work with tracking even when their type does
            .filter((key) => 
        // CustomObject could have been re-added by the key generator from one of its fields
        !key.startsWith('CustomObject') &&
            key !== 'Profile__Standard' &&
            key !== 'CustomTab__standard-home' &&
            key !== 'AssignmentRules__Case' &&
            key !== 'ListView__CollaborationGroup.All_ChatterGroups')
            .map((key) => outstandingSourceMembers.set(key, member));
    });
    return outstandingSourceMembers;
};
exports.calculateExpectedSourceMembers = calculateExpectedSourceMembers;
//# sourceMappingURL=expectedSourceMembers.js.map
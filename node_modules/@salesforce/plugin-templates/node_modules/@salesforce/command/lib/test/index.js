"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = exports.test = exports.IConfig = exports.loadConfig = exports.command = exports.Config = exports.FancyTypes = exports.expect = void 0;
const oclifTest = require("@oclif/test");
const test_1 = require("@oclif/test");
Object.defineProperty(exports, "command", { enumerable: true, get: function () { return test_1.command; } });
Object.defineProperty(exports, "Config", { enumerable: true, get: function () { return test_1.Config; } });
Object.defineProperty(exports, "expect", { enumerable: true, get: function () { return test_1.expect; } });
Object.defineProperty(exports, "FancyTypes", { enumerable: true, get: function () { return test_1.FancyTypes; } });
const core_1 = require("@salesforce/core");
const testSetup_1 = require("@salesforce/core/lib/testSetup");
const ts_types_1 = require("@salesforce/ts-types");
// Need to prevent typescript error
const IConfig = require("@oclif/config/lib/config");
exports.IConfig = IConfig;
const load_config_1 = require("@oclif/test/lib/load-config");
Object.defineProperty(exports, "loadConfig", { enumerable: true, get: function () { return load_config_1.loadConfig; } });
load_config_1.loadConfig.root = (0, ts_types_1.ensure)(module.parent).filename;
const $$ = (0, testSetup_1.testSetup)();
exports.$$ = $$;
function find(orgs, predicate) {
    return (0, ts_types_1.definiteValuesOf)(orgs).filter(predicate)[0];
}
const withOrg = (org = {}, setAsDefault = true) => {
    return {
        // TODO: properly type the dictionary
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        run(ctx) {
            if (!ctx.orgs) {
                ctx.orgs = {};
            }
            if (!org.username) {
                org.username = 'test@org.com';
            }
            // Override org if it exists on context
            ctx.orgs[org.username] = Object.assign({
                orgId: '0x012123',
                instanceUrl: 'http://na30.salesforce.com',
                loginUrl: 'https://login.salesforce.com',
                created: '1519163543003',
                isDevHub: false,
            }, org);
            ctx.orgs[org.username].default = setAsDefault;
            // eslint-disable-next-line @typescript-eslint/require-await
            const readOrg = async function () {
                const path = this.path;
                const foundOrg = (0, ts_types_1.asJsonMap)(find(ctx.orgs, (val) => {
                    return path.includes((0, ts_types_1.ensureString)(val.username));
                }), {});
                return foundOrg;
            };
            // eslint-disable-next-line @typescript-eslint/require-await
            const writeOrg = async function () {
                const path = this.path;
                const foundOrg = (0, ts_types_1.asJsonMap)(find(ctx.orgs, (val) => {
                    return path.includes((0, ts_types_1.ensureString)(val.username));
                }), {});
                return ((0, ts_types_1.ensure)($$.configStubs.AuthInfoConfig).contents = foundOrg);
            };
            $$.configStubs.AuthInfoConfig = {
                retrieveContents: readOrg,
                updateContents: writeOrg,
            };
            const defaultOrg = find(ctx.orgs, (o) => !!o.default && !o.isDevHub);
            const defaultDevHubOrg = find(ctx.orgs, (o) => !!o.default && !!o.isDevHub);
            $$.configStubs.Config = {
                contents: {
                    defaultusername: defaultOrg && defaultOrg.username,
                    defaultdevhubusername: defaultDevHubOrg && defaultDevHubOrg.username,
                },
            };
        },
    };
};
const withConnectionRequest = (fakeFunction) => {
    return {
        run() {
            $$.fakeConnectionRequest = fakeFunction;
        },
    };
};
const withProject = (sfdxProjectJson) => {
    return {
        run() {
            // Restore first if already stubbed by $$.inProject()
            /* eslint-disable-next-line @typescript-eslint/unbound-method */
            const projPathStub = core_1.SfdxProject.resolveProjectPath;
            if (projPathStub.restore) {
                projPathStub.restore();
            }
            $$.SANDBOX.stub(core_1.SfdxProject, 'resolveProjectPath').callsFake((path) => {
                return $$.localPathRetriever(path || $$.id);
            });
            const DEFAULT_PROJECT_JSON = {
                sfdcLoginUrl: 'https://login.salesforce.com',
            };
            $$.configStubs.SfdxProjectJson = {
                contents: Object.assign({}, DEFAULT_PROJECT_JSON, sfdxProjectJson),
            };
        },
    };
};
const test = oclifTest.test
    .register('withOrg', withOrg)
    .register('withConnectionRequest', withConnectionRequest)
    .register('withProject', withProject);
exports.test = test;
exports.default = test;
//# sourceMappingURL=index.js.map
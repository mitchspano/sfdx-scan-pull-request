import { SfdxCommand } from '@salesforce/command';
import { AnyJson, Dictionary } from '@salesforce/ts-types';
import { Connection, Org } from '@salesforce/core';
import { Record as jsforceRecord, SaveResult, SObject } from 'jsforce';
import { Tooling } from '@salesforce/core/lib/org';
export interface Metric {
    requestPath: string;
    perfMetrics: AnyJson;
}
interface Result {
    status: number;
    result: AnyJson;
    perfMetrics?: Metric[];
}
declare type ConnectionInternals = {
    _callOptions?: {
        perfOption?: string;
    };
};
export declare abstract class DataCommand extends SfdxCommand {
    private static metrics;
    static addMetric(metric: Metric): void;
    static getMetrics(): Metric[];
    validateIdXorWhereFlags(): void;
    collectErrorMessages(result: SaveResult): string;
    throwIfPathDoesntExist(path: string): Promise<void>;
    getJsonResultObject(result?: AnyJson, status?: number): Result;
    /**
     * Necessary where plugin commands are extending a base class that extends SfdxCommand
     *
     * @returns Org
     */
    ensureOrg(): Org;
    getConnection(): (Tooling | Connection) & ConnectionInternals;
    query(sobject: SObject<unknown>, where: string): Promise<jsforceRecord>;
    protected stringToDictionary(str: string): Dictionary<string | boolean | Record<string, unknown>>;
    protected normalize<T>(results: T | T[]): T;
    protected logNestedObject(obj: never, indentation?: number): void;
    /**
     * Takes a sequence of key=value string pairs and produces an object out of them.
     * If you repeat the key, it replaces the value with the subsequent value.
     *
     * @param [keyValuePairs] - The list of key=value pair strings.
     */
    private transformKeyValueSequence;
    private convertToBooleanIfApplicable;
    /**
     * Splits a sequence of 'key=value key="leftValue rightValue"   key=value'
     * into a list of key=value pairs, paying attention to quoted whitespace.
     *
     * This is NOT a full push down-automaton so do NOT expect full error handling/recovery.
     *
     * @param {string} text - The sequence to split
     */
    private parseKeyValueSequence;
}
export {};

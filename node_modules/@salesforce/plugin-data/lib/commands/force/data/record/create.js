"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const dataCommand_1 = require("../../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'record.create');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'messages');
class Create extends dataCommand_1.DataCommand {
    async run() {
        this.ux.startSpinner(`Creating record for ${this.flags.sobjecttype}`);
        const sobject = this.getConnection().sobject(this.flags.sobjecttype);
        const values = this.stringToDictionary(this.flags.values);
        const result = this.normalize(await sobject.insert(values));
        if (result.success) {
            this.ux.log(messages.getMessage('createSuccess', [result.id || 'unknown id']));
            this.ux.stopSpinner();
        }
        else {
            const errors = this.collectErrorMessages(result);
            this.ux.error(messages.getMessage('createFailure', [errors]));
            this.ux.stopSpinner('failed');
        }
        return result;
    }
}
exports.default = Create;
Create.description = messages.getMessage('description');
Create.examples = messages.getMessage('examples').split(os.EOL);
Create.requiresUsername = true;
Create.flagsConfig = {
    sobjecttype: command_1.flags.string({
        char: 's',
        required: true,
        description: messages.getMessage('sObjectType'),
    }),
    values: command_1.flags.string({
        char: 'v',
        required: true,
        description: messages.getMessage('values'),
    }),
    usetoolingapi: command_1.flags.boolean({
        char: 't',
        description: messages.getMessage('useToolingApi'),
    }),
    perflog: command_1.flags.boolean({
        description: commonMessages.getMessage('perfLogLevelOption'),
        dependsOn: ['json'],
    }),
};
//# sourceMappingURL=create.js.map
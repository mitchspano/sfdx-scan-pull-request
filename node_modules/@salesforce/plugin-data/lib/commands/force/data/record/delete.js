"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const dataCommand_1 = require("../../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'record.delete');
const commonMessages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'messages');
class Delete extends dataCommand_1.DataCommand {
    async run() {
        this.validateIdXorWhereFlags();
        this.ux.startSpinner('Deleting Record');
        let status = 'Success';
        try {
            const sobject = this.getConnection().sobject(this.flags.sobjecttype);
            const sObjectId = (this.flags.sobjectid || (await this.query(sobject, this.flags.where)).Id);
            const result = this.normalize(await sobject.destroy(sObjectId));
            if (result.success) {
                this.ux.log(messages.getMessage('deleteSuccess', [sObjectId]));
            }
            else {
                status = 'Failed';
                const errors = this.collectErrorMessages(result);
                this.ux.error(messages.getMessage('deleteFailure', [errors]));
            }
            this.ux.stopSpinner(status);
            return result;
        }
        catch (err) {
            status = 'Failed';
            this.ux.stopSpinner(status);
            throw new core_1.SfError(err.name, err.message);
        }
    }
}
exports.default = Delete;
Delete.description = messages.getMessage('description');
Delete.examples = messages.getMessage('examples').split(os.EOL);
Delete.requiresUsername = true;
Delete.flagsConfig = {
    sobjecttype: command_1.flags.string({
        char: 's',
        required: true,
        description: messages.getMessage('sObjectType'),
    }),
    sobjectid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('sObjectId'),
        exclusive: ['where'],
    }),
    where: command_1.flags.string({
        char: 'w',
        description: messages.getMessage('where'),
        exclusive: ['sobjectid'],
    }),
    usetoolingapi: command_1.flags.boolean({
        char: 't',
        description: messages.getMessage('useToolingApi'),
    }),
    perflog: command_1.flags.boolean({
        description: commonMessages.getMessage('perfLogLevelOption'),
        dependsOn: ['json'],
    }),
};
//# sourceMappingURL=delete.js.map
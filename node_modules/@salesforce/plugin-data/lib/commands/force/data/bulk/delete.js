"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const fs = require("fs");
const core_1 = require("@salesforce/core");
const command_1 = require("@salesforce/command");
const batcher_1 = require("../../../../batcher");
const dataCommand_1 = require("../../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.delete');
class Delete extends dataCommand_1.DataCommand {
    async run() {
        let result;
        try {
            await this.throwIfPathDoesntExist(this.flags.csvfile);
            const conn = this.ensureOrg().getConnection();
            this.ux.startSpinner('Bulk Delete');
            const csvRecords = fs.createReadStream(this.flags.csvfile, { encoding: 'utf-8' });
            const job = conn.bulk.createJob(this.flags.sobjecttype, 'delete');
            const batcher = new batcher_1.Batcher(conn, this.ux);
            result = await batcher.createAndExecuteBatches(job, csvRecords, this.flags.sobjecttype, this.flags.wait);
            this.ux.stopSpinner();
            return result;
        }
        catch (e) {
            this.ux.stopSpinner('error');
            throw core_1.SfError.wrap(e);
        }
    }
}
exports.default = Delete;
Delete.description = messages.getMessage('description');
Delete.examples = messages.getMessage('examples').split(os.EOL);
Delete.requiresUsername = true;
Delete.flagsConfig = {
    csvfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('flags.csvfile'),
        required: true,
    }),
    sobjecttype: command_1.flags.string({
        char: 's',
        description: messages.getMessage('flags.sobjecttype'),
        required: true,
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('flags.wait'),
        min: 0,
    }),
};
//# sourceMappingURL=delete.js.map
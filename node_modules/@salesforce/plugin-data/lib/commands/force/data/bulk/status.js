"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const batcher_1 = require("../../../../batcher");
const dataCommand_1 = require("../../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.status');
class Status extends dataCommand_1.DataCommand {
    async run() {
        this.ux.startSpinner('Getting Status');
        const conn = this.ensureOrg().getConnection();
        const batcher = new batcher_1.Batcher(conn, this.ux);
        if (this.flags.jobid && this.flags.batchid) {
            // view batch status
            const job = conn.bulk.job(this.flags.jobid);
            let found = false;
            const batches = await job.list();
            batches.forEach((batch) => {
                if (batch.id === this.flags.batchid) {
                    batcher.bulkStatus(batch);
                    found = true;
                }
            });
            if (!found) {
                throw new core_1.SfError(messages.getMessage('NoBatchFound', [this.flags.batchid, this.flags.jobid]), 'NoBatchFound');
            }
            this.ux.stopSpinner();
            return batches;
        }
        else {
            // view job status
            const jobStatus = await batcher.fetchAndDisplayJobStatus(this.flags.jobid);
            this.ux.stopSpinner();
            return jobStatus;
        }
    }
}
exports.default = Status;
Status.description = messages.getMessage('description');
Status.examples = messages.getMessage('examples').split(os.EOL);
Status.requiresUsername = true;
Status.flagsConfig = {
    batchid: command_1.flags.string({
        char: 'b',
        description: messages.getMessage('flags.batchid'),
    }),
    jobid: command_1.flags.string({
        char: 'i',
        description: messages.getMessage('flags.jobid'),
        required: true,
    }),
};
//# sourceMappingURL=status.js.map
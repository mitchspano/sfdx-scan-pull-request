"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const fs = require("fs");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const batcher_1 = require("../../../../batcher");
const dataCommand_1 = require("../../../../dataCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'bulk.upsert');
class Upsert extends dataCommand_1.DataCommand {
    async run() {
        const conn = this.ensureOrg().getConnection();
        this.ux.startSpinner('Bulk Upsert');
        await this.throwIfPathDoesntExist(this.flags.csvfile);
        const batcher = new batcher_1.Batcher(conn, this.ux);
        const csvStream = fs.createReadStream(this.flags.csvfile, { encoding: 'utf-8' });
        const concurrencyMode = this.flags.serial ? 'Serial' : 'Parallel';
        const job = conn.bulk.createJob(this.flags.sobjecttype, 'upsert', {
            extIdField: this.flags.externalid,
            concurrencyMode,
        });
        // eslint-disable-next-line @typescript-eslint/no-misused-promises,no-async-promise-executor
        return new Promise(async (resolve, reject) => {
            job.on('error', (err) => {
                reject(err);
            });
            try {
                resolve(await batcher.createAndExecuteBatches(job, csvStream, this.flags.sobjecttype, this.flags.wait));
                this.ux.stopSpinner();
            }
            catch (e) {
                this.ux.stopSpinner('error');
                reject(e);
            }
        });
    }
}
exports.default = Upsert;
Upsert.description = messages.getMessage('description');
Upsert.examples = messages.getMessage('examples').split(os.EOL);
Upsert.requiresUsername = true;
Upsert.flagsConfig = {
    externalid: command_1.flags.string({
        char: 'i',
        description: messages.getMessage('flags.externalid'),
        required: true,
    }),
    csvfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('flags.csvfile'),
        required: true,
    }),
    sobjecttype: command_1.flags.string({
        char: 's',
        description: messages.getMessage('flags.sobjecttype'),
        required: true,
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('flags.wait'),
        min: 0,
    }),
    serial: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('flags.serial'),
        default: false,
    }),
};
//# sourceMappingURL=upsert.js.map
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const importApi_1 = require("../../../../api/data/tree/importApi");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-data', 'tree.import');
/**
 * Command that provides data import capability via the SObject Tree Save API.
 */
class Import extends command_1.SfdxCommand {
    async run() {
        var _a;
        const importApi = new importApi_1.ImportApi(this.org);
        if (this.flags.confighelp) {
            // Display config help and return
            const schema = importApi.getSchema();
            if (!this.flags.json) {
                const schemaLines = new core_1.SchemaPrinter(this.logger, schema).getLines();
                schemaLines.forEach((line) => this.ux.log(line));
                // turn off table output
                this.result.tableColumnData = undefined;
            }
            return schema;
        }
        const importConfig = {
            sobjectTreeFiles: this.flags.sobjecttreefiles,
            contentType: this.flags.contenttype,
            plan: this.flags.plan,
        };
        const importResults = await importApi.import(importConfig);
        let processedResult = [];
        if ((_a = importResults.responseRefs) === null || _a === void 0 ? void 0 : _a.length) {
            processedResult = importResults.responseRefs.map((ref) => {
                const type = (0, ts_types_1.getString)(importResults.sobjectTypes, ref.referenceId, 'Unknown');
                return { refId: ref.referenceId, type, id: ref.id };
            });
        }
        this.ux.styledHeader('Import Results');
        return processedResult;
    }
}
exports.default = Import;
Import.description = messages.getMessage('description');
Import.examples = messages.getMessage('examples').split(os.EOL);
Import.requiresUsername = true;
Import.flagsConfig = {
    sobjecttreefiles: command_1.flags.array({
        char: 'f',
        description: messages.getMessage('sobjecttreefiles'),
        exclusive: ['plan'],
    }),
    plan: command_1.flags.filepath({
        char: 'p',
        description: messages.getMessage('plan'),
    }),
    contenttype: command_1.flags.string({
        char: 'c',
        description: messages.getMessage('contenttype'),
        hidden: true,
    }),
    // displays the schema for a data import plan
    confighelp: command_1.flags.boolean({
        description: messages.getMessage('confighelp'),
    }),
};
Import.result = {
    tableColumnData: {
        refId: { header: 'Reference ID' },
        type: { header: 'Type' },
        id: { header: 'ID' },
    },
};
//# sourceMappingURL=import.js.map
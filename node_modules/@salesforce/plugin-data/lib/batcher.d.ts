/// <reference types="node" />
import { ReadStream } from 'fs';
import { Connection } from '@salesforce/core';
import { UX } from '@salesforce/command';
import { Job, JobInfo } from 'jsforce/job';
import { BulkIngestBatchResult } from 'jsforce/lib/api/bulk';
import { BatchInfo } from 'jsforce/batch';
declare type BatchEntry = Record<string, string>;
export declare type Batches = BatchEntry[][];
export declare type BulkResult = {
    $: {
        xmlns: string;
    };
    id: string;
    jobId: string;
    state: string;
    createdDate: string;
    systemModStamp: string;
    numberRecordsProcessed: string;
    numberRecordsFailed: string;
    totalProcessingTime: string;
    apiActiveProcessingTime: string;
    apexProcessingTime: string;
};
export declare class Batcher {
    private conn;
    private ux;
    constructor(conn: Connection, ux: UX);
    /**
     * get and display the job status; close the job if completed
     *
     * @param jobId {string}
     * @param doneCallback
     */
    fetchAndDisplayJobStatus(jobId: string, doneCallback?: (...args: [{
        job: JobInfo;
    }]) => void): Promise<JobInfo>;
    bulkStatus(summary: JobInfo | BatchInfo, results?: BulkIngestBatchResult, batchNum?: number, isJob?: boolean): JobInfo | BatchInfo;
    /**
     * create and execute batches based on the record arrays; wait for completion response if -w flag is set with > 0 minutes
     * to get proper logging/printing to console pass the instance of UX that called this method
     *
     * @param job {Job}
     * @param records
     * @param sobjectType {string}
     * @param wait {number}
     */
    createAndExecuteBatches(job: Job & {
        id?: string;
    }, records: ReadStream, sobjectType: string, wait?: number): Promise<BulkResult[] | JobInfo[]>;
    /**
     * The timeout error handling is messy so to increase readability
     * break it out into it's own method
     *
     * @param err The timeout Error
     * @private
     */
    private parseTimeOutError;
    /**
     * register completion event listeners on the batch
     * exposed for unit testing
     *
     * @param newBatch
     * @param batchesCompleted
     * @param overallInfo
     * @param batchNum
     * @param totalNumBatches
     * @param waitMins
     */
    private waitForCompletion;
    /**
     * registers the listener in charge of distributing all csv records into batches
     *
     * @param readStream - the read stream
     * @returns {Promise<Batches>}
     */
    private splitIntoBatches;
}
export {};

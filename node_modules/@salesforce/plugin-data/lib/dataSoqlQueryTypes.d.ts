import { QueryResult } from 'jsforce';
import { Optional } from '@salesforce/ts-types';
export declare enum FieldType {
    field = 0,
    subqueryField = 1,
    functionField = 2
}
/**
 * interface to represent a field when describing the fields that make up a query result
 */
export interface Field {
    fieldType: FieldType;
    name: string;
    fields?: Field[];
    alias?: Optional<string>;
}
/**
 * Type to define SoqlQuery results
 */
export declare type SoqlQueryResult = {
    query: string;
    result: QueryResult<unknown>;
    columns: Field[];
};
export declare type BasicRecord = {
    [index: string]: {
        records: BasicRecord[];
    } | unknown;
    attributes: {
        type: string;
        url: string;
    };
};
export interface DataPlanPart {
    sobject: string;
    saveRefs: boolean;
    resolveRefs: boolean;
    files: Array<string | (DataPlanPart & {
        file: string;
    })>;
}
export declare type SObjectTreeInput = {
    attributes: {
        type: string;
        referenceId: string;
    };
} & {
    [index: string]: {
        records: SObjectTreeInput[];
    } | unknown;
};
export declare type SObjectTreeFileContents = {
    records: SObjectTreeInput[];
};
export declare const hasNestedRecords: <T>(element: unknown) => element is {
    records: T[];
};
export declare const isAttributesElement: (element: SObjectTreeInput['attributes'] | unknown) => element is {
    type: string;
    referenceId: string;
};

/// <reference types="node" />
import fs = require('fs');
export declare type FileSystem = Pick<typeof fs, 'readFileSync' | 'writeFileSync' | 'unlinkSync'>;
export declare type ResolveFilenameFunction = (request: string, parent: ProxiableModule, isMain: boolean) => string;
export declare type KeyedObject = {
    [key: string]: any;
    [key: number]: any;
};
export declare type ObjectModule = object;
export declare type FunctionModule = (...args: any[]) => any;
export declare type ProxiableModule = (ObjectModule | FunctionModule) & KeyedObject;
export declare type LoadModuleFunction = (request: string, parent: ProxiableModule, isMain: boolean) => ProxiableModule;
export interface LoadModule extends LoadModuleFunction {
    _origLoad?: LoadModuleFunction;
}
export interface Module {
    _load: LoadModule;
    _resolveFilename: ResolveFilenameFunction;
}

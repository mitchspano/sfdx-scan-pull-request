"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deploy = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const deployCommand_1 = require("../../../deployCommand");
const deployResultFormatter_1 = require("../../../formatters/deployResultFormatter");
const deployAsyncResultFormatter_1 = require("../../../formatters/source/deployAsyncResultFormatter");
const deployProgressBarFormatter_1 = require("../../../formatters/deployProgressBarFormatter");
const deployProgressStatusFormatter_1 = require("../../../formatters/deployProgressStatusFormatter");
const trackingFunctions_1 = require("../../../trackingFunctions");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'deploy');
// One of these flags must be specified for a valid deploy.
const xorFlags = ['manifest', 'metadata', 'sourcepath', 'validateddeployrequestid'];
class Deploy extends deployCommand_1.DeployCommand {
    constructor() {
        super(...arguments);
        this.lifecycleEventNames = ['predeploy', 'postdeploy'];
    }
    async run() {
        await this.preChecks();
        await this.deploy();
        this.resolveSuccess();
        await this.maybeUpdateTracking();
        return this.formatResult();
    }
    async preChecks() {
        if (this.flags.tracksource) {
            this.tracking = await (0, trackingFunctions_1.trackingSetup)({
                commandName: 'force:source:deploy',
                // we'll check ACTUAL conflicts once we get a componentSet built
                ignoreConflicts: true,
                org: this.org,
                project: this.project,
                ux: this.ux,
            });
        }
    }
    // There are 3 types of deploys:
    //   1. synchronous - deploy metadata and wait for the deploy to complete.
    //   2. asynchronous - deploy metadata and immediately return.
    //   3. recent validation - deploy metadata that's already been validated by the org
    async deploy() {
        const waitDuration = this.getFlag('wait');
        this.isAsync = waitDuration.quantity === 0;
        this.isRest = this.isRestDeploy();
        if (this.isAsync && (this.flags.coverageformatters || this.flags.junit)) {
            this.warn(messages.getMessage('asyncCoverageJunitWarning'));
        }
        if (this.flags.validateddeployrequestid) {
            this.deployResult = await this.deployRecentValidation();
        }
        else {
            this.componentSet = await source_deploy_retrieve_1.ComponentSetBuilder.build({
                apiversion: this.getFlag('apiversion'),
                sourceapiversion: await this.getSourceApiVersion(),
                sourcepath: this.getFlag('sourcepath'),
                manifest: this.flags.manifest && {
                    manifestPath: this.getFlag('manifest'),
                    directoryPaths: this.getPackageDirs(),
                    destructiveChangesPre: this.getFlag('predestructivechanges'),
                    destructiveChangesPost: this.getFlag('postdestructivechanges'),
                },
                metadata: this.flags.metadata && {
                    metadataEntries: this.getFlag('metadata'),
                    directoryPaths: this.getPackageDirs(),
                },
            });
            if (this.getFlag('tracksource')) {
                // will throw if conflicts exist
                if (!this.getFlag('forceoverwrite')) {
                    await (0, trackingFunctions_1.filterConflictsByComponentSet)({ tracking: this.tracking, components: this.componentSet, ux: this.ux });
                }
                const localDeletes = await this.tracking.getChanges({
                    origin: 'local',
                    state: 'delete',
                    format: 'string',
                });
                if (localDeletes.length) {
                    this.ux.warn(messages.getMessage('deployWontDelete'));
                }
            }
            // fire predeploy event for sync and async deploys
            await this.lifecycle.emit('predeploy', this.componentSet.toArray());
            this.ux.log((0, deployCommand_1.getVersionMessage)('Deploying', this.componentSet, this.isRest));
            const deploy = await this.componentSet.deploy({
                usernameOrConnection: this.org.getUsername(),
                apiOptions: {
                    ...{
                        purgeOnDelete: this.getFlag('purgeondelete', false),
                        ignoreWarnings: this.getFlag('ignorewarnings', false),
                        rollbackOnError: !this.getFlag('ignoreerrors', false),
                        checkOnly: this.getFlag('checkonly', false),
                        rest: this.isRest,
                    },
                    // if runTests is defaulted as 'NoTestRun' and deploying to prod, you'll get this error
                    // https://github.com/forcedotcom/cli/issues/1542
                    // add additional properties conditionally ()
                    ...(this.getFlag('testlevel') ? { testLevel: this.getFlag('testlevel') } : {}),
                    ...(this.getFlag('runtests') ? { runTests: this.getFlag('runtests') } : {}),
                },
            });
            this.asyncDeployResult = { id: deploy.id };
            this.updateDeployId(deploy.id);
            if (!this.isAsync) {
                // we're not print JSON output
                if (!this.isJsonOutput()) {
                    const progressFormatter = kit_1.env.getBoolean('SFDX_USE_PROGRESS_BAR', true)
                        ? new deployProgressBarFormatter_1.DeployProgressBarFormatter(this.logger, this.ux)
                        : new deployProgressStatusFormatter_1.DeployProgressStatusFormatter(this.logger, this.ux);
                    progressFormatter.progress(deploy);
                }
                this.deployResult = await deploy.pollStatus({ timeout: waitDuration });
            }
        }
        if (this.deployResult) {
            // Only fire the postdeploy event when we have results. I.e., not async.
            await this.lifecycle.emit('postdeploy', this.deployResult);
        }
    }
    formatResult() {
        var _a, _b;
        this.resultsDir = this.resolveOutputDir(this.getFlag('coverageformatters', undefined), this.getFlag('junit'), this.getFlag('resultsdir'), (_b = (_a = this.deployResult) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.id, false);
        const formatterOptions = {
            verbose: this.getFlag('verbose', false),
            username: this.org.getUsername(),
            coverageOptions: this.getCoverageFormattersOptions(this.getFlag('coverageformatters', undefined)),
            junitTestResults: this.flags.junit,
            resultsDir: this.resultsDir,
            testsRan: this.getFlag('testlevel', 'NoTestRun') !== 'NoTestRun',
        };
        const formatter = this.isAsync
            ? new deployAsyncResultFormatter_1.DeployAsyncResultFormatter(this.logger, this.ux, formatterOptions, this.asyncDeployResult)
            : new deployResultFormatter_1.DeployResultFormatter(this.logger, this.ux, formatterOptions, this.deployResult);
        if (!this.isAsync) {
            this.maybeCreateRequestedReports();
        }
        // Only display results to console when JSON flag is unset.
        if (!this.isJsonOutput()) {
            formatter.display();
        }
        return formatter.getJson();
    }
    async maybeUpdateTracking() {
        if (this.getFlag('tracksource', false)) {
            return (0, trackingFunctions_1.updateTracking)({ ux: this.ux, result: this.deployResult, tracking: this.tracking });
        }
    }
}
exports.Deploy = Deploy;
Deploy.description = messages.getMessage('description');
Deploy.examples = messages.getMessage('examples').split(os.EOL);
Deploy.requiresProject = true;
Deploy.requiresUsername = true;
Deploy.flagsConfig = {
    checkonly: command_1.flags.boolean({
        char: 'c',
        description: messages.getMessage('flags.checkonly'),
        longDescription: messages.getMessage('flagsLong.checkonly'),
    }),
    soapdeploy: command_1.flags.boolean({
        default: false,
        description: messages.getMessage('flags.soapDeploy'),
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        default: kit_1.Duration.minutes(Deploy.DEFAULT_WAIT_MINUTES),
        min: kit_1.Duration.minutes(0),
        description: messages.getMessage('flags.wait'),
        longDescription: messages.getMessage('flagsLong.wait'),
    }),
    testlevel: command_1.flags.enum({
        char: 'l',
        description: messages.getMessage('flags.testLevel'),
        longDescription: messages.getMessage('flagsLong.testLevel'),
        options: ['NoTestRun', 'RunSpecifiedTests', 'RunLocalTests', 'RunAllTestsInOrg'],
    }),
    runtests: command_1.flags.array({
        char: 'r',
        description: messages.getMessage('flags.runTests'),
        longDescription: messages.getMessage('flagsLong.runTests'),
    }),
    ignoreerrors: command_1.flags.boolean({
        char: 'o',
        description: messages.getMessage('flags.ignoreErrors'),
        longDescription: messages.getMessage('flagsLong.ignoreErrors'),
    }),
    ignorewarnings: command_1.flags.boolean({
        char: 'g',
        description: messages.getMessage('flags.ignoreWarnings'),
        longDescription: messages.getMessage('flagsLong.ignoreWarnings'),
    }),
    purgeondelete: command_1.flags.boolean({
        description: messages.getMessage('flags.purgeOnDelete'),
        dependsOn: ['manifest'],
    }),
    validateddeployrequestid: command_1.flags.id({
        char: 'q',
        description: messages.getMessage('flags.validateDeployRequestId'),
        longDescription: messages.getMessage('flagsLong.validateDeployRequestId'),
        exactlyOne: xorFlags,
        exclusive: ['checkonly', 'testlevel', 'runtests', 'tracksource'],
        validate: deployCommand_1.DeployCommand.isValidDeployId,
    }),
    verbose: command_1.flags.builtin({
        description: messages.getMessage('flags.verbose'),
    }),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('flags.metadata'),
        longDescription: messages.getMessage('flagsLong.metadata'),
        exactlyOne: xorFlags,
    }),
    sourcepath: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('flags.sourcePath'),
        longDescription: messages.getMessage('flagsLong.sourcePath'),
        exactlyOne: xorFlags,
    }),
    manifest: command_1.flags.filepath({
        char: 'x',
        description: messages.getMessage('flags.manifest'),
        longDescription: messages.getMessage('flagsLong.manifest'),
        exactlyOne: xorFlags,
    }),
    predestructivechanges: command_1.flags.filepath({
        description: messages.getMessage('flags.predestructivechanges'),
        dependsOn: ['manifest'],
    }),
    postdestructivechanges: command_1.flags.filepath({
        description: messages.getMessage('flags.postdestructivechanges'),
        dependsOn: ['manifest'],
    }),
    tracksource: command_1.flags.boolean({
        char: 't',
        description: messages.getMessage('flags.tracksource'),
        exclusive: ['checkonly', 'validateddeployrequestid'],
    }),
    forceoverwrite: command_1.flags.boolean({
        char: 'f',
        description: messages.getMessage('flags.forceoverwrite'),
        dependsOn: ['tracksource'],
    }),
    resultsdir: command_1.flags.directory({
        description: messages.getMessage('flags.resultsDir'),
    }),
    coverageformatters: command_1.flags.array({
        description: messages.getMessage('flags.coverageFormatters'),
        options: deployCommand_1.reportsFormatters,
        helpValue: deployCommand_1.reportsFormatters.join(','),
    }),
    junit: command_1.flags.boolean({ description: messages.getMessage('flags.junit') }),
};
//# sourceMappingURL=deploy.js.map
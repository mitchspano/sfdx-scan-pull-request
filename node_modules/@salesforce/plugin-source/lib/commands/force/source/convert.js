"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Convert = void 0;
const os = require("os");
const path_1 = require("path");
const fs = require("fs");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const ts_types_1 = require("@salesforce/ts-types");
const sourceCommand_1 = require("../../../sourceCommand");
const convertResultFormatter_1 = require("../../../formatters/convertResultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'convert');
class Convert extends sourceCommand_1.SourceCommand {
    async run() {
        await this.convert();
        this.resolveSuccess();
        return this.formatResult();
    }
    async convert() {
        const paths = [];
        const { sourcepath, metadata, manifest, rootdir } = this.flags;
        if (sourcepath) {
            paths.push(...sourcepath);
        }
        // rootdir behaves exclusively to sourcepath, metadata, and manifest... to maintain backwards compatibility
        // we will check here, instead of adding the exclusive option to the flag definition so we don't break scripts
        if (rootdir && !sourcepath && !metadata && !manifest && typeof rootdir === 'string') {
            // only rootdir option passed
            paths.push(rootdir);
        }
        // no options passed, convert the default package (usually force-app)
        if (!sourcepath && !metadata && !manifest && !rootdir) {
            paths.push(this.project.getDefaultPackage().path);
        }
        this.componentSet = await source_deploy_retrieve_1.ComponentSetBuilder.build({
            sourceapiversion: await this.getSourceApiVersion(),
            sourcepath: paths,
            manifest: manifest && {
                manifestPath: this.getFlag('manifest'),
                directoryPaths: this.getPackageDirs(),
            },
            metadata: metadata && {
                metadataEntries: this.getFlag('metadata'),
                directoryPaths: this.getPackageDirs(),
            },
        });
        const packageName = this.getFlag('packagename');
        const outputDirectory = (0, path_1.resolve)(this.getFlag('outputdir'));
        const converter = new source_deploy_retrieve_1.MetadataConverter();
        this.convertResult = await converter.convert(this.componentSet, 'metadata', {
            type: 'directory',
            outputDirectory,
            packageName,
            genUniqueDir: false,
        });
        if (packageName) {
            // SDR will build an output path like /output/directory/packageName/package.xml
            // this was breaking from toolbelt, so to revert it we copy the directory up a level and delete the original
            this.copyDir(this.convertResult.packagePath, outputDirectory);
            try {
                fs.rmSync(this.convertResult.packagePath, { recursive: true });
            }
            catch (e) {
                // rmdirSync is being deprecated and emits a warning
                // but rmSync is introduced in node 14 so fall back to rmdirSync
                fs.rmdirSync(this.convertResult.packagePath, { recursive: true });
            }
            this.convertResult.packagePath = outputDirectory;
        }
    }
    // TODO: move into fs in sfdx-core
    copyDir(src, dest) {
        fs.mkdirSync(dest, { recursive: true });
        const entries = fs.readdirSync(src, { withFileTypes: true });
        entries.map((entry) => {
            const srcPath = (0, path_1.join)(src, entry.name);
            const destPath = (0, path_1.join)(dest, entry.name);
            return entry.isDirectory() ? this.copyDir(srcPath, destPath) : fs.copyFileSync(srcPath, destPath);
        });
    }
    resolveSuccess() {
        if (!(0, ts_types_1.getString)(this.convertResult, 'packagePath')) {
            this.setExitCode(1);
        }
    }
    formatResult() {
        const formatter = new convertResultFormatter_1.ConvertResultFormatter(this.logger, this.ux, this.convertResult);
        if (!this.isJsonOutput()) {
            formatter.display();
        }
        return formatter.getJson();
    }
}
exports.Convert = Convert;
Convert.description = messages.getMessage('description');
Convert.examples = messages.getMessage('examples').split(os.EOL);
Convert.requiresProject = true;
Convert.flagsConfig = {
    rootdir: command_1.flags.directory({
        char: 'r',
        description: messages.getMessage('flags.rootdir'),
    }),
    outputdir: command_1.flags.directory({
        default: `metadataPackage_${Date.now()}`,
        char: 'd',
        description: messages.getMessage('flags.outputdir'),
    }),
    packagename: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('flags.packagename'),
    }),
    manifest: command_1.flags.string({
        char: 'x',
        description: messages.getMessage('flags.manifest'),
        longDescription: messages.getMessage('flagsLong.manifest'),
    }),
    sourcepath: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('flags.sourcepath'),
        longDescription: messages.getMessage('flagsLong.sourcepath'),
        exclusive: ['manifest', 'metadata'],
    }),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('flags.metadata'),
        exclusive: ['manifest', 'sourcepath'],
    }),
};
//# sourceMappingURL=convert.js.map
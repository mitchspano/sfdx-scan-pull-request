"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Open = void 0;
const os = require("os");
const path = require("path");
const fs = require("fs");
const open = require("open");
const ts_types_1 = require("@salesforce/ts-types");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const openResultFormatter_1 = require("../../../formatters/source/openResultFormatter");
const sourceCommand_1 = require("../../../sourceCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-source', 'open', [
    'description',
    'examples',
    'SourceOpenFileDescription',
    'SourceOpenPathDescription',
]);
class Open extends sourceCommand_1.SourceCommand {
    async run() {
        await this.doOpen();
        this.resolveSuccess();
        return this.formatResult();
    }
    resolveSuccess() {
        if (!(0, ts_types_1.getString)(this.openResult, 'url')) {
            process.exitCode = 1;
        }
    }
    formatResult() {
        const formatter = new openResultFormatter_1.OpenResultFormatter(this.logger, this.ux, this.openResult);
        if (!this.isJsonOutput()) {
            formatter.display();
        }
        return formatter.getJson();
    }
    async doOpen() {
        const typeName = this.getTypeNameDefinitionByFileName(path.resolve(this.flags.sourcefile));
        const openPath = ['FlexiPage', 'ApexPage'].includes(typeName)
            ? await this.setUpOpenPath(typeName)
            : await this.buildFrontdoorUrl();
        this.openResult = await this.open(openPath);
    }
    getTypeNameDefinitionByFileName(fsPath) {
        if (fs.existsSync(fsPath)) {
            const metadataResolver = new source_deploy_retrieve_1.MetadataResolver();
            const components = metadataResolver.getComponentsFromPath(fsPath);
            return components[0].type.name;
        }
        throw new core_1.SfError(`File not found: ${fsPath}`, 'FileNotFound');
    }
    async buildFrontdoorUrl() {
        const authInfo = await core_1.AuthInfo.create({ username: this.org.getUsername() });
        return authInfo.getOrgFrontDoorUrl();
    }
    async open(src) {
        const url = `${await this.buildFrontdoorUrl()}&retURL=${encodeURIComponent(decodeURIComponent(src))}`;
        const result = {
            url,
            username: this.org.getUsername(),
            orgId: this.org.getOrgId(),
        };
        if (!core_1.sfdc.isInternalUrl(url)) {
            try {
                await new core_1.SfdcUrl(url).checkLightningDomain();
            }
            catch (error) {
                throw new core_1.SfError('SourceOpenCommandTimeoutError', 'SourceOpenCommandTimeoutError');
            }
        }
        return this.flags.urlonly ? result : this.openBrowser(url, result);
    }
    async setUpOpenPath(pageType) {
        try {
            if (pageType === 'FlexiPage') {
                const flexipage = await this.org
                    .getConnection()
                    .singleRecordQuery(`SELECT id FROM flexipage WHERE DeveloperName='${path.basename(this.flags.sourcefile, '.flexipage-meta.xml')}'`, { tooling: true });
                return `/visualEditor/appBuilder.app?pageId=${flexipage.Id}`;
            }
            else if (pageType === 'ApexPage') {
                return `/apex/${path
                    .basename(this.flags.sourcefile)
                    .replace('.page-meta.xml', '')
                    .replace('.page', '')}`;
            }
            else {
                return '_ui/flexipage/ui/FlexiPageFilterListPage';
            }
        }
        catch (error) {
            return '_ui/flexipage/ui/FlexiPageFilterListPage';
        }
    }
    openBrowser(url, options) {
        void open(url);
        return options;
    }
}
exports.Open = Open;
Open.description = messages.getMessage('description');
Open.examples = messages.getMessage('examples').split(os.EOL);
Open.requiresProject = true;
Open.requiresUsername = true;
Open.flagsConfig = {
    sourcefile: command_1.flags.filepath({
        char: 'f',
        required: true,
        description: messages.getMessage('SourceOpenFileDescription'),
    }),
    urlonly: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('SourceOpenPathDescription'),
    }),
};
//# sourceMappingURL=open.js.map
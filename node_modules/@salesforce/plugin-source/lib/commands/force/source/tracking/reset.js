"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reset = void 0;
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const chalk = require("chalk");
const source_tracking_1 = require("@salesforce/source-tracking");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'tracking');
class Reset extends command_1.SfdxCommand {
    async run() {
        (0, source_tracking_1.throwIfInvalid)({
            org: this.org,
            projectPath: this.project.getPath(),
            toValidate: 'plugin-source',
            command: 'force:source:tracking:clear',
        });
        if (this.flags.noprompt || (await this.ux.confirm(chalk.dim(messages.getMessage('promptMessage'))))) {
            const sourceTracking = await source_tracking_1.SourceTracking.create({
                project: this.project,
                org: this.org,
            });
            const [remoteResets, localResets] = await Promise.all([
                sourceTracking.resetRemoteTracking(this.flags.revision),
                sourceTracking.resetLocalTracking(),
            ]);
            this.ux.log(`Reset local tracking files${this.flags.revision ? ` to revision ${this.flags.revision}` : ''}.`);
            return {
                sourceMembersSynced: remoteResets,
                localPathsSynced: localResets.length,
            };
        }
        return {
            sourceMembersSynced: 0,
            localPathsSynced: 0,
        };
    }
}
exports.Reset = Reset;
Reset.aliases = ['force:source:beta:tracking:reset'];
Reset.description = messages.getMessage('resetDescription');
Reset.requiresProject = true;
Reset.requiresUsername = true;
Reset.flagsConfig = {
    revision: command_1.flags.integer({
        char: 'r',
        description: messages.getMessage('revisionDescription'),
        min: 0,
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('nopromptDescription'),
    }),
};
//# sourceMappingURL=reset.js.map
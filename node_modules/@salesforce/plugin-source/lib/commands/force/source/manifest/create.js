"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const path_1 = require("path");
const fs = require("fs");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const sourceCommand_1 = require("../../../../sourceCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'create');
const manifestTypes = {
    pre: 'destructiveChangesPre.xml',
    post: 'destructiveChangesPost.xml',
    destroy: 'destructiveChanges.xml',
    package: 'package.xml',
};
const packageTypes = {
    managed: ['beta', 'deleted', 'deprecated', 'installed', 'released'],
    unlocked: ['deprecatedEditable', 'installedEditable'],
};
const xorFlags = ['metadata', 'sourcepath', 'fromorg'];
class create extends sourceCommand_1.SourceCommand {
    async run() {
        await this.createManifest();
        this.resolveSuccess();
        return this.formatResult();
    }
    async createManifest() {
        var _a;
        // convert the manifesttype into one of the "official" manifest names
        // if no manifesttype flag passed, use the manifestname flag
        // if no manifestname flag, default to 'package.xml'
        this.manifestName =
            manifestTypes[this.getFlag('manifesttype')] || this.getFlag('manifestname') || 'package.xml';
        this.outputDir = this.getFlag('outputdir');
        this.includepackages = this.getFlag('includepackages');
        let exclude = [];
        if (this.includepackages) {
            Object.keys(packageTypes).forEach((type) => (exclude = !this.includepackages.includes(type) ? exclude.concat(packageTypes[type]) : exclude));
        }
        else {
            exclude = Object.values(packageTypes).flat();
        }
        const componentSet = await source_deploy_retrieve_1.ComponentSetBuilder.build({
            apiversion: (_a = this.getFlag('apiversion')) !== null && _a !== void 0 ? _a : (await this.getSourceApiVersion()),
            sourcepath: this.getFlag('sourcepath'),
            metadata: this.flags.metadata && {
                metadataEntries: this.getFlag('metadata'),
                directoryPaths: this.getPackageDirs(),
            },
            org: this.flags.fromorg && {
                username: this.getFlag('fromorg'),
                exclude,
            },
        });
        // add the .xml suffix if the user just provided a file name
        this.manifestName = this.manifestName.endsWith('.xml') ? this.manifestName : this.manifestName + '.xml';
        if (this.outputDir) {
            await fs.promises.mkdir(this.outputDir, { recursive: true });
            this.outputPath = (0, path_1.join)(this.outputDir, this.manifestName);
        }
        else {
            this.outputPath = this.manifestName;
        }
        return fs.promises.writeFile(this.outputPath, await componentSet.getPackageXml());
    }
    // noop this method because any errors will be reported by the createManifest method
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    resolveSuccess() { }
    formatResult() {
        if (!this.isJsonOutput()) {
            if (this.outputDir) {
                this.ux.log(messages.getMessage('successOutputDir', [this.manifestName, this.outputDir]));
            }
            else {
                this.ux.log(messages.getMessage('success', [this.manifestName]));
            }
        }
        return { path: this.outputPath, name: this.manifestName };
    }
}
exports.create = create;
create.description = messages.getMessage('description');
create.examples = messages.getMessage('examples').split(os.EOL);
create.requiresProject = true;
create.flagsConfig = {
    apiversion: command_1.flags.builtin({}),
    metadata: command_1.flags.array({
        char: 'm',
        description: messages.getMessage('flags.metadata'),
        exactlyOne: xorFlags,
    }),
    sourcepath: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('flags.sourcepath'),
        exactlyOne: xorFlags,
    }),
    manifestname: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('flags.manifestname'),
        exclusive: ['manifesttype'],
    }),
    manifesttype: command_1.flags.enum({
        description: messages.getMessage('flags.manifesttype'),
        options: Object.keys(manifestTypes),
        char: 't',
    }),
    includepackages: command_1.flags.array({
        description: messages.getMessage('flags.includepackages'),
        options: Object.keys(packageTypes),
        char: 'c',
        dependsOn: ['fromorg'],
    }),
    fromorg: command_1.flags.string({
        description: messages.getMessage('flags.fromorg'),
        exactlyOne: xorFlags,
    }),
    outputdir: command_1.flags.string({
        char: 'o',
        description: messages.getMessage('flags.outputdir'),
    }),
};
//# sourceMappingURL=create.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os_1 = require("os");
const core_1 = require("@salesforce/core");
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const mdDeployResultFormatter_1 = require("../../../../formatters/mdapi/mdDeployResultFormatter");
const deployCommand_1 = require("../../../../deployCommand");
const deployProgressBarFormatter_1 = require("../../../../formatters/deployProgressBarFormatter");
const deployProgressStatusFormatter_1 = require("../../../../formatters/deployProgressStatusFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'md.deployreport');
class Report extends deployCommand_1.DeployCommand {
    async run() {
        await this.doReport();
        this.resolveSuccess();
        return this.formatResult();
    }
    async doReport() {
        if (this.flags.verbose) {
            this.ux.log(messages.getMessage('usernameOutput', [this.org.getUsername()]));
        }
        const waitFlag = this.getFlag('wait');
        const waitDuration = waitFlag.minutes === -1 ? kit_1.Duration.days(7) : waitFlag;
        this.isAsync = waitDuration.quantity === 0;
        const deployId = this.resolveDeployId(this.getFlag('jobid'));
        this.resultsDir = this.resolveOutputDir(this.getFlag('coverageformatters', undefined), this.getFlag('junit'), this.getFlag('resultsdir'), deployId, false);
        if (this.isAsync) {
            this.deployResult = await this.report(deployId);
            return;
        }
        const deploy = this.createDeploy(deployId);
        if (!this.isJsonOutput()) {
            const progressFormatter = kit_1.env.getBoolean('SFDX_USE_PROGRESS_BAR', true)
                ? new deployProgressBarFormatter_1.DeployProgressBarFormatter(this.logger, this.ux)
                : new deployProgressStatusFormatter_1.DeployProgressStatusFormatter(this.logger, this.ux);
            progressFormatter.progress(deploy);
        }
        try {
            this.displayDeployId(deployId);
            this.deployResult = await deploy.pollStatus({ frequency: kit_1.Duration.milliseconds(500), timeout: waitDuration });
        }
        catch (error) {
            if (error instanceof Error && error.message.includes('The client has timed out')) {
                this.logger.debug('mdapi:deploy:report polling timed out. Requesting status...');
                this.deployResult = await this.report(deployId);
            }
            else {
                throw error;
            }
        }
    }
    // this is different from the source:report uses report error codes (unfortunately)
    // See https://github.com/salesforcecli/toolbelt/blob/bfe361b0fb901b05c194a27a85849c689f4f6fea/src/lib/mdapi/mdapiDeployReportApi.ts#L413
    resolveSuccess() {
        var _a, _b;
        const StatusCodeMap = new Map([
            [source_deploy_retrieve_1.RequestStatus.Succeeded, 0],
            [source_deploy_retrieve_1.RequestStatus.Canceled, 1],
            [source_deploy_retrieve_1.RequestStatus.Failed, 1],
            [source_deploy_retrieve_1.RequestStatus.SucceededPartial, 68],
            [source_deploy_retrieve_1.RequestStatus.InProgress, 69],
            [source_deploy_retrieve_1.RequestStatus.Pending, 69],
            [source_deploy_retrieve_1.RequestStatus.Canceling, 69],
        ]);
        this.setExitCode((_b = StatusCodeMap.get((_a = this.deployResult.response) === null || _a === void 0 ? void 0 : _a.status)) !== null && _b !== void 0 ? _b : 1);
    }
    formatResult() {
        var _a, _b;
        const formatter = new mdDeployResultFormatter_1.MdDeployResultFormatter(this.logger, this.ux, {
            concise: this.getFlag('concise', false),
            verbose: this.getFlag('verbose', false),
            coverageOptions: this.getCoverageFormattersOptions(this.getFlag('coverageformatters', undefined)),
            junitTestResults: this.getFlag('junit', false),
            resultsDir: this.resultsDir,
            testsRan: !!((_b = (_a = this.deployResult) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.numberTestsTotal),
        }, this.deployResult);
        this.maybeCreateRequestedReports();
        // Only display results to console when JSON flag is unset.
        if (!this.isJsonOutput()) {
            formatter.display(true);
        }
        return formatter.getJson();
    }
}
exports.Report = Report;
Report.aliases = ['force:mdapi:beta:deploy:report'];
Report.description = messages.getMessage('description');
Report.examples = messages.getMessage('examples').split(os_1.EOL);
Report.requiresUsername = true;
Report.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        default: kit_1.Duration.minutes(0),
        min: kit_1.Duration.minutes(-1),
        description: messages.getMessage('flags.wait'),
        longDescription: messages.getMessage('flagsLong.wait'),
    }),
    jobid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('flags.jobId'),
        longDescription: messages.getMessage('flagsLong.jobId'),
        validate: deployCommand_1.DeployCommand.isValidDeployId,
    }),
    verbose: command_1.flags.builtin({
        description: messages.getMessage('flags.verbose'),
        longDescription: messages.getMessage('flagsLong.verbose'),
    }),
    concise: command_1.flags.builtin({
        description: messages.getMessage('flags.concise'),
    }),
    resultsdir: command_1.flags.directory({
        description: messages.getMessage('flags.resultsDir'),
    }),
    coverageformatters: command_1.flags.array({
        description: messages.getMessage('flags.coverageFormatters'),
        options: deployCommand_1.reportsFormatters,
        helpValue: deployCommand_1.reportsFormatters.join(','),
    }),
    junit: command_1.flags.boolean({ description: messages.getMessage('flags.junit') }),
};
//# sourceMappingURL=report.js.map
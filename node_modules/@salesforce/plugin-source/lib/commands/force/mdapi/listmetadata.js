"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListMetadata = void 0;
const os = require("os");
const fs = require("fs");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const sourceCommand_1 = require("../../../sourceCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'md.list');
class ListMetadata extends sourceCommand_1.SourceCommand {
    async run() {
        await this.list();
        this.resolveSuccess();
        return this.formatResult();
    }
    async list() {
        const apiversion = this.getFlag('apiversion');
        const type = this.getFlag('metadatatype');
        const folder = this.getFlag('folder');
        const resultfile = this.getFlag('resultfile');
        if (resultfile) {
            this.targetFilePath = this.ensureFlagPath({ flagName: 'resultfile', path: resultfile, type: 'file' });
        }
        const query = { type };
        if (folder) {
            query.folder = folder;
        }
        const connection = this.org.getConnection();
        const result = (await connection.metadata.list(query, apiversion)) || [];
        this.listResult = Array.isArray(result) ? result : [result];
    }
    // No-op implementation since any list metadata status would be a success.
    // The only time this command would report an error is if it failed
    // flag parsing or some error during the request, and those are captured
    // by the command framework.
    /* eslint-disable-next-line @typescript-eslint/no-empty-function */
    resolveSuccess() { }
    formatResult() {
        if (this.targetFilePath) {
            fs.writeFileSync(this.targetFilePath, JSON.stringify(this.listResult, null, 2));
            this.ux.log(`Wrote result file to ${this.targetFilePath}.`);
        }
        else if (!this.isJsonOutput()) {
            if (this.listResult.length) {
                this.ux.styledJSON(this.listResult);
            }
            else {
                this.ux.log(messages.getMessage('noMatchingMetadata', [this.getFlag('metadatatype'), this.org.getUsername()]));
            }
        }
        return this.listResult;
    }
}
exports.ListMetadata = ListMetadata;
ListMetadata.description = messages.getMessage('description');
ListMetadata.examples = messages.getMessage('examples').split(os.EOL);
ListMetadata.requiresUsername = true;
ListMetadata.flagsConfig = {
    apiversion: command_1.flags.builtin({
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore force char override for backward compat
        char: 'a',
        description: messages.getMessage('flags.apiversion'),
        longDescription: messages.getMessage('flagsLong.apiversion'),
    }),
    resultfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('flags.resultfile'),
        longDescription: messages.getMessage('flagsLong.resultfile'),
    }),
    metadatatype: command_1.flags.string({
        char: 'm',
        description: messages.getMessage('flags.metadatatype'),
        longDescription: messages.getMessage('flagsLong.metadatatype'),
        required: true,
    }),
    folder: command_1.flags.string({
        description: messages.getMessage('flags.folder'),
        longDescription: messages.getMessage('flagsLong.folder'),
    }),
};
//# sourceMappingURL=listmetadata.js.map
import { UX } from '@salesforce/command';
import { ChangeResult, SourceTracking, SourceTrackingOptions } from '@salesforce/source-tracking';
import { ComponentSet, DeployResult, FileResponse, RetrieveResult } from '@salesforce/source-deploy-retrieve';
interface TrackingSetupRequest extends SourceTrackingOptions {
    ignoreConflicts: boolean;
    ux: UX;
    commandName: string;
}
interface TrackingUpdateRequest {
    tracking: SourceTracking;
    result: DeployResult | RetrieveResult;
    ux: UX;
    /**
     * We don't want to get the fileResponses if there have been deletes (SDR will throw)
     * You can also pass this in if your command already ran getFileResponses and you want to avoid the perf hit from doing it twice
     */
    fileResponses?: FileResponse[];
}
/**
 * Check if any conflicts exist in a specific component set.
 * If conflicts exist, this will output the table and throw
 */
export declare const filterConflictsByComponentSet: ({ tracking, components, ux, }: {
    tracking: SourceTracking;
    components: ComponentSet;
    ux: UX;
}) => Promise<ChangeResult[]>;
/**
 * Init SourceTracking (STL) and do conflict detection
 *
 * @param options
 * @returns SourceTracking
 */
export declare const trackingSetup: (options: TrackingSetupRequest) => Promise<SourceTracking>;
/**
 * Shared function for taking a Deploy/Retrieve result and handle the source tracking updates
 *
 * @param options
 */
export declare const updateTracking: ({ tracking, result, ux, fileResponses }: TrackingUpdateRequest) => Promise<void>;
export {};

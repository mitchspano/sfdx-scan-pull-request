"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployProgressStatusFormatter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const chalk = require("chalk");
const ts_types_1 = require("@salesforce/ts-types");
const kit_1 = require("@salesforce/kit");
const progressFormatter_1 = require("./progressFormatter");
class DeployProgressStatusFormatter extends progressFormatter_1.ProgressFormatter {
    constructor(logger, ux) {
        super(logger, ux);
        this.previousComponents = -1;
        this.previousTests = -1;
    }
    // This can be used to print the progress of the deployment.
    progress(deploy) {
        deploy.onUpdate((data) => {
            // Printing status only when number of components or tests gets changed in progress.
            if (data.numberComponentsDeployed > this.previousComponents || data.numberTestsCompleted > this.previousTests) {
                this.printDeployStatus(data);
                this.previousComponents = data.numberComponentsDeployed;
                this.previousTests = data.numberTestsCompleted;
            }
        });
        deploy.onFinish((data) => {
            this.printDeployStatus(data.response);
        });
        deploy.onError((error) => {
            throw error;
        });
    }
    // Prints Deploying status
    printDeployStatus(data) {
        if (!data.done) {
            this.ux.log('');
            this.ux.styledHeader(chalk.yellow(`Status: ${data.status}`));
            this.ux.log('');
        }
        else {
            if (data.completedDate) {
                const deployStart = new Date(data.createdDate).getTime();
                const deployEnd = new Date(data.completedDate).getTime();
                const duration = kit_1.Duration.seconds((deployEnd - deployStart) / 1000);
                this.ux.log(`Deployment finished in ${duration.toString()} `);
            }
            this.ux.log('');
            const header = data.success ? chalk.green(`Result: ${data.status}`) : chalk.red(`Result: ${data.status}`);
            this.ux.styledHeader(header);
            this.ux.log('');
        }
        const componentsTotal = (0, ts_types_1.getNumber)(data, 'numberComponentsTotal');
        if (componentsTotal) {
            const componentsDeployed = (0, ts_types_1.getNumber)(data, 'numberComponentsDeployed');
            const componentErrors = (0, ts_types_1.getNumber)(data, 'numberComponentErrors');
            const testsTotal = (0, ts_types_1.getNumber)(data, 'numberTestsTotal');
            const testsCompleted = (0, ts_types_1.getNumber)(data, 'numberTestsCompleted');
            const testErrors = (0, ts_types_1.getNumber)(data, 'numberTestErrors');
            const deploys = `${componentsDeployed}/${componentsTotal} components deployed.`;
            const deployErrors = componentErrors === 1 ? `${componentErrors} error.` : `${componentErrors} errors.`;
            const tests = `${testsCompleted}/${testsTotal} tests completed.`;
            const testErrs = testErrors === 1 ? `${testErrors} error.` : `${testErrors} errors.`;
            this.ux.log(`${deploys} ${deployErrors}`);
            this.ux.log(`${tests} ${testErrs}`);
        }
        else {
            this.ux.log('No components deployed');
        }
        this.ux.log('');
    }
}
exports.DeployProgressStatusFormatter = DeployProgressStatusFormatter;
//# sourceMappingURL=deployProgressStatusFormatter.js.map
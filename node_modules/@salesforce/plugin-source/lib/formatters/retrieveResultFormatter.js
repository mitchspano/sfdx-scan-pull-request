"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieveResultFormatter = void 0;
const chalk_1 = require("chalk");
const ts_types_1 = require("@salesforce/ts-types");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const retrieveFormatter_1 = require("./retrieveFormatter");
class RetrieveResultFormatter extends retrieveFormatter_1.RetrieveFormatter {
    constructor(logger, ux, options, result) {
        super(logger, ux, options, result);
        this.packages = [];
        this.fileResponses = (result === null || result === void 0 ? void 0 : result.getFileResponses) ? result.getFileResponses() : [];
        this.packages = options.packages || [];
    }
    /**
     * Get the JSON output from the RetrieveResult.
     *
     * @returns RetrieveCommandResult
     */
    getJson() {
        return {
            inboundFiles: this.fileResponses,
            packages: this.packages,
            warnings: this.warnings,
            response: this.result,
        };
    }
    /**
     * Displays retrieve results in human format.
     */
    display() {
        if (this.hasStatus(source_deploy_retrieve_1.RequestStatus.InProgress)) {
            const commandWaitTime = (0, ts_types_1.getNumber)(this.options, 'waitTime', 33);
            this.ux.log(this.messages.getMessage('retrieveTimeout', [commandWaitTime]));
            return;
        }
        if (this.isSuccess()) {
            this.ux.styledHeader((0, chalk_1.blue)(this.messages.getMessage('retrievedSourceHeader')));
            const retrievedFiles = this.fileResponses.filter((fr) => fr.state !== source_deploy_retrieve_1.ComponentStatus.Failed);
            if (retrievedFiles === null || retrievedFiles === void 0 ? void 0 : retrievedFiles.length) {
                this.displaySuccesses(retrievedFiles);
            }
            else {
                this.ux.log(this.messages.getMessage('NoResultsFound'));
            }
            if (this.warnings.length) {
                this.displayWarnings();
            }
        }
        else {
            this.displayErrors();
        }
        // Display any package retrievals
        if (this.packages && this.packages.length) {
            this.ux.log('');
            this.ux.styledHeader((0, chalk_1.blue)('Retrieved Packages'));
            this.packages.forEach((pkg) => {
                this.ux.log(`${pkg.name} package converted and retrieved to: ${pkg.path}`);
            });
            this.ux.log('');
        }
    }
    displaySuccesses(retrievedFiles) {
        this.sortFileResponses(retrievedFiles);
        this.asRelativePaths(retrievedFiles);
        this.ux.table(retrievedFiles, {
            fullName: { header: 'FULL NAME' },
            type: { header: 'TYPE' },
            filePath: { header: 'PROJECT PATH' },
        });
    }
}
exports.RetrieveResultFormatter = RetrieveResultFormatter;
//# sourceMappingURL=retrieveResultFormatter.js.map
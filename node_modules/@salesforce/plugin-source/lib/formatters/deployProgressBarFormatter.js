"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployProgressBarFormatter = void 0;
const kit_1 = require("@salesforce/kit");
const core_1 = require("@oclif/core");
const progressFormatter_1 = require("./progressFormatter");
class DeployProgressBarFormatter extends progressFormatter_1.ProgressFormatter {
    constructor(logger, ux) {
        super(logger, ux);
    }
    // displays the progress of the Deployment
    progress(deploy) {
        this.initProgressBar();
        const startProgressBar = (0, kit_1.once)((componentTotal) => {
            this.progressBar.start(componentTotal);
        });
        deploy.onUpdate((data) => {
            // the numCompTot. isn't computed right away, wait to start until we know how many we have
            const total = data.numberComponentsTotal + data.numberTestsTotal;
            if (data.numberComponentsTotal) {
                startProgressBar(total);
                this.progressBar.update(data.numberComponentsDeployed + data.numberTestsCompleted);
            }
            // the numTestsTot. isn't computed until validated as tests by the server, update the PB once we know
            if (data.numberTestsTotal && data.numberComponentsTotal) {
                this.progressBar.setTotal(total);
            }
        });
        // any thing else should stop the progress bar
        deploy.onFinish((data) => {
            // the final tick of `onUpdate` is actually fired with `onFinish`
            const deployed = data.response.numberComponentsDeployed + data.response.numberTestsCompleted;
            // in cases when deploying only an object's customfields, without the custom object (think MPD)
            // the server initially returns the number of customfields (n) + 1 - but once the deploy has finished
            // it calculates the correct number of fields deployed n, and so we are left with a progress bar at n/(n+1)
            // so if the progress bar total is different from what was actually deployed, set the total to be accurate
            if (this.progressBar.total !== deployed) {
                this.progressBar.setTotal(deployed);
            }
            this.progressBar.update(deployed);
            this.progressBar.stop();
        });
        deploy.onCancel(() => {
            this.progressBar.stop();
        });
        deploy.onError((error) => {
            this.progressBar.stop();
            throw error;
        });
    }
    // used to initialize the progress bar
    initProgressBar() {
        this.logger.debug('initializing progress bar');
        this.progressBar = core_1.CliUx.ux.progress({
            format: 'DEPLOY PROGRESS | {bar} | {value}/{total} Components',
            barCompleteChar: '\u2588',
            barIncompleteChar: '\u2591',
            linewrap: true,
        });
    }
}
exports.DeployProgressBarFormatter = DeployProgressBarFormatter;
//# sourceMappingURL=deployProgressBarFormatter.js.map
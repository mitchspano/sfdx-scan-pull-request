"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieveFormatter = void 0;
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const resultFormatter_1 = require("./resultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
class RetrieveFormatter extends resultFormatter_1.ResultFormatter {
    constructor(logger, ux, options, result) {
        var _a, _b;
        super(logger, ux, options);
        this.options = options;
        this.messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'retrieve');
        // zipFile can become massive and unwieldy with JSON parsing/terminal output and, isn't useful
        delete result.response.zipFile;
        this.result = result.response;
        // grab warnings
        this.warnings = (0, resultFormatter_1.toArray)((_b = (_a = result === null || result === void 0 ? void 0 : result.response) === null || _a === void 0 ? void 0 : _a.messages) !== null && _b !== void 0 ? _b : []);
    }
    hasStatus(status) {
        var _a;
        return ((_a = this.result) === null || _a === void 0 ? void 0 : _a.status) === status;
    }
    displayWarnings() {
        this.ux.styledHeader((0, chalk_1.yellow)(this.messages.getMessage('retrievedSourceWarningsHeader')));
        this.ux.table(this.warnings, { fileName: { header: 'FILE NAME' }, problem: { header: 'PROBLEM' } });
        this.ux.log();
    }
    displayErrors() {
        // an invalid packagename retrieval will end up with a message in the `errorMessage` entry
        const errorMessage = (0, ts_types_1.get)(this.result, 'errorMessage');
        if (errorMessage) {
            throw new core_1.SfError(errorMessage);
        }
        const unknownMsg = [{ fileName: 'unknown', problem: 'unknown' }];
        const responseMsgs = (0, ts_types_1.get)(this.result, 'messages', unknownMsg);
        const errMsgs = (0, resultFormatter_1.toArray)(responseMsgs);
        const errMsgsForDisplay = errMsgs.reduce((p, c) => `${p}\n${c.fileName}: ${c.problem}`, '');
        this.ux.log(`Retrieve Failed due to: ${errMsgsForDisplay}`);
    }
}
exports.RetrieveFormatter = RetrieveFormatter;
//# sourceMappingURL=retrieveFormatter.js.map
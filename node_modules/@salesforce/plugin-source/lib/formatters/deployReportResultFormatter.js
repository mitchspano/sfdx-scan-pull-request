"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployReportResultFormatter = void 0;
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const ts_types_1 = require("@salesforce/ts-types");
const core_1 = require("@salesforce/core");
const deployResultFormatter_1 = require("./deployResultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
class DeployReportResultFormatter extends deployResultFormatter_1.DeployResultFormatter {
    display() {
        const status = (0, ts_types_1.getString)(this, 'result.response.status', 'unknown');
        this.ux.log(`Status: ${status}`);
        if (!this.isVerbose()) {
            const componentsTotal = this.getNumResult('numberComponentsTotal');
            if (componentsTotal) {
                const componentsDeployed = this.getNumResult('numberComponentsDeployed');
                const componentErrors = this.getNumResult('numberComponentErrors');
                const testsTotal = this.getNumResult('numberTestsTotal');
                const testsCompleted = this.getNumResult('numberTestsCompleted');
                const testErrors = this.getNumResult('numberTestErrors');
                // We can do the below, or maybe something like:
                //   Components deployed: 12/70/2 | Tests Run: 4/33/0
                const deploys = `Deployed: ${componentsDeployed}/${componentsTotal}`;
                const deployErrors = `Errors: ${componentErrors}`;
                const tests = `Tests Complete: ${testsCompleted}/${testsTotal}`;
                const testErrs = `Errors: ${testErrors}`;
                this.ux.log(`${deploys} ${deployErrors}`);
                this.ux.log(`${tests} ${testErrs}`);
                this.displayOutputFileLocations();
            }
            else {
                this.ux.log('No components deployed');
            }
        }
        else {
            this.displaySuccesses();
            this.displayFailures();
            this.displayTestResults();
            this.displayOutputFileLocations();
        }
        if (status === source_deploy_retrieve_1.RequestStatus.Failed) {
            const messages = core_1.Messages.load('@salesforce/plugin-source', 'report', ['mdapiDeployFailed']);
            throw new core_1.SfError(messages.getMessage('mdapiDeployFailed'), 'mdapiDeployFailed');
        }
        return;
    }
}
exports.DeployReportResultFormatter = DeployReportResultFormatter;
//# sourceMappingURL=deployReportResultFormatter.js.map
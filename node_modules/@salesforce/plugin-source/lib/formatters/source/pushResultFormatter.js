"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushResultFormatter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const chalk = require("chalk");
const core_1 = require("@salesforce/core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const ts_types_1 = require("@salesforce/ts-types");
const resultFormatter_1 = require("../resultFormatter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-source', 'push');
class PushResultFormatter extends resultFormatter_1.ResultFormatter {
    constructor(logger, ux, options, results, 
    // if your push included deletes that are bundle subcomponents, we'll need to add those deletes to the results even though they aren't included in fileResponses
    deletes = []) {
        super(logger, ux, options);
        this.results = results;
        this.deletes = deletes;
        this.fileResponses = this.correctFileResponses();
    }
    /**
     * Get the JSON output from the DeployResult.
     *
     * @returns a JSON formatted result matching the provided type.
     */
    getJson() {
        // throws a particular json structure.  commandName property will be appended by sfdxCommand when this throws
        if (process.exitCode !== 0) {
            const error = new core_1.SfError(messages.getMessage('sourcepushFailed'), 'DeployFailed', [], process.exitCode);
            const errorData = this.fileResponses.filter((fileResponse) => fileResponse.state === source_deploy_retrieve_1.ComponentStatus.Failed);
            error.setData(errorData);
            error['result'] = errorData;
            // partial success
            if (process.exitCode === 69) {
                error['partialSuccess'] = this.fileResponses.filter((fileResponse) => fileResponse.state !== source_deploy_retrieve_1.ComponentStatus.Failed);
            }
            throw error;
        }
        // quiet returns only failures
        const toReturn = this.isQuiet()
            ? this.fileResponses.filter((fileResponse) => fileResponse.state === source_deploy_retrieve_1.ComponentStatus.Failed)
            : this.fileResponses;
        return {
            pushedSource: toReturn.map(({ state, fullName, type, filePath }) => ({ state, fullName, type, filePath })),
        };
    }
    /**
     * Displays deploy results in human readable format.  Output can vary based on:
     *
     * 1. Verbose option
     * 3. Checkonly deploy (checkonly=true)
     * 4. Deploy with test results
     * 5. Canceled status
     */
    display() {
        this.displaySuccesses();
        this.displayFailures();
        // Throw a DeployFailed error unless the deployment was successful.
        if (!this.isSuccess()) {
            throw new core_1.SfError(messages.getMessage('sourcepushFailed'), 'PushFailed');
        }
    }
    correctFileResponses() {
        const withoutUnchanged = this.results.some((result) => result.getFileResponses().length)
            ? this.results.flatMap((result) => result.getFileResponses().filter((fileResponse) => fileResponse.state !== 'Unchanged'))
            : [];
        if (!this.deletes.length) {
            return withoutUnchanged;
        }
        const bundlesDeployed = withoutUnchanged.filter((fileResponse) => ['LightningComponentBundle', 'AuraDefinitionBundle', 'WaveTemplateBundle'].includes(fileResponse.type));
        if (bundlesDeployed.length === 0) {
            return withoutUnchanged;
        }
        // "content" property of the bundles as a string
        const contentFilePathFromDeployedBundles = this.componentsFromFilenames(bundlesDeployed.map((fileResponse) => fileResponse.filePath))
            .map((c) => c.content)
            .filter(ts_types_1.isString);
        // there may be deletes not represented in the file responses (if bundle type)
        const resolver = new source_deploy_retrieve_1.MetadataResolver(undefined, source_deploy_retrieve_1.VirtualTreeContainer.fromFilePaths(this.deletes));
        return this.deletes
            .map((filePath) => {
            var _a;
            const cmp = this.resolveComponentsOrWarn(filePath, resolver)[0];
            if (cmp instanceof source_deploy_retrieve_1.SourceComponent &&
                ((_a = cmp.type.strategies) === null || _a === void 0 ? void 0 : _a.adapter) === 'bundle' &&
                contentFilePathFromDeployedBundles.includes((0, path_1.resolve)(cmp.content))) {
                return {
                    state: source_deploy_retrieve_1.ComponentStatus.Deleted,
                    fullName: cmp.fullName,
                    type: cmp.type.name,
                    filePath,
                };
            }
        })
            .filter((fileResponse) => fileResponse)
            .concat(withoutUnchanged);
    }
    displaySuccesses() {
        var _a;
        if (this.isQuiet()) {
            return;
        }
        if (this.isSuccess() && ((_a = this.fileResponses) === null || _a === void 0 ? void 0 : _a.length)) {
            const successes = this.fileResponses.filter((f) => f.state !== 'Failed');
            if (!successes.length) {
                return;
            }
            this.sortFileResponses(successes);
            this.asRelativePaths(successes);
            this.ux.log('');
            this.ux.styledHeader(chalk.blue('Pushed Source'));
            this.ux.table(successes, {
                state: { header: 'STATE' },
                fullName: { header: 'FULL NAME' },
                type: { header: 'TYPE' },
                filePath: { header: 'PROJECT PATH' },
            });
        }
    }
    displayFailures() {
        var _a, _b;
        const failures = [];
        const fileResponseFailures = new Map();
        if ((_a = this.fileResponses) === null || _a === void 0 ? void 0 : _a.length) {
            const fileResponses = [];
            this.fileResponses
                .filter((f) => f.state === 'Failed')
                .map((f) => {
                fileResponses.push(f);
                fileResponseFailures.set(`${f.type}#${f.fullName}`, f.error);
            });
            this.sortFileResponses(fileResponses);
            this.asRelativePaths(fileResponses);
            failures.push(...fileResponses);
        }
        const deployMessages = (_b = this.results) === null || _b === void 0 ? void 0 : _b.flatMap((result) => { var _a, _b; return (0, resultFormatter_1.toArray)((_b = (_a = result.response) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.componentFailures); });
        if (deployMessages.length > failures.length) {
            // if there's additional failures in the API response, find the failure and add it to the output
            deployMessages.map((deployMessage) => {
                if (!fileResponseFailures.has(`${deployMessage.componentType}#${deployMessage.fullName}`)) {
                    // duplicate the problem message to the error property for displaying in the table
                    failures.push(Object.assign(deployMessage, { error: deployMessage.problem }));
                }
            });
        }
        if (!failures.length) {
            return;
        }
        this.ux.log('');
        this.ux.styledHeader(chalk.red(`Component Failures [${failures.length}]`));
        this.ux.table(failures, {
            problemType: { header: 'Type' },
            fullName: { header: 'Name' },
            error: { header: 'Problem' },
        });
        this.ux.log('');
    }
    componentsFromFilenames(filenames) {
        const resolver = new source_deploy_retrieve_1.MetadataResolver(undefined, source_deploy_retrieve_1.VirtualTreeContainer.fromFilePaths(filenames));
        return filenames
            .flatMap((filename) => this.resolveComponentsOrWarn(filename, resolver))
            .filter((cmp) => cmp instanceof source_deploy_retrieve_1.SourceComponent);
    }
    resolveComponentsOrWarn(filename, resolver) {
        try {
            return resolver.getComponentsFromPath(filename);
        }
        catch (e) {
            this.logger.warn(`unable to resolve ${filename}`);
            return [];
        }
    }
}
exports.PushResultFormatter = PushResultFormatter;
//# sourceMappingURL=pushResultFormatter.js.map
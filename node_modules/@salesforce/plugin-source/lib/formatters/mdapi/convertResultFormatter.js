"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertResultFormatter = void 0;
const path = require("path");
const resultFormatter_1 = require("../resultFormatter");
class ConvertResultFormatter extends resultFormatter_1.ResultFormatter {
    constructor(logger, ux, result) {
        super(logger, ux);
        this.result = result;
    }
    getJson() {
        var _a;
        if (!this.convertResults) {
            this.convertResults = [];
            (_a = this.result) === null || _a === void 0 ? void 0 : _a.converted.forEach((component) => {
                if (component.xml) {
                    this.convertResults.push({
                        fullName: component.fullName,
                        type: component.type.name,
                        filePath: path.relative('.', component.xml),
                        state: 'Add',
                    });
                }
                if (component.content) {
                    this.convertResults.push({
                        fullName: component.fullName,
                        type: component.type.name,
                        filePath: path.relative('.', component.content),
                        state: 'Add',
                    });
                }
            });
        }
        return this.convertResults;
    }
    display() {
        const convertData = this.getJson();
        if (convertData === null || convertData === void 0 ? void 0 : convertData.length) {
            this.ux.table(convertData, {
                state: { header: 'STATE' },
                fullName: { header: 'FULL NAME' },
                type: { header: 'TYPE' },
                filePath: { header: 'PROJECT PATH' },
            });
        }
        else {
            this.ux.log('No metadata found to convert');
        }
    }
}
exports.ConvertResultFormatter = ConvertResultFormatter;
//# sourceMappingURL=convertResultFormatter.js.map
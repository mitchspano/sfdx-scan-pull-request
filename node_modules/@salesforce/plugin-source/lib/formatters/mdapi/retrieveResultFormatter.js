"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetrieveResultFormatter = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const chalk_1 = require("chalk");
const ts_types_1 = require("@salesforce/ts-types");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const retrieveFormatter_1 = require("../retrieveFormatter");
const resultFormatter_1 = require("../resultFormatter");
class RetrieveResultFormatter extends retrieveFormatter_1.RetrieveFormatter {
    constructor(logger, ux, options, result) {
        var _a;
        var _b;
        super(logger, ux, options, result);
        this.options = options;
        (_a = (_b = this.options).zipFileName) !== null && _a !== void 0 ? _a : (_b.zipFileName = 'unpackaged.zip');
        this.zipFilePath = (0, path_1.join)(options.retrieveTargetDir, options.zipFileName);
    }
    /**
     * Get the JSON output from the RetrieveResult.
     *
     * @returns RetrieveCommandResult
     */
    getJson() {
        return { ...this.result, zipFilePath: this.zipFilePath };
    }
    /**
     * Displays retrieve results in human format.
     */
    display() {
        if (this.hasStatus(source_deploy_retrieve_1.RequestStatus.InProgress)) {
            // The command timed out
            const commandWaitTime = (0, ts_types_1.getNumber)(this.options, 'waitTime', 1440);
            this.ux.log(this.messages.getMessage('retrieveTimeout', [commandWaitTime]));
            return;
        }
        if (this.isSuccess()) {
            this.ux.log(`Wrote retrieve zip to ${this.zipFilePath}`);
            if (this.options.unzip) {
                const extractPath = (0, path_1.join)(this.options.retrieveTargetDir, (0, path_1.parse)(this.options.zipFileName).name);
                this.ux.log(`Extracted ${this.options.zipFileName} to: ${extractPath}`);
            }
            if (this.options.verbose) {
                const retrievedFiles = (0, resultFormatter_1.toArray)(this.result.fileProperties);
                if (retrievedFiles === null || retrievedFiles === void 0 ? void 0 : retrievedFiles.length) {
                    this.displaySuccesses(retrievedFiles);
                }
            }
            if (this.warnings.length) {
                this.displayWarnings();
            }
        }
        else {
            this.displayErrors();
        }
    }
    displaySuccesses(retrievedFiles) {
        this.sortFileProperties(retrievedFiles);
        this.ux.log('');
        this.ux.styledHeader((0, chalk_1.blue)(`Components Retrieved [${retrievedFiles.length}]`));
        this.ux.table(retrievedFiles, {
            type: { header: 'TYPE' },
            fileName: { header: 'FILE' },
            fullName: { header: 'NAME' },
            id: { header: 'ID' },
        });
    }
}
exports.RetrieveResultFormatter = RetrieveResultFormatter;
//# sourceMappingURL=retrieveResultFormatter.js.map
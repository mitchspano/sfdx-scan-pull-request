import { AsyncResult, ComponentSet, DeployResult, MetadataApiDeploy } from '@salesforce/source-deploy-retrieve';
import { PollingClient } from '@salesforce/core';
import { CoverageReporterOptions } from '@salesforce/apex-node';
import { SourceCommand } from './sourceCommand';
export declare type TestLevel = 'NoTestRun' | 'RunSpecifiedTests' | 'RunLocalTests' | 'RunAllTestsInOrg';
export declare const reportsFormatters: string[];
export declare abstract class DeployCommand extends SourceCommand {
    protected displayDeployId: (id: string) => void;
    protected isRest: boolean;
    protected isAsync: boolean;
    protected asyncDeployResult: AsyncResult;
    protected deployResult: DeployResult;
    protected resultsDir: string;
    protected updateDeployId: (id: string) => void;
    static isValidDeployId: (id: string) => boolean;
    /**
     * Request a report of an in-progress or completed deployment.
     *
     * @param id the Deploy ID of a deployment request
     * @returns DeployResult
     */
    protected report(id?: string): Promise<DeployResult>;
    /**
     * Checks the response status to determine whether the deploy was successful.
     * Async deploys are successful unless an error is thrown, which resolves as
     * unsuccessful in oclif.
     */
    protected resolveSuccess(): void;
    /**
     * This method is here to provide a workaround to stubbing a constructor in the tests.
     *
     * @param id
     */
    protected createDeploy(id?: string): MetadataApiDeploy;
    protected resolveDeployId(id?: string): string;
    protected isRestDeploy(): boolean;
    protected poll(deployId: string, options?: Partial<PollingClient.Options>): Promise<DeployResult>;
    protected deployRecentValidation(): Promise<DeployResult>;
    protected maybeCreateRequestedReports(): void;
    protected createCoverageReport(deployResult: DeployResult, formatters: string[], sourceDir: string, resultsDir: string): void;
    protected getCoverageFormattersOptions(formatters?: string[]): CoverageReporterOptions;
    protected createJunitResults(deployResult: DeployResult): void;
    protected resolveOutputDir(coverageFormatters: string[], junit: boolean, resultsDir: string, deployId: string, noThrow: boolean): string;
}
export declare const getVersionMessage: (action: 'Deploying' | 'Pushing', componentSet: ComponentSet, isRest: boolean) => string;

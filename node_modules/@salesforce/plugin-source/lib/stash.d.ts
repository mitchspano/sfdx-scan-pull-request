import { JsonMap, Optional } from '@salesforce/ts-types';
export declare type StashKey = keyof typeof Stash.KEYS;
export interface DeployData extends JsonMap {
    jobid: string;
}
export interface MdRetrieveData extends JsonMap {
    jobid: string;
    retrievetargetdir: string;
    zipfilename?: string;
    unzip?: boolean;
}
export declare type StashData = DeployData | MdRetrieveData;
export declare class Stash {
    static KEYS: {
        MDAPI_DEPLOY: string;
        MDAPI_RETRIEVE: string;
        SOURCE_DEPLOY: string;
    };
    private static instance;
    private static logger;
    private static keyMap;
    private constructor();
    /**
     * Returns the value for the given stash key.
     *
     * @param key The StashKey
     * @returns The stash value for the given key.
     */
    static get<T extends StashData>(key: StashKey): Optional<T>;
    /**
     * Returns the `StashKey` used by the Command.
     *
     * Within a command class you would typically call this as:
     *
     * `const stashEntry = Stash.get(Stash.getKey(this.id));`
     *
     * @param commandId The oclif Command.id.  E.g., `this.id`
     * @returns the `StashKey` to use for `Stash.get()` and `Stash.set()`
     */
    static getKey(commandId: string): StashKey;
    /**
     * Sets deploy/retrieve data in the stash.
     *
     * @param key the `StashKey` for setting stashed deploy/retrieve values
     * @param data the `StashData` to persist.
     */
    static set(key: StashKey, data: StashData): void;
    /**
     * Clears all stash file entries.
     */
    static clear(): void;
    private static init;
    private static getStashFile;
}

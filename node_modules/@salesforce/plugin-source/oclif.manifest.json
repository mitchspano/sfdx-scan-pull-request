{"version":"2.0.9","commands":{"force":{"id":"force","strict":true,"usage":"<%= command.id %> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","hidden":true,"aliases":[],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"}},"args":[]},"force:mdapi:convert":{"id":"force:mdapi:convert","description":"convert metadata from the Metadata API format into the source format\nConverts metadata retrieved via Metadata API into the source format used in Salesforce DX projects.\n\nTo use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using \"sfdx force:mdapi:convert\".\n\nTo convert files from the source format back to the metadata format, so that you can deploy them using \"sfdx force:mdapi:deploy\", run \"sfdx force:source:convert\".","strict":true,"usage":"<%= command.id %> -r <directory> [-d <directory>] [-p <array> | -x <string> | -m <array>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:mdapi:beta:convert"],"examples":["$ sfdx force:mdapi:convert -r path/to/metadata","$ sfdx force:mdapi:convert -r path/to/metadata -d path/to/outputdir"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"rootdir":{"name":"rootdir","type":"option","char":"r","description":"the root directory containing the Metadata API–formatted metadata","required":true,"multiple":false},"outputdir":{"name":"outputdir","type":"option","char":"d","description":"the output directory to store the source–formatted files","multiple":false},"manifest":{"name":"manifest","type":"option","char":"x","description":"file path to manifest (package.xml) of metadata types to convert.","multiple":false},"metadatapath":{"name":"metadatapath","type":"option","char":"p","description":"comma-separated list of metadata file paths to convert","multiple":false,"exclusive":["manifest","metadata"]},"metadata":{"name":"metadata","type":"option","char":"m","description":"comma-separated list of metadata component names to convert","multiple":false,"exclusive":["manifest","metadatapath"]}},"args":[],"requiresProject":true,"flagsConfig":{"rootdir":{"kind":"directory","char":"r","description":"the root directory containing the Metadata API–formatted metadata","longDescription":"The root directory that contains the metadata you retrieved using Metadata API.","required":true,"input":[],"multiple":false,"type":"option"},"outputdir":{"kind":"directory","char":"d","description":"the output directory to store the source–formatted files","longDescription":"The directory to store your files in after they’re converted to the source format. Can be an absolute or relative path.","input":[],"multiple":false,"type":"option"},"manifest":{"kind":"string","char":"x","description":"file path to manifest (package.xml) of metadata types to convert.","longDescription":"The complete path to the manifest (package.xml) file that specifies the metadata types to convert.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.","input":[],"multiple":false,"type":"option"},"metadatapath":{"kind":"array","char":"p","description":"comma-separated list of metadata file paths to convert","longDescription":"A comma-separated list of paths to the local metadata files to convert. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata. If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes.","exclusive":["manifest","metadata"],"input":[],"multiple":false,"type":"option"},"metadata":{"kind":"array","char":"m","description":"comma-separated list of metadata component names to convert","longDescription":"A comma-separated list of metadata component names to convert.","exclusive":["manifest","metadatapath"],"input":[],"multiple":false,"type":"option"}}},"force:mdapi:deploy":{"id":"force:mdapi:deploy","description":"deploy metadata to an org using Metadata API","strict":true,"usage":"<%= command.id %> [-d <directory>] [-w <minutes>] [-o] [-g] [-q <id> | -l NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg | -r <array> | -c] [-f <filepath>] [-s] [--soapdeploy] [--purgeondelete] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--concise] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:mdapi:beta:deploy"],"examples":["Return a job ID you can use to check the deploy status:","$ sfdx force:mdapi:deploy -d some/path","Deploy and poll for 1000 minutes:","$ sfdx force:mdapi:deploy -d some/path -w 1000","Deploy a ZIP file:","$ sfdx force:mdapi:deploy -f stuff.zip","Validate a deployment so the ID can be used for a quick deploy:","$ sfdx force:mdapi:deploy -d some/path -w 1000 -c --testlevel RunAllTestsInOrg","Quick deploy using a previously validated deployment:","$ sfdx force:mdapi:deploy -q MyValidatedId"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"checkonly":{"name":"checkonly","type":"boolean","char":"c","description":"validate deploy but don’t save to the org","allowNo":false},"deploydir":{"name":"deploydir","type":"option","char":"d","description":"root of directory tree of files to deploy","multiple":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes. Use -1 to wait indefinitely 0","multiple":false,"default":{"quantity":0,"unit":0}},"testlevel":{"name":"testlevel","type":"option","char":"l","description":"deployment testing level","helpValue":"(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)","multiple":false,"options":["NoTestRun","RunSpecifiedTests","RunLocalTests","RunAllTestsInOrg"]},"runtests":{"name":"runtests","type":"option","char":"r","description":"tests to run if --testlevel RunSpecifiedTests","multiple":false},"ignoreerrors":{"name":"ignoreerrors","type":"boolean","char":"o","description":"ignore any errors and do not roll back deployment","allowNo":false},"ignorewarnings":{"name":"ignorewarnings","type":"boolean","char":"g","description":"whether a warning will allow a deployment to complete successfully","allowNo":false},"validateddeployrequestid":{"name":"validateddeployrequestid","type":"option","char":"q","description":"request ID of the validated deployment to run a Quick Deploy","multiple":false,"exclusive":["testlevel","runtests","checkonly"]},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of deploy results","allowNo":false},"zipfile":{"name":"zipfile","type":"option","char":"f","description":"path to .zip file of metadata to deploy","multiple":false},"singlepackage":{"name":"singlepackage","type":"boolean","char":"s","description":"Indicates that the zip file points to a directory structure for a single package","allowNo":false},"soapdeploy":{"name":"soapdeploy","type":"boolean","description":"deploy metadata with SOAP API instead of REST API","allowNo":false},"purgeondelete":{"name":"purgeondelete","type":"boolean","description":"specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin","allowNo":false},"concise":{"name":"concise","type":"boolean","description":"omit success messages for smaller JSON output","allowNo":false},"resultsdir":{"name":"resultsdir","type":"option","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","multiple":false},"coverageformatters":{"name":"coverageformatters","type":"option","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","multiple":false},"junit":{"name":"junit","type":"boolean","description":"output JUnit test results","allowNo":false}},"args":[],"requiresUsername":true,"flagsConfig":{"checkonly":{"kind":"boolean","char":"c","description":"validate deploy but don’t save to the org","longDescription":"IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nValidates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.","allowNo":false,"type":"boolean"},"deploydir":{"kind":"directory","char":"d","description":"root of directory tree of files to deploy","longDescription":"The root of the directory tree that contains the files to deploy. The root must contain a valid package.xml file describing the entities in the directory structure. Required to initiate a deployment if you don’t use --zipfile. If you specify both --zipfile and --deploydir, a zip file of the contents of the --deploydir directory is written to the location specified by --zipfile.","exactlyOne":["zipfile","validateddeployrequestid","deploydir"],"input":[],"multiple":false,"type":"option"},"wait":{"kind":"minutes","char":"w","description":"wait time for command to finish in minutes. Use -1 to wait indefinitely 0","longDescription":"The number of minutes to wait for the command to complete. The default is 0 (returns immediately). 0","default":{"quantity":0,"unit":0},"min":-1,"input":[],"multiple":false,"type":"option"},"testlevel":{"kind":"enum","helpValue":"(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)","char":"l","description":"deployment testing level","longDescription":"Specifies which level of deployment tests to run. Valid values are:\nNoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\nRunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\nRunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.","options":["NoTestRun","RunSpecifiedTests","RunLocalTests","RunAllTestsInOrg"],"input":[],"multiple":false,"type":"option"},"runtests":{"kind":"array","char":"r","description":"tests to run if --testlevel RunSpecifiedTests","longDescription":"Lists the Apex classes containing the deployment tests to run. Use this parameter when you set --testlevel to RunSpecifiedTests.","input":[],"multiple":false,"type":"option"},"ignoreerrors":{"kind":"boolean","char":"o","description":"ignore any errors and do not roll back deployment","longDescription":"Ignores the deploy errors, and continues with the deploy operation. The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.","allowNo":false,"type":"boolean"},"ignorewarnings":{"kind":"boolean","char":"g","description":"whether a warning will allow a deployment to complete successfully","longDescription":"If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.\nThis field is available in API version 18.0 and later. Prior to version 18.0, there was no distinction between warnings and errors. All problems were treated as errors and prevented a successful deployment.","allowNo":false,"type":"boolean"},"validateddeployrequestid":{"kind":"id","char":"q","description":"request ID of the validated deployment to run a Quick Deploy","longDescription":"Specifies the ID of a package with recently validated components to run a Quick Deploy. Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run 'sfdx force:mdapi:deploy'. This flag sets the checkOnly='true' parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n1. The components have been validated successfully for the target environment within the last 10 days.\n2. As part of the validation, Apex tests in the target org have passed.\n3. Code coverage requirements are met.\n     - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n     - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.","exactlyOne":["zipfile","validateddeployrequestid","deploydir"],"exclusive":["testlevel","runtests","checkonly"],"input":[],"multiple":false,"type":"option"},"verbose":{"description":"verbose output of deploy results","longDescription":"Indicates that you want verbose output from the deploy operation.","type":"boolean","kind":"boolean","allowNo":false},"zipfile":{"kind":"filepath","char":"f","description":"path to .zip file of metadata to deploy","longDescription":"The path to the .zip file of metadata files to deploy. You must indicate this option or --deploydir.If you specify both --zipfile and --deploydir, a .zip file of the contents of the deploy directory is created at the path specified for the .zip file.","exactlyOne":["zipfile","validateddeployrequestid","deploydir"],"input":[],"multiple":false,"type":"option"},"singlepackage":{"kind":"boolean","char":"s","description":"Indicates that the zip file points to a directory structure for a single package","longDescription":"Indicates that the specified .zip file points to a directory structure for a single package. By default, the CLI assumes the directory is structured for a set of packages.","allowNo":false,"type":"boolean"},"soapdeploy":{"kind":"boolean","description":"deploy metadata with SOAP API instead of REST API","longDescription":"Deploy metadata with SOAP API instead of the default REST API. Because SOAP API has a lower .ZIP file size limit (400 MB uncompressed, 39 MB compressed), Salesforce recommends REST API deployment. This flag provides backwards compatibility with API version 50.0 and earlier when deploy used SOAP API by default.","allowNo":false,"type":"boolean"},"purgeondelete":{"kind":"boolean","description":"specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin","allowNo":false,"type":"boolean"},"concise":{"description":"omit success messages for smaller JSON output","type":"boolean","kind":"boolean","longDescription":"Emit brief command output to stdout.","allowNo":false},"resultsdir":{"kind":"directory","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","input":[],"multiple":false,"type":"option"},"coverageformatters":{"kind":"array","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","input":[],"multiple":false,"type":"option"},"junit":{"kind":"boolean","description":"output JUnit test results","allowNo":false,"type":"boolean"}}},"force:mdapi:describemetadata":{"id":"force:mdapi:describemetadata","description":"display details about the metadata types enabled for your org\nUse this information to identify the syntax needed for a <name> element in package.xml. The most recent API version is the default, or you can specify an older version.\n\nThe default target username is the admin user for the default scratch org. The username must have the Modify All Data permission or the Modify Metadata permission (Beta). For more information about permissions, see Salesforce Help.","strict":true,"usage":"<%= command.id %> [-f <filepath>] [-u <string>] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["$ sfdx force:mdapi:describemetadata -a 43.0","$ sfdx force:mdapi:describemetadata -u me@example.com","$ sfdx force:mdapi:describemetadata -f /path/to/outputfilename.txt","$ sfdx force:mdapi:describemetadata -u me@example.com -f /path/to/outputfilename.txt"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","char":"a","description":"API version to use","multiple":false},"resultfile":{"name":"resultfile","type":"option","char":"f","description":"path to the file where results are stored","multiple":false},"filterknown":{"name":"filterknown","type":"boolean","char":"k","description":"filter metadata known by the CLI","hidden":true,"allowNo":false}},"args":[],"requiresUsername":true,"flagsConfig":{"apiversion":{"char":"a","description":"API version to use","longDescription":"The API version to use. The default is the latest API version","type":"option","kind":"string","input":[],"multiple":false},"resultfile":{"kind":"filepath","char":"f","description":"path to the file where results are stored","longDescription":"The path to the file where the results of the command are stored. Directing the output to a file makes it easier to extract relevant information for your package.xml manifest file. The default output destination is the console.","input":[],"multiple":false,"type":"option"},"filterknown":{"kind":"boolean","char":"k","description":"filter metadata known by the CLI","longDescription":"Filters all the known metadata from the result such that all that is left are the types not yet fully supported by the CLI.","hidden":true,"allowNo":false,"type":"boolean"}}},"force:mdapi:listmetadata":{"id":"force:mdapi:listmetadata","description":"display properties of metadata components of a specified type\nThis command is useful when you want to identify individual components in your manifest file or if you want a high-level view of particular components in your organization. For example, you could use this target to return a list of names of all Layout components in your org, then use this information in a retrieve operation that returns a subset of these components.","strict":true,"usage":"<%= command.id %> -m <string> [-f <filepath>] [--folder <string>] [-u <string>] [-a <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["$ sfdx force:mdapi:listmetadata -m CustomObject","$ sfdx force:mdapi:listmetadata -m CustomObject -a 43.0","$ sfdx force:mdapi:listmetadata -m CustomObject -u me@example.com","$ sfdx force:mdapi:listmetadata -m CustomObject -f /path/to/outputfilename.txt","$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername","$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername -a 43.0","$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername -u me@example.com","$ sfdx force:mdapi:listmetadata -m Dashboard --folder foldername -f /path/to/outputfilename.txt","$ sfdx force:mdapi:listmetadata -m CustomObject -u me@example.com -f /path/to/outputfilename.txt"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","char":"a","description":"API version to use","multiple":false},"resultfile":{"name":"resultfile","type":"option","char":"f","description":"path to the file where results are stored","multiple":false},"metadatatype":{"name":"metadatatype","type":"option","char":"m","description":"metadata type to be retrieved, such as CustomObject; metadata type value is case-sensitive","required":true,"multiple":false},"folder":{"name":"folder","type":"option","description":"folder associated with the component; required for components that use folders; folder names are case-sensitive","multiple":false}},"args":[],"requiresUsername":true,"flagsConfig":{"apiversion":{"char":"a","description":"API version to use","longDescription":"The API version to use. The default is the latest API version","type":"option","kind":"string","input":[],"multiple":false},"resultfile":{"kind":"filepath","char":"f","description":"path to the file where results are stored","longDescription":"The path to the file where the results of the command are stored. The default output destination is the console.","input":[],"multiple":false,"type":"option"},"metadatatype":{"kind":"string","char":"m","description":"metadata type to be retrieved, such as CustomObject; metadata type value is case-sensitive","longDescription":"The metadata type to be retrieved, such as CustomObject or Report. The metadata type value is case-sensitive.","required":true,"input":[],"multiple":false,"type":"option"},"folder":{"kind":"string","description":"folder associated with the component; required for components that use folders; folder names are case-sensitive","longDescription":"The folder associated with the component. This parameter is required for components that use folders, such as Dashboard, Document, EmailTemplate, or Report. The folder name value is case-sensitive.","input":[],"multiple":false,"type":"option"}}},"force:mdapi:retrieve":{"id":"force:mdapi:retrieve","description":"retrieve metadata from an org using Metadata API\nUses Metadata API to retrieve a .zip of XML files that represent metadata from the targeted org. The default target username is the admin user for the default scratch org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.","strict":true,"usage":"<%= command.id %> -r <directory> [-k <filepath> | -d <directory> | -p <array>] [-s] [-n <string>] [-z] [-w <minutes>] [-u <string>] [-a <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:mdapi:beta:retrieve"],"examples":["Retrieve metadata in the default project directory into the target directory:","$ sfdx force:mdapi:retrieve -r path/to/retrieve/dir","Retrieve metadata defined in the specified manifest into the target directory:","$ sfdx force:mdapi:retrieve -r path/to/retrieve/dir -k package.xml","Retrieve metadata defined by the specified directory, name the retrieved zipfile and extract all contents","$ sfdx force:mdapi:retrieve -d path/to/apexClasses -r path/to/retrieve/dir --unzip --zipfilename apexClasses.zip","Enqueue a retrieve request but do not wait for the metadata to be retrieved:","$ sfdx force:mdapi:retrieve -r path/to/retrieve/dir --wait 0"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","char":"a","description":"target API version for the retrieve","multiple":false},"retrievetargetdir":{"name":"retrievetargetdir","type":"option","char":"r","description":"directory root for the retrieved files","required":true,"multiple":false},"unpackaged":{"name":"unpackaged","type":"option","char":"k","description":"file path of manifest of components to retrieve","multiple":false,"exclusive":["sourcedir","packagenames"]},"sourcedir":{"name":"sourcedir","type":"option","char":"d","description":"source dir to use instead of the default package dir in sfdx-project.json","multiple":false,"exclusive":["unpackaged","packagenames"]},"packagenames":{"name":"packagenames","type":"option","char":"p","description":"a comma-separated list of packages to retrieve","multiple":false,"exclusive":["sourcedir","unpackaged"]},"singlepackage":{"name":"singlepackage","type":"boolean","char":"s","description":"indicates that the zip file points to a directory structure for a single package","allowNo":false},"zipfilename":{"name":"zipfilename","type":"option","char":"n","description":"file name to use for the retrieved zip file","multiple":false},"unzip":{"name":"unzip","type":"boolean","char":"z","description":"extract all files from the retrieved zip file","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":1440,"unit":0}},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of retrieve result","allowNo":false}},"args":[],"requiresUsername":true,"flagsConfig":{"retrievetargetdir":{"kind":"directory","char":"r","description":"directory root for the retrieved files","longDescription":"The root of the directory structure where the retrieved .zip or metadata files are put.","required":true,"input":[],"multiple":false,"type":"option"},"unpackaged":{"kind":"filepath","char":"k","description":"file path of manifest of components to retrieve","longDescription":"The complete path for the manifest file that specifies the components to retrieve.","exclusive":["sourcedir","packagenames"],"input":[],"multiple":false,"type":"option"},"sourcedir":{"kind":"directory","char":"d","description":"source dir to use instead of the default package dir in sfdx-project.json","longDescription":"The source directory to use instead of the default package directory specified in sfdx-project.json","exclusive":["unpackaged","packagenames"],"input":[],"multiple":false,"type":"option"},"packagenames":{"kind":"array","char":"p","description":"a comma-separated list of packages to retrieve","longDescription":"A comma-separated list of package names to retrieve.","exclusive":["sourcedir","unpackaged"],"input":[],"multiple":false,"type":"option"},"singlepackage":{"kind":"boolean","char":"s","description":"indicates that the zip file points to a directory structure for a single package","longDescription":"Indicates that the specified .zip file points to a directory structure for a single package. By default, the CLI assumes the directory is structured for a set of packages.","allowNo":false,"type":"boolean"},"zipfilename":{"kind":"string","char":"n","description":"file name to use for the retrieved zip file","longDescription":"The file name to use for the retrieved zip file.","input":[],"multiple":false,"type":"option"},"unzip":{"kind":"boolean","char":"z","description":"extract all files from the retrieved zip file","longDescription":"Extract all files from the retrieved zip file.","allowNo":false,"type":"boolean"},"wait":{"kind":"minutes","char":"w","description":"wait time for command to finish in minutes","longDescription":"The number of minutes to wait for the command to complete.","default":{"quantity":1440,"unit":0},"input":[],"multiple":false,"type":"option"},"apiversion":{"char":"a","description":"target API version for the retrieve","longDescription":"Use to override the default, which is the latest version supported by your CLI plug-in, with the version in your package.xml file.","type":"option","kind":"string","input":[],"multiple":false},"verbose":{"description":"verbose output of retrieve result","longDescription":"Indicates that you want verbose output from the retrieve operation.","type":"boolean","kind":"boolean","allowNo":false}}},"force:source:convert":{"id":"force:source:convert","description":"convert source into Metadata API format \n Converts source-formatted files into metadata that you can deploy using Metadata API. \nTo convert source-formatted files into the metadata format, so that you can deploy them using Metadata API,\nrun \"sfdx force:source:convert\". Then deploy the metadata using \"sfdx force:mdapi:deploy\".\n\nTo convert Metadata API–formatted files into the source format, run \"sfdx force:mdapi:convert\".\n\nTo specify a package name that includes spaces, enclose the name in single quotes.","strict":true,"usage":"<%= command.id %> [-r <directory>] [-d <directory>] [-n <string>] [-p <array> | -x <string> | -m <array>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["$ sfdx force:source:convert -r path/to/source","$ sfdx force:source:convert -r path/to/source -d path/to/outputdir -n 'My Package'"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"rootdir":{"name":"rootdir","type":"option","char":"r","description":"a source directory other than the default package to convert","multiple":false},"outputdir":{"name":"outputdir","type":"option","char":"d","description":"output directory to store the Metadata API–formatted files in","multiple":false,"default":"metadataPackage_1658353427073"},"packagename":{"name":"packagename","type":"option","char":"n","description":"name of the package to associate with the metadata-formatted files","multiple":false},"manifest":{"name":"manifest","type":"option","char":"x","description":"file path to manifest (package.xml) of metadata types to convert.","multiple":false},"sourcepath":{"name":"sourcepath","type":"option","char":"p","description":"comma-separated list of paths to the local source files to convert","multiple":false,"exclusive":["manifest","metadata"]},"metadata":{"name":"metadata","type":"option","char":"m","description":"comma-separated list of metadata component names to convert","multiple":false,"exclusive":["manifest","sourcepath"]}},"args":[],"requiresProject":true,"flagsConfig":{"rootdir":{"kind":"directory","char":"r","description":"a source directory other than the default package to convert","input":[],"multiple":false,"type":"option"},"outputdir":{"kind":"directory","default":"metadataPackage_1658353427073","char":"d","description":"output directory to store the Metadata API–formatted files in","input":[],"multiple":false,"type":"option"},"packagename":{"kind":"string","char":"n","description":"name of the package to associate with the metadata-formatted files","input":[],"multiple":false,"type":"option"},"manifest":{"kind":"string","char":"x","description":"file path to manifest (package.xml) of metadata types to convert.","longDescription":"The complete path to the manifest (package.xml) file that specifies the metadata types to convert.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.","input":[],"multiple":false,"type":"option"},"sourcepath":{"kind":"array","char":"p","description":"comma-separated list of paths to the local source files to convert","longDescription":"A comma-separated list of paths to the local source files to convert. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.","exclusive":["manifest","metadata"],"input":[],"multiple":false,"type":"option"},"metadata":{"kind":"array","char":"m","description":"comma-separated list of metadata component names to convert","exclusive":["manifest","sourcepath"],"input":[],"multiple":false,"type":"option"}}},"force:source:delete":{"id":"force:source:delete","description":"delete source from your project and from a non-source-tracked org\nIMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nUse this command to delete components from orgs that don’t have source tracking.\nTo remove deleted items from scratch orgs, which have change tracking, use \"sfdx force:source:push\".","strict":true,"usage":"<%= command.id %> [-w <minutes>] [-l NoTestRun|RunLocalTests|RunAllTestsInOrg] [-r] [-m <array>] [-p <array>] [-f [-t | -c]] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["$ sfdx force:source:delete -m <metadata>","$ sfdx force:source:delete -p path/to/source"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"checkonly":{"name":"checkonly","type":"boolean","char":"c","description":"validate delete command but do not delete from the org or delete files locally","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":33,"unit":0}},"testlevel":{"name":"testlevel","type":"option","char":"l","description":"deployment testing level","helpValue":"(NoTestRun|RunLocalTests|RunAllTestsInOrg)","multiple":false,"options":["NoTestRun","RunLocalTests","RunAllTestsInOrg"],"default":"NoTestRun"},"noprompt":{"name":"noprompt","type":"boolean","char":"r","description":"do not prompt for delete confirmation","allowNo":false},"metadata":{"name":"metadata","type":"option","char":"m","description":"comma-separated list of names of metadata components to delete","multiple":false},"sourcepath":{"name":"sourcepath","type":"option","char":"p","description":"comma-separated list of source file paths to delete","multiple":false},"tracksource":{"name":"tracksource","type":"boolean","char":"t","description":"If the delete succeeds, update the source tracking information, similar to push","allowNo":false,"exclusive":["checkonly"]},"forceoverwrite":{"name":"forceoverwrite","type":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the org","allowNo":false,"dependsOn":["tracksource"]},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of delete result","allowNo":false}},"args":[],"requiresProject":true,"requiresUsername":true,"flagsConfig":{"checkonly":{"kind":"boolean","char":"c","description":"validate delete command but do not delete from the org or delete files locally","longDescription":"Validates the deleted metadata and runs all Apex tests, but prevents the deletion from being saved to the org. \nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deletion (validation). This kind of change isn’t supported for test deletions to avoid the risk of data loss or corruption. If a change that isn’t supported for test deletions is included in a deletion package, the test deletion fails and issues an error.\nIf your deletion package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deletion to another test Sandbox. A full deletion includes a validation of the changes as part of the deletion process.\nNote: A Metadata API deletion that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deletion with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to delete the Master-Detail field, or the deletion fails. During the deletion, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deletion that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deletion to succeed. However, a successful deletion permanently deletes any detail records in the Recycle Bin.","allowNo":false,"type":"boolean"},"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":1,"unit":0},"description":"wait time for command to finish in minutes","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you.","input":[],"multiple":false,"type":"option"},"testlevel":{"kind":"enum","helpValue":"(NoTestRun|RunLocalTests|RunAllTestsInOrg)","char":"l","description":"deployment testing level","longDescription":"Specifies which level of deployment tests to run. Valid values are:\nNoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\nRunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\nRunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.","options":["NoTestRun","RunLocalTests","RunAllTestsInOrg"],"default":"NoTestRun","input":[],"multiple":false,"type":"option"},"noprompt":{"kind":"boolean","char":"r","description":"do not prompt for delete confirmation","allowNo":false,"type":"boolean"},"metadata":{"kind":"array","char":"m","description":"comma-separated list of names of metadata components to delete","longDescription":"A comma-separated list of names of metadata components to delete from your project and your org.\nIf you specify this parameter, don’t specify --sourcepath.","exactlyOne":["metadata","sourcepath"],"input":[],"multiple":false,"type":"option"},"sourcepath":{"kind":"array","char":"p","description":"comma-separated list of source file paths to delete","longDescription":"A comma-separated list of paths to the local metadata to delete. The supplied paths can be a single file (in which case the operation is applied to only one file) or a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --metadata.","exactlyOne":["metadata","sourcepath"],"input":[],"multiple":false,"type":"option"},"tracksource":{"kind":"boolean","char":"t","description":"If the delete succeeds, update the source tracking information, similar to push","exclusive":["checkonly"],"allowNo":false,"type":"boolean"},"forceoverwrite":{"kind":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the org","dependsOn":["tracksource"],"allowNo":false,"type":"boolean"},"verbose":{"description":"verbose output of delete result","type":"boolean","kind":"boolean","longDescription":"Emit additional command output to stdout.","allowNo":false}}},"force:source:deploy":{"id":"force:source:deploy","description":"deploy source to an org\nIMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nUse this command to deploy source (metadata that’s in source format) to an org.\nTo take advantage of change tracking with scratch orgs, use \"sfdx force:source:push\".\nTo deploy metadata that’s in metadata format, use \"sfdx force:mdapi:deploy\".\n\nThe source you deploy overwrites the corresponding metadata in your org. This command does not attempt to merge your source with the versions in your org.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI.\nTo check the status of the job, use force:source:deploy:report.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose the entire list in one set of double quotes.\n If you use the --manifest, --predestructivechanges, or --postdestructivechanges parameters, run the force:source:manifest:create command to easily generate the different types of manifest files.","strict":true,"usage":"<%= command.id %> [--soapdeploy] [-w <minutes>] [-o] [-g] [--purgeondelete -x <filepath>] [-q <id> | -c | -l NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg | -r <array> | -t] [-m <array>] [-p <array>] [--predestructivechanges <filepath> ] [--postdestructivechanges <filepath> ] [-f ] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["To deploy the source files in a directory:","\t $ sfdx force:source:deploy -p path/to/source","To deploy a specific Apex class and the objects whose source is in a directory: ","\t$ sfdx force:source:deploy -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"","To deploy source files in a comma-separated list that contains spaces:","   $ sfdx force:source:deploy -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"","To deploy all Apex classes:","   $ sfdx force:source:deploy -m ApexClass","To deploy a specific Apex class:","   $ sfdx force:source:deploy -m ApexClass:MyApexClass","To deploy a specific Apex class and update source tracking files :","   $ sfdx force:source:deploy -m ApexClass:MyApexClass --tracksource","To deploy all custom objects and Apex classes:","   $ sfdx force:source:deploy -m \"CustomObject,ApexClass\"","To deploy all Apex classes and two specific profiles (one of which has a space in its name):","   $ sfdx force:source:deploy -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"","To deploy all components listed in a manifest:","   $ sfdx force:source:deploy -x path/to/package.xml","To run the tests that aren’t in any managed packages as part of a deployment:","   $ sfdx force:source:deploy -m ApexClass -l RunLocalTests","To check whether a deployment would succeed (to prepare for Quick Deploy):","   $ sfdx force:source:deploy -m ApexClass -l RunAllTestsInOrg -c","To deploy an already validated deployment (Quick Deploy):","    $ sfdx force:source:deploy -q 0Af9A00000FTM6pSAH`","To run a destructive operation before the deploy occurs:","    $ sfdx force:source:deploy --manifest package.xml --predestructivechanges destructiveChangesPre.xml","To run a destructive operation after the deploy occurs:","    $ sfdx force:source:deploy --manifest package.xml --postdestructivechanges destructiveChangesPost.xml"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"checkonly":{"name":"checkonly","type":"boolean","char":"c","description":"validate deploy but don’t save to the org","allowNo":false},"soapdeploy":{"name":"soapdeploy","type":"boolean","description":"deploy metadata with SOAP API instead of REST API","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":33,"unit":0}},"testlevel":{"name":"testlevel","type":"option","char":"l","description":"deployment testing level","helpValue":"(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)","multiple":false,"options":["NoTestRun","RunSpecifiedTests","RunLocalTests","RunAllTestsInOrg"]},"runtests":{"name":"runtests","type":"option","char":"r","description":"tests to run if --testlevel RunSpecifiedTests","multiple":false},"ignoreerrors":{"name":"ignoreerrors","type":"boolean","char":"o","description":"ignore any errors and do not roll back deployment","allowNo":false},"ignorewarnings":{"name":"ignorewarnings","type":"boolean","char":"g","description":"whether a warning will allow a deployment to complete successfully","allowNo":false},"purgeondelete":{"name":"purgeondelete","type":"boolean","description":"specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin","allowNo":false,"dependsOn":["manifest"]},"validateddeployrequestid":{"name":"validateddeployrequestid","type":"option","char":"q","description":"deploy request ID of the validated deployment to run a Quick Deploy","multiple":false,"exclusive":["checkonly","testlevel","runtests","tracksource"]},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of deploy result","allowNo":false},"metadata":{"name":"metadata","type":"option","char":"m","description":"comma-separated list of metadata component names","multiple":false},"sourcepath":{"name":"sourcepath","type":"option","char":"p","description":"comma-separated list of source file paths to deploy","multiple":false},"manifest":{"name":"manifest","type":"option","char":"x","description":"file path for manifest (package.xml) of components to deploy","multiple":false},"predestructivechanges":{"name":"predestructivechanges","type":"option","description":"file path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy","multiple":false,"dependsOn":["manifest"]},"postdestructivechanges":{"name":"postdestructivechanges","type":"option","description":"file path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy","multiple":false,"dependsOn":["manifest"]},"tracksource":{"name":"tracksource","type":"boolean","char":"t","description":"if the deploy succeeds, update source tracking information; doesn't delete locally deleted files from org unless you also specify --predestructivechanges or --postdestructivechanges","allowNo":false,"exclusive":["checkonly","validateddeployrequestid"]},"forceoverwrite":{"name":"forceoverwrite","type":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the org","allowNo":false,"dependsOn":["tracksource"]},"resultsdir":{"name":"resultsdir","type":"option","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","multiple":false},"coverageformatters":{"name":"coverageformatters","type":"option","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","multiple":false},"junit":{"name":"junit","type":"boolean","description":"output JUnit test results","allowNo":false}},"args":[],"requiresProject":true,"requiresUsername":true,"flagsConfig":{"checkonly":{"kind":"boolean","char":"c","description":"validate deploy but don’t save to the org","longDescription":"Validates the deployed metadata and runs all Apex tests, but prevents the deployment from being saved to the org.\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --checkonly parameter to test a deployment (validation). This kind of change isn’t supported for test deployments to avoid the risk of data loss or corruption. If a change that isn’t supported for test deployments is included in a deployment package, the test deployment fails and issues an error.\nIf your deployment package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deployment to another test Sandbox. A full deployment includes a validation of the changes as part of the deployment process.\nNote: A Metadata API deployment that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n1. For a deployment with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to deploy the Master-Detail field, or the deployment fails. During the deployment, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n2. For a deployment that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deployment to succeed. However, a successful deployment permanently deletes any detail records in the Recycle Bin.","allowNo":false,"type":"boolean"},"soapdeploy":{"kind":"boolean","default":false,"description":"deploy metadata with SOAP API instead of REST API","allowNo":false,"type":"boolean"},"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":0,"unit":0},"description":"wait time for command to finish in minutes","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. ","input":[],"multiple":false,"type":"option"},"testlevel":{"kind":"enum","helpValue":"(NoTestRun|RunSpecifiedTests|RunLocalTests|RunAllTestsInOrg)","char":"l","description":"deployment testing level","longDescription":"Specifies which level of deployment tests to run. Valid values are:\n  NoTestRun—No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n  RunSpecifiedTests—Runs only the tests that you specify in the --runtests option. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n  RunLocalTests—All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n  RunAllTestsInOrg—All tests in your org are run, including tests of managed packages.\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.","options":["NoTestRun","RunSpecifiedTests","RunLocalTests","RunAllTestsInOrg"],"input":[],"multiple":false,"type":"option"},"runtests":{"kind":"array","char":"r","description":"tests to run if --testlevel RunSpecifiedTests","longDescription":"Lists the Apex classes containing the deployment tests to run. Use this parameter when you set --testlevel to RunSpecifiedTests.","input":[],"multiple":false,"type":"option"},"ignoreerrors":{"kind":"boolean","char":"o","description":"ignore any errors and do not roll back deployment","longDescription":"Ignores the deploy errors, and continues with the deploy operation. The default is false. Keep this parameter set to false when deploying to a production org. If set to true, components without errors are deployed, and components with errors are skipped.","allowNo":false,"type":"boolean"},"ignorewarnings":{"kind":"boolean","char":"g","description":"whether a warning will allow a deployment to complete successfully","longDescription":"If a warning occurs and ignoreWarnings is set to true, the success field in DeployMessage is true. When ignoreWarnings is set to false, success is set to false, and the warning is treated like an error.","allowNo":false,"type":"boolean"},"purgeondelete":{"kind":"boolean","description":"specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin","dependsOn":["manifest"],"allowNo":false,"type":"boolean"},"validateddeployrequestid":{"kind":"id","char":"q","description":"deploy request ID of the validated deployment to run a Quick Deploy","longDescription":"Specifies the ID of a package with recently validated components to run a Quick Deploy. Deploying a validation helps you shorten your deployment time because tests aren’t rerun. If you have a recent successful validation, you can deploy the validated components without running tests. A validation doesn’t save any components in the org. You use a validation only to check the success or failure messages that you would receive with an actual deployment. To validate your components, add the -c | --checkonly flag when you run \"sfdx force:mdapi:deploy\". This flag sets the checkOnly=\"true\" parameter for your deployment. Before deploying a recent validation, ensure that the following requirements are met:\n  1. The components have been validated successfully for the target environment within the last 10 days.\n  2. As part of the validation, Apex tests in the target org have passed.\n  3. Code coverage requirements are met.\n    - If all tests in the org or all local tests are run, overall code coverage is at least 75%, and Apex triggers have some coverage.\n    - If specific tests are run with the RunSpecifiedTests test level, each class and trigger that was deployed is covered by at least 75% individually.","exactlyOne":["manifest","metadata","sourcepath","validateddeployrequestid"],"exclusive":["checkonly","testlevel","runtests","tracksource"],"input":[],"multiple":false,"type":"option"},"verbose":{"description":"verbose output of deploy result","type":"boolean","kind":"boolean","longDescription":"Emit additional command output to stdout.","allowNo":false},"metadata":{"kind":"array","char":"m","description":"comma-separated list of metadata component names","longDescription":"A comma-separated list of names of metadata components to deploy to the org.\nIf you specify this parameter, don’t specify --manifest or --sourcepath.","exactlyOne":["manifest","metadata","sourcepath","validateddeployrequestid"],"input":[],"multiple":false,"type":"option"},"sourcepath":{"kind":"array","char":"p","description":"comma-separated list of source file paths to deploy","longDescription":"A comma-separated list of paths to the local source files to deploy. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.","exactlyOne":["manifest","metadata","sourcepath","validateddeployrequestid"],"input":[],"multiple":false,"type":"option"},"manifest":{"kind":"filepath","char":"x","description":"file path for manifest (package.xml) of components to deploy","longDescription":"The complete path for the manifest (package.xml) file that specifies the components to deploy. All child components are included.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.","exactlyOne":["manifest","metadata","sourcepath","validateddeployrequestid"],"input":[],"multiple":false,"type":"option"},"predestructivechanges":{"kind":"filepath","description":"file path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy","dependsOn":["manifest"],"input":[],"multiple":false,"type":"option"},"postdestructivechanges":{"kind":"filepath","description":"file path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy","dependsOn":["manifest"],"input":[],"multiple":false,"type":"option"},"tracksource":{"kind":"boolean","char":"t","description":"if the deploy succeeds, update source tracking information; doesn't delete locally deleted files from org unless you also specify --predestructivechanges or --postdestructivechanges","exclusive":["checkonly","validateddeployrequestid"],"allowNo":false,"type":"boolean"},"forceoverwrite":{"kind":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the org","dependsOn":["tracksource"],"allowNo":false,"type":"boolean"},"resultsdir":{"kind":"directory","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","input":[],"multiple":false,"type":"option"},"coverageformatters":{"kind":"array","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","input":[],"multiple":false,"type":"option"},"junit":{"kind":"boolean","description":"output JUnit test results","allowNo":false,"type":"boolean"}}},"force:source:open":{"id":"force:source:open","description":"edit a Lightning Page with Lightning App Builder\nOpens the specified Lightning Page in Lightning App Builder. Lightning Page files have the suffix .flexipage-meta.xml, and are stored in the flexipages directory. \nIf you specify a Visualforce page, which has a .page suffix, the page opens in your browser so you can preview it. If you specify a different type of file, this command opens your org’s home page.\n\nThe file opens in your default browser.\nIf no browser-based editor is available for the selected file, this command opens your org's home page.\nTo generate a URL for the browser-based editor but not open the editor, use --urlonly.","strict":true,"usage":"<%= command.id %> -f <filepath> [-r] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["$ sfdx force:source:open -f path/to/source","$ sfdx force:source:open -r -f path/to/source","$ sfdx force:source:open -f path/to/source -u my-user@my-org.com"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"sourcefile":{"name":"sourcefile","type":"option","char":"f","description":"file to edit","required":true,"multiple":false},"urlonly":{"name":"urlonly","type":"boolean","char":"r","description":"generate a navigation URL; don’t launch the editor","allowNo":false}},"args":[],"requiresProject":true,"requiresUsername":true,"flagsConfig":{"sourcefile":{"kind":"filepath","char":"f","required":true,"description":"file to edit","input":[],"multiple":false,"type":"option"},"urlonly":{"kind":"boolean","char":"r","description":"generate a navigation URL; don’t launch the editor","allowNo":false,"type":"boolean"}}},"force:source:pull":{"id":"force:source:pull","description":"pull source from the scratch org to the project","strict":true,"usage":"<%= command.id %> [-f] [-w <minutes>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:source:beta:pull"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"forceoverwrite":{"name":"forceoverwrite","type":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the project","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","description":"The number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.","multiple":false,"default":{"quantity":33,"unit":0}}},"args":[],"help":"If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.","flagsConfig":{"forceoverwrite":{"kind":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the project","allowNo":false,"type":"boolean"},"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":0,"unit":0},"description":"The number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.","input":[],"multiple":false,"type":"option"}},"requiresUsername":true,"requiresProject":true},"force:source:push":{"id":"force:source:push","description":"push source to a scratch org from the project","strict":true,"usage":"<%= command.id %> [-f] [-w <minutes>] [-g] [-u <string>] [--apiversion <string>] [--quiet] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:source:beta:push"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"forceoverwrite":{"name":"forceoverwrite","type":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to scratch org","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","description":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.","multiple":false,"default":{"quantity":33,"unit":0}},"ignorewarnings":{"name":"ignorewarnings","type":"boolean","char":"g","description":"deploy changes even if warnings are generated","allowNo":false},"quiet":{"name":"quiet","type":"boolean","description":"minimize json and sdtout output on success","allowNo":false}},"args":[],"help":"If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.","flagsConfig":{"forceoverwrite":{"kind":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to scratch org","longDescription":"Runs the push command even if conflicts exist. Changes in the project overwrite changes in the scratch org.","allowNo":false,"type":"boolean"},"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":1,"unit":0},"description":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.","input":[],"multiple":false,"type":"option"},"ignorewarnings":{"kind":"boolean","char":"g","description":"deploy changes even if warnings are generated","longDescription":"Completes the deployment even if warnings are generated.","allowNo":false,"type":"boolean"},"quiet":{"description":"minimize json and sdtout output on success","type":"boolean","kind":"boolean","longDescription":"Command does not output to stdout.","allowNo":false}},"requiresUsername":true,"requiresProject":true},"force:source:retrieve":{"id":"force:source:retrieve","description":"retrieve source from an org \nUse this command to retrieve source (metadata that’s in source format) from an org.\nTo take advantage of change tracking with scratch orgs, use \"sfdx force:source:pull\".\nTo retrieve metadata that’s in metadata format, use \"sfdx force:mdapi:retrieve\".\n\nThe source you retrieve overwrites the corresponding source files in your local project. This command does not attempt to merge the source from your org with your local source files.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose it in one set of double quotes.","strict":true,"usage":"<%= command.id %> [-p <array> | -x <filepath> | -m <array>] [-w <minutes>] [-n <array>] [-f -t] [-u <string>] [-a <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["To retrieve the source files in a directory:","   $ sfdx force:source:retrieve -p path/to/source","To retrieve a specific Apex class and the objects whose source is in a directory:","   $ sfdx force:source:retrieve -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"","To retrieve source files in a comma-separated list that contains spaces:","   $ sfdx force:source:retrieve -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"","To retrieve all Apex classes:","   $ sfdx force:source:retrieve -m ApexClass","To retrieve a specific Apex class:","   $ sfdx force:source:retrieve -m ApexClass:MyApexClass","To retrieve a specific Apex class and update source tracking files:","   $ sfdx force:source:retrieve -m ApexClass:MyApexClass -t","To retrieve all custom objects and Apex classes:","   $ sfdx force:source:retrieve -m \"CustomObject,ApexClass\"","To retrieve all Apex classes and two specific profiles (one of which has a space in its name):","   $ sfdx force:source:retrieve -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"","To retrieve all metadata components listed in a manifest:","   $ sfdx force:source:retrieve -x path/to/package.xml","To retrieve metadata from a package or multiple packages:","   $ sfdx force:source:retrieve -n MyPackageName","   $ sfdx force:source:retrieve -n \"Package1, PackageName With Spaces, Package3\"","To retrieve all metadata from a package and specific components that aren’t in the package, specify both -n | --packagenames and one other scoping parameter:","   $ sfdx force:source:retrieve -n MyPackageName -p path/to/apex/classes","   $ sfdx force:source:retrieve -n MyPackageName -m ApexClass:MyApexClass","   $ sfdx force:source:retrieve -n MyPackageName -x path/to/package.xml"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","char":"a","description":"override the api version used for api requests made by this command","multiple":false},"sourcepath":{"name":"sourcepath","type":"option","char":"p","description":"comma-separated list of source file paths to retrieve","multiple":false,"exclusive":["manifest","metadata"]},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":33,"unit":0}},"manifest":{"name":"manifest","type":"option","char":"x","description":"file path for manifest (package.xml) of components to retrieve","multiple":false,"exclusive":["metadata","sourcepath"]},"metadata":{"name":"metadata","type":"option","char":"m","description":"comma-separated list of metadata component names","multiple":false,"exclusive":["manifest","sourcepath"]},"packagenames":{"name":"packagenames","type":"option","char":"n","description":"a comma-separated list of packages to retrieve","multiple":false},"tracksource":{"name":"tracksource","type":"boolean","char":"t","description":"if the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org","allowNo":false},"forceoverwrite":{"name":"forceoverwrite","type":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the project","allowNo":false,"dependsOn":["tracksource"]},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of retrieve result","allowNo":false}},"args":[],"requiresProject":true,"requiresUsername":true,"flagsConfig":{"apiversion":{"char":"a","type":"option","kind":"string","description":"override the api version used for api requests made by this command","longDescription":"Override the API version used for API requests made by this command.","input":[],"multiple":false},"sourcepath":{"kind":"array","char":"p","description":"comma-separated list of source file paths to retrieve","longDescription":"A comma-separated list of file paths for source to retrieve from the org. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its sub-directories).\nIf you specify this parameter, don’t specify --manifest or --metadata.","exclusive":["manifest","metadata"],"input":[],"multiple":false,"type":"option"},"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":1,"unit":0},"description":"wait time for command to finish in minutes","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you.","input":[],"multiple":false,"type":"option"},"manifest":{"kind":"filepath","char":"x","description":"file path for manifest (package.xml) of components to retrieve","longDescription":"The complete path for the manifest (package.xml) file that specifies the components to retrieve.\nIf you specify this parameter, don’t specify --metadata or --sourcepath.","exclusive":["metadata","sourcepath"],"input":[],"multiple":false,"type":"option"},"metadata":{"kind":"array","char":"m","description":"comma-separated list of metadata component names","longDescription":"A comma-separated list of names of metadata components to retrieve from the org.\nIf you specify this parameter, don’t specify --manifest or --sourcepath.","exclusive":["manifest","sourcepath"],"input":[],"multiple":false,"type":"option"},"packagenames":{"kind":"array","char":"n","description":"a comma-separated list of packages to retrieve","input":[],"multiple":false,"type":"option"},"tracksource":{"kind":"boolean","char":"t","description":"if the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org","allowNo":false,"type":"boolean"},"forceoverwrite":{"kind":"boolean","char":"f","description":"ignore conflict warnings and overwrite changes to the project","dependsOn":["tracksource"],"allowNo":false,"type":"boolean"},"verbose":{"description":"verbose output of retrieve result","type":"boolean","kind":"boolean","longDescription":"Emit additional command output to stdout.","allowNo":false}}},"force:source:status":{"id":"force:source:status","description":"list local changes and/or changes in a scratch org","strict":true,"usage":"<%= command.id %> [-l | -r] [-u <string>] [--apiversion <string>] [--concise] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:source:beta:status"],"examples":["$ sfdx force:source:status -l","$ sfdx force:source:status -r","$ sfdx force:source:status","$ sfdx force:source:status -u me@example.com --json"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"local":{"name":"local","type":"boolean","char":"l","description":"list the changes that have been made locally","allowNo":false,"exclusive":["remote"]},"remote":{"name":"remote","type":"boolean","char":"r","description":"list the changes that have been made in the scratch org","allowNo":false,"exclusive":["local"]},"concise":{"name":"concise","type":"boolean","description":"show only the changes that will be pushed or pulled; omits files that are forceignored","allowNo":false}},"args":[],"flagsConfig":{"local":{"kind":"boolean","char":"l","description":"list the changes that have been made locally","longDescription":"Lists the changes that have been made locally.","exclusive":["remote"],"allowNo":false,"type":"boolean"},"remote":{"kind":"boolean","char":"r","description":"list the changes that have been made in the scratch org","longDescription":"Lists the changes that have been made in the scratch org.","exclusive":["local"],"allowNo":false,"type":"boolean"},"concise":{"description":"show only the changes that will be pushed or pulled; omits files that are forceignored","type":"boolean","kind":"boolean","longDescription":"Emit brief command output to stdout.","allowNo":false}},"requiresUsername":true,"requiresProject":true},"force:mdapi:deploy:cancel":{"id":"force:mdapi:deploy:cancel","description":"cancel a metadata deployment \n Use this command to cancel a specified asynchronous metadata deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.","strict":true,"usage":"<%= command.id %> [-w <minutes>] [-i <id>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["Deploy a directory of files to the org","  $ sfdx force:mdapi:deploy -d <directory>","Now cancel this deployment and wait two minutes","  $ sfdx force:mdapi:deploy:cancel -w 2","If you have multiple deployments in progress and want to cancel a specific one, specify the job ID","  $ sfdx force:mdapi:deploy:cancel -i <jobid>","Check the status of the cancel job","  $ sfdx force:mdapi:deploy:report"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":33,"unit":0}},"jobid":{"name":"jobid","type":"option","char":"i","description":"job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified","multiple":false}},"args":[],"requiresUsername":true,"flagsConfig":{"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":1,"unit":0},"description":"wait time for command to finish in minutes","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. The default is 33 minutes.","input":[],"multiple":false,"type":"option"},"jobid":{"kind":"id","char":"i","description":"job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified","input":[],"multiple":false,"type":"option"}}},"force:mdapi:deploy:report":{"id":"force:mdapi:deploy:report","description":"check the status of a metadata deployment","strict":true,"usage":"<%= command.id %> [-w <minutes>] [-i <id>] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--concise] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:mdapi:beta:deploy:report"],"examples":["Check the status of the most recent deployment","$ sfdx force:mdapi:deploy:report","Check the status of a deploy with job ID 1234 and wait for 10 minutes for the result:","$ sfdx force:mdapi:deploy:report -i 1234 -w 10"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes.  Use -1 to poll indefinitely","multiple":false,"default":{"quantity":0,"unit":0}},"jobid":{"name":"jobid","type":"option","char":"i","description":"job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; if not specified, defaults to your most recent CLI deployment","multiple":false},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of deploy results","allowNo":false},"concise":{"name":"concise","type":"boolean","description":"omit success messages for smaller JSON output","allowNo":false},"resultsdir":{"name":"resultsdir","type":"option","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","multiple":false},"coverageformatters":{"name":"coverageformatters","type":"option","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","multiple":false},"junit":{"name":"junit","type":"boolean","description":"output JUnit test results","allowNo":false}},"args":[],"requiresUsername":true,"flagsConfig":{"wait":{"kind":"minutes","char":"w","default":{"quantity":0,"unit":0},"min":{"quantity":-1,"unit":0},"description":"wait time for command to finish in minutes.  Use -1 to poll indefinitely","longDescription":"The number of minutes to wait for the command to complete. The default is –1 (no limit).","input":[],"multiple":false,"type":"option"},"jobid":{"kind":"id","char":"i","description":"job ID of the deployment to check; required if you’ve never deployed using Salesforce CLI; if not specified, defaults to your most recent CLI deployment","longDescription":"The job ID (id field value for AsyncResult) of the deployment you want to check. The job ID is required if you haven’t previously deployed using Salesforce CLI. If you deploy using Salesforce CLI and don’t specify a job ID, we use the ID of the most recent metadata deployment.","input":[],"multiple":false,"type":"option"},"verbose":{"description":"verbose output of deploy results","longDescription":"Indicates that you want verbose output for deploy results.","type":"boolean","kind":"boolean","allowNo":false},"concise":{"description":"omit success messages for smaller JSON output","type":"boolean","kind":"boolean","longDescription":"Emit brief command output to stdout.","allowNo":false},"resultsdir":{"kind":"directory","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","input":[],"multiple":false,"type":"option"},"coverageformatters":{"kind":"array","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","input":[],"multiple":false,"type":"option"},"junit":{"kind":"boolean","description":"output JUnit test results","allowNo":false,"type":"boolean"}}},"force:mdapi:retrieve:report":{"id":"force:mdapi:retrieve:report","description":"check the status of a metadata retrieval\nSpecify the job ID and a target directory for the retrieve you want to check. You can also specify a wait time (minutes) to check for updates to the retrieve status. If the retrieve was successful, the resulting zip file will be saved to the location passed in with the retrieve target parameter.","strict":true,"usage":"<%= command.id %> [-r <directory>] [-i <id>] [-n <string>] [-z] [-w <minutes>] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:mdapi:beta:retrieve:report"],"examples":["Poll until the metadata is retrieved (or timeout is reached) using data from the last force:mdapi:retrieve command:","  sfdx force:mdapi:retrieve:report","Report the current status of the last retrieve command. If the retrieve is complete the zip file of metadata is written to the target directoy:","  sfdx force:mdapi:retrieve:report -r path/to/retrieve/dir -w 0","Poll until the metadata is retrieved (or timeout is reached) using the provided RetrieveID, naming the zip file and extracting all contents:","  sfdx force:mdapi:retrieve:report -i retrieveId -r path/to/retrieve/dir --unzip --zipfilename apexClasses.zip"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"retrievetargetdir":{"name":"retrievetargetdir","type":"option","char":"r","description":"directory root for the retrieved files","multiple":false},"jobid":{"name":"jobid","type":"option","char":"i","description":"job ID of the retrieve you want to check; defaults to your most recent CLI retrieval if not specified","multiple":false},"zipfilename":{"name":"zipfilename","type":"option","char":"n","description":"file name to use for the retrieved zip file","multiple":false},"unzip":{"name":"unzip","type":"boolean","char":"z","description":"extract all files from the retrieved zip file","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":1440,"unit":0}},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of retrieve result","allowNo":false}},"args":[],"requiresUsername":true,"flagsConfig":{"retrievetargetdir":{"kind":"directory","char":"r","description":"directory root for the retrieved files","longDescription":"The root of the directory structure where the retrieved .zip or metadata files are put.","input":[],"multiple":false,"type":"option"},"jobid":{"kind":"id","char":"i","description":"job ID of the retrieve you want to check; defaults to your most recent CLI retrieval if not specified","longDescription":"The job ID (asyncId) of the retrieve you want to check. If not specified, the default value is the ID of the most recent metadata retrieval you ran using Salesforce CLI. You must specify a --retrievetargetdir. Use with --wait to resume waiting.","input":[],"multiple":false,"type":"option"},"zipfilename":{"kind":"string","char":"n","description":"file name to use for the retrieved zip file","longDescription":"The file name to use for the retrieved zip file.","input":[],"multiple":false,"type":"option"},"unzip":{"kind":"boolean","char":"z","description":"extract all files from the retrieved zip file","longDescription":"Extract all files from the retrieved zip file.","allowNo":false,"type":"boolean"},"wait":{"kind":"minutes","char":"w","description":"wait time for command to finish in minutes","longDescription":"The number of minutes to wait for the command to complete.","min":-1,"default":{"quantity":1440,"unit":0},"input":[],"multiple":false,"type":"option"},"verbose":{"description":"verbose output of retrieve result","longDescription":"Indicates that you want verbose output from the retrieve operation.","type":"boolean","kind":"boolean","allowNo":false}}},"force:source:deploy:cancel":{"id":"force:source:deploy:cancel","description":"cancel a source deployment\n Use this command to cancel a specified asynchronous source deployment. You can also specify a wait time (in minutes) to check for updates to the canceled deploy status.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI.\nTo check the status of the job, use force:source:deploy:report.","strict":true,"usage":"<%= command.id %> [-w <minutes>] [-i <id>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["Deploy a directory of files to the org","  $ sfdx force:source:deploy -d <directory>","Now cancel this deployment and wait two minutes","  $ sfdx force:source:deploy:cancel -w 2","If you have multiple deployments in progress and want to cancel a specific one, specify the job ID","  $ sfdx force:source:deploy:cancel -i <jobid>","Check the status of the cancel job","  $ sfdx force:source:deploy:report"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":33,"unit":0}},"jobid":{"name":"jobid","type":"option","char":"i","description":"job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified","multiple":false}},"args":[],"requiresUsername":true,"flagsConfig":{"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":1,"unit":0},"description":"wait time for command to finish in minutes","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. ","input":[],"multiple":false,"type":"option"},"jobid":{"kind":"id","char":"i","description":"job ID of the deployment you want to cancel; defaults to your most recent CLI deployment if not specified","input":[],"multiple":false,"type":"option"}}},"force:source:deploy:report":{"id":"force:source:deploy:report","description":"check the status of a metadata deployment \nSpecify the job ID for the deploy you want to check. You can also specify a wait time (minutes) to check for updates to the deploy status.","strict":true,"usage":"<%= command.id %> [-w <minutes>] [-i <id>] [--resultsdir <directory>] [--coverageformatters <array>] [--junit] [-u <string>] [--apiversion <string>] [--verbose] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["Deploy a directory of files to the org"," $ sfdx force:source:deploy -d <directory>","Now cancel this deployment and wait two minutes"," $ sfdx force:source:deploy:cancel -w 2","If you have multiple deployments in progress and want to cancel a specific one, specify the job ID"," $ sfdx force:source:deploy:cancel -i <jobid>","Check the status of the cancel job"," $ sfdx force:source:deploy:report"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"wait":{"name":"wait","type":"option","char":"w","description":"wait time for command to finish in minutes","multiple":false,"default":{"quantity":33,"unit":0}},"jobid":{"name":"jobid","type":"option","char":"i","description":"job ID of the deployment you want to check; defaults to your most recent CLI deployment if not specified","multiple":false},"verbose":{"name":"verbose","type":"boolean","description":"verbose output of deploy result","allowNo":false},"resultsdir":{"name":"resultsdir","type":"option","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","multiple":false},"coverageformatters":{"name":"coverageformatters","type":"option","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","multiple":false},"junit":{"name":"junit","type":"boolean","description":"output JUnit test results","allowNo":false}},"args":[],"requiresUsername":true,"flagsConfig":{"wait":{"kind":"minutes","char":"w","default":{"quantity":33,"unit":0},"min":{"quantity":1,"unit":0},"description":"wait time for command to finish in minutes","longDescription":"Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you. ","input":[],"multiple":false,"type":"option"},"jobid":{"kind":"id","char":"i","description":"job ID of the deployment you want to check; defaults to your most recent CLI deployment if not specified","longDescription":"The job ID (asyncId) of the deployment you want to check. If not specified, the default value is the ID of the most recent metadata deployment you ran using Salesforce CLI. Use with -w to resume waiting.","input":[],"multiple":false,"type":"option"},"verbose":{"description":"verbose output of deploy result","type":"boolean","kind":"boolean","longDescription":"Emit additional command output to stdout.","allowNo":false},"resultsdir":{"kind":"directory","description":"output directory for code coverage and JUnit results; defaults to the deploy ID","input":[],"multiple":false,"type":"option"},"coverageformatters":{"kind":"array","description":"format of the code coverage results","helpValue":"clover,cobertura,html-spa,html,json,json-summary,lcovonly,none,teamcity,text,text-summary","input":[],"multiple":false,"type":"option"},"junit":{"kind":"boolean","description":"output JUnit test results","allowNo":false,"type":"boolean"}}},"force:source:ignored:list":{"id":"force:source:ignored:list","description":"check your local project package directories for forceignored files","strict":true,"usage":"<%= command.id %> [-p <filepath>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"sourcepath":{"name":"sourcepath","type":"option","char":"p","description":"file or directory of files that the command checks for foreceignored files","multiple":false}},"args":[],"requiresProject":true,"flagsConfig":{"sourcepath":{"kind":"filepath","char":"p","description":"file or directory of files that the command checks for foreceignored files","input":[],"multiple":false,"type":"option"}}},"force:source:manifest:create":{"id":"force:source:manifest:create","description":"create a project manifest that lists the metadata components you want to deploy or retrieve \n Create a manifest from a list of metadata components (--metadata) or from one or more local directories that contain source files (--sourcepath). You can specify either of these parameters, not both.\n\nUse --manifesttype to specify the type of manifest you want to create. The resulting manifest files have specific names, such as the standard package.xml or destructiveChanges.xml to delete metadata. Valid values for this parameter, and their respective file names, are:\n\n  package :  package.xml (default)\n  pre : destructiveChangesPre.xml\n  post : destructiveChangesPost.xml\n  destroy : destructiveChanges.xml\n\nSee https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_deleting_files.htm for information about these destructive manifest files. \n\nUse --manifestname to specify a custom name for the generated manifest if the pre-defined ones don’t suit your needs. You can specify either --manifesttype or --manifestname, but not both.\n","strict":true,"usage":"<%= command.id %> [-m <array>] [-p <array>] [-n <string> | -t pre|post|destroy|package] [-c <array> --fromorg <string>] [-o <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":[],"examples":["$ sfdx force:source:manifest:create -m ApexClass","$ sfdx force:source:manifest:create -m ApexClass:MyApexClass --manifesttype destroy","$ sfdx force:source:manifest:create --sourcepath force-app --manifestname myNewManifest","$ sfdx force:source:manifest:create --fromorg test@myorg.com --includepackages unlocked"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"metadata":{"name":"metadata","type":"option","char":"m","description":"comma-separated list of names of metadata components to include in the manifest","multiple":false},"sourcepath":{"name":"sourcepath","type":"option","char":"p","description":"comma-separated list of paths to the local source files to include in the manifest","multiple":false},"manifestname":{"name":"manifestname","type":"option","char":"n","description":"name of a custom manifest file to create","multiple":false,"exclusive":["manifesttype"]},"manifesttype":{"name":"manifesttype","type":"option","char":"t","description":"type of manifest to create; the type determines the name of the created file","helpValue":"(pre|post|destroy|package)","multiple":false,"options":["pre","post","destroy","package"]},"includepackages":{"name":"includepackages","type":"option","char":"c","description":"comma-separated list of package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in packages is ignored","multiple":false,"dependsOn":["fromorg"]},"fromorg":{"name":"fromorg","type":"option","description":"username or alias of the org that contains the metadata components from which to build a manifest","multiple":false},"outputdir":{"name":"outputdir","type":"option","char":"o","description":"directory to save the created manifest","multiple":false}},"args":[],"requiresProject":true,"flagsConfig":{"apiversion":{"type":"option","kind":"string","description":"override the api version used for api requests made by this command","longDescription":"Override the API version used for API requests made by this command.","input":[],"multiple":false},"metadata":{"kind":"array","char":"m","description":"comma-separated list of names of metadata components to include in the manifest","exactlyOne":["metadata","sourcepath","fromorg"],"input":[],"multiple":false,"type":"option"},"sourcepath":{"kind":"array","char":"p","description":"comma-separated list of paths to the local source files to include in the manifest","exactlyOne":["metadata","sourcepath","fromorg"],"input":[],"multiple":false,"type":"option"},"manifestname":{"kind":"string","char":"n","description":"name of a custom manifest file to create","exclusive":["manifesttype"],"input":[],"multiple":false,"type":"option"},"manifesttype":{"kind":"enum","helpValue":"(pre|post|destroy|package)","description":"type of manifest to create; the type determines the name of the created file","options":["pre","post","destroy","package"],"char":"t","input":[],"multiple":false,"type":"option"},"includepackages":{"kind":"array","description":"comma-separated list of package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in packages is ignored","char":"c","dependsOn":["fromorg"],"input":[],"multiple":false,"type":"option"},"fromorg":{"kind":"string","description":"username or alias of the org that contains the metadata components from which to build a manifest","exactlyOne":["metadata","sourcepath","fromorg"],"input":[],"multiple":false,"type":"option"},"outputdir":{"kind":"string","char":"o","description":"directory to save the created manifest","input":[],"multiple":false,"type":"option"}}},"force:source:tracking:clear":{"id":"force:source:tracking:clear","description":"clear all local source tracking information\n\nWARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nClears all local source tracking information. When you next run force:source:status, the CLI displays all local and remote files as changed, and any files with the same name are listed as conflicts.","strict":true,"usage":"<%= command.id %> [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:source:beta:tracking:clear"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"noprompt":{"name":"noprompt","type":"boolean","char":"p","description":"do not prompt for source tracking override confirmation","required":false,"allowNo":false}},"args":[],"requiresProject":true,"requiresUsername":true,"flagsConfig":{"noprompt":{"kind":"boolean","char":"p","description":"do not prompt for source tracking override confirmation","required":false,"allowNo":false,"type":"boolean"}}},"force:source:tracking:reset":{"id":"force:source:tracking:reset","description":"reset local and remote source tracking\n\n WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution. \n\nResets local and remote source tracking so that the CLI no longer registers differences between your local files and those in the org. When you next run force:source:status, the CLI returns no results, even though conflicts might actually exist. The CLI then resumes tracking new source changes as usual.\n\nUse the --revision parameter to reset source tracking to a specific revision number of an org source member. To get the revision number, query the SourceMember Tooling API object with the force:data:soql:query command. For example:\n $ sfdx force:data:soql:query -q \"SELECT MemberName, MemberType, RevisionCounter FROM SourceMember\" -t","strict":true,"usage":"<%= command.id %> [-r <integer>] [-p] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]","pluginName":"@salesforce/plugin-source","pluginAlias":"@salesforce/plugin-source","pluginType":"core","aliases":["force:source:beta:tracking:reset"],"flags":{"json":{"name":"json","type":"boolean","description":"format output as json","allowNo":false},"loglevel":{"name":"loglevel","type":"option","description":"logging level for this command invocation","required":false,"helpValue":"(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)","multiple":false,"options":["trace","debug","info","warn","error","fatal","TRACE","DEBUG","INFO","WARN","ERROR","FATAL"],"default":"warn"},"targetusername":{"name":"targetusername","type":"option","char":"u","description":"username or alias for the target org; overrides default target org","multiple":false},"apiversion":{"name":"apiversion","type":"option","description":"override the api version used for api requests made by this command","multiple":false},"revision":{"name":"revision","type":"option","char":"r","description":"reset to a specific SourceMember revision counter number","multiple":false},"noprompt":{"name":"noprompt","type":"boolean","char":"p","description":"do not prompt for source tracking override confirmation","allowNo":false}},"args":[],"requiresProject":true,"requiresUsername":true,"flagsConfig":{"revision":{"kind":"integer","char":"r","description":"reset to a specific SourceMember revision counter number","min":0,"input":[],"multiple":false,"type":"option"},"noprompt":{"kind":"boolean","char":"p","description":"do not prompt for source tracking override confirmation","allowNo":false,"type":"boolean"}}}}}
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

/**
 * @file Manages Streaming APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Client, Subscription } from 'faye';
import { registerModule } from '../jsforce';
import * as StreamingExtension from './streaming/extension';
/**
 *
 */

export { Client, Subscription };
/*--------------------------------------------*/

/**
 * Streaming API topic class
 */

class Topic {
  constructor(streaming, name) {
    _defineProperty(this, "_streaming", void 0);

    _defineProperty(this, "name", void 0);

    this._streaming = streaming;
    this.name = name;
  }
  /**
   * Subscribe listener to topic
   */


  subscribe(listener) {
    return this._streaming.subscribe(this.name, listener);
  }
  /**
   * Unsubscribe listener from topic
   */


  unsubscribe(subscr) {
    this._streaming.unsubscribe(this.name, subscr);

    return this;
  }

}
/*--------------------------------------------*/

/**
 * Streaming API Generic Streaming Channel
 */


class Channel {
  constructor(streaming, name) {
    _defineProperty(this, "_streaming", void 0);

    _defineProperty(this, "_id", void 0);

    _defineProperty(this, "name", void 0);

    this._streaming = streaming;
    this.name = name;
  }
  /**
   * Subscribe to channel
   */


  subscribe(listener) {
    return this._streaming.subscribe(this.name, listener);
  }

  unsubscribe(subscr) {
    this._streaming.unsubscribe(this.name, subscr);

    return this;
  }

  async push(events) {
    const isArray = _Array$isArray(events);

    const pushEvents = _Array$isArray(events) ? events : [events];
    const conn = this._streaming._conn;

    if (!this._id) {
      this._id = conn.sobject('StreamingChannel').findOne({
        Name: this.name
      }, ['Id']).then(rec => rec === null || rec === void 0 ? void 0 : rec.Id);
    }

    const id = await this._id;

    if (!id) {
      throw new Error(`No streaming channel available for name: ${this.name}`);
    }

    const channelUrl = `/sobjects/StreamingChannel/${id}/push`;
    const rets = await conn.requestPost(channelUrl, {
      pushEvents
    });
    return isArray ? rets : rets[0];
  }

}
/*--------------------------------------------*/

/**
 * Streaming API class
 */


export class Streaming extends EventEmitter {
  /**
   *
   */
  constructor(conn) {
    super();

    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "_topics", {});

    _defineProperty(this, "_fayeClients", {});

    this._conn = conn;
  }
  /* @private */


  _createClient(forChannelName, extensions) {
    var _context;

    // forChannelName is advisory, for an API workaround. It does not restrict or select the channel.
    const needsReplayFix = typeof forChannelName === 'string' && _indexOfInstanceProperty(forChannelName).call(forChannelName, '/u/') === 0;
    const endpointUrl = [this._conn.instanceUrl, // special endpoint "/cometd/replay/xx.x" is only available in 36.0.
    // See https://releasenotes.docs.salesforce.com/en-us/summer16/release-notes/rn_api_streaming_classic_replay.htm
    'cometd' + (needsReplayFix === true && this._conn.version === '36.0' ? '/replay' : ''), this._conn.version].join('/');
    const fayeClient = new Client(endpointUrl, {});
    fayeClient.setHeader('Authorization', 'OAuth ' + this._conn.accessToken);

    if (_Array$isArray(extensions)) {
      for (const extension of extensions) {
        fayeClient.addExtension(extension);
      }
    } // prevent streaming API server error


    const dispatcher = fayeClient._dispatcher;

    if (_indexOfInstanceProperty(_context = dispatcher.getConnectionTypes()).call(_context, 'callback-polling') === -1) {
      dispatcher.selectTransport('long-polling');
      dispatcher._transport.batching = false;
    }

    return fayeClient;
  }
  /** @private **/


  _getFayeClient(channelName) {
    const isGeneric = _indexOfInstanceProperty(channelName).call(channelName, '/u/') === 0;
    const clientType = isGeneric ? 'generic' : 'pushTopic';

    if (!this._fayeClients[clientType]) {
      this._fayeClients[clientType] = this._createClient(channelName);
    }

    return this._fayeClients[clientType];
  }
  /**
   * Get named topic
   */


  topic(name) {
    this._topics = this._topics || {};
    const topic = this._topics[name] = this._topics[name] || new Topic(this, name);
    return topic;
  }
  /**
   * Get channel for channel name
   */


  channel(name) {
    return new Channel(this, name);
  }
  /**
   * Subscribe topic/channel
   */


  subscribe(name, listener) {
    const channelName = _indexOfInstanceProperty(name).call(name, '/') === 0 ? name : '/topic/' + name;

    const fayeClient = this._getFayeClient(channelName);

    return fayeClient.subscribe(channelName, listener);
  }
  /**
   * Unsubscribe topic
   */


  unsubscribe(name, subscription) {
    const channelName = _indexOfInstanceProperty(name).call(name, '/') === 0 ? name : '/topic/' + name;

    const fayeClient = this._getFayeClient(channelName);

    fayeClient.unsubscribe(channelName, subscription);
    return this;
  }
  /**
   * Create a Streaming client, optionally with extensions
   *
   * See Faye docs for implementation details: https://faye.jcoglan.com/browser/extensions.html
   *
   * Example usage:
   *
   * ```javascript
   * const jsforce = require('jsforce');
   *
   * // Establish a Salesforce connection. (Details elided)
   * const conn = new jsforce.Connection({ … });
   *
   * const fayeClient = conn.streaming.createClient();
   *
   * const subscription = fayeClient.subscribe(channel, data => {
   *   console.log('topic received data', data);
   * });
   *
   * subscription.cancel();
   * ```
   *
   * Example with extensions, using Replay & Auth Failure extensions in a server-side Node.js app:
   *
   * ```javascript
   * const jsforce = require('jsforce');
   * const { StreamingExtension } = require('jsforce/api/streaming');
   *
   * // Establish a Salesforce connection. (Details elided)
   * const conn = new jsforce.Connection({ … });
   *
   * const channel = "/event/My_Event__e";
   * const replayId = -2; // -2 is all retained events
   *
   * const exitCallback = () => process.exit(1);
   * const authFailureExt = new StreamingExtension.AuthFailure(exitCallback);
   *
   * const replayExt = new StreamingExtension.Replay(channel, replayId);
   *
   * const fayeClient = conn.streaming.createClient([
   *   authFailureExt,
   *   replayExt
   * ]);
   *
   * const subscription = fayeClient.subscribe(channel, data => {
   *   console.log('topic received data', data);
   * });
   *
   * subscription.cancel();
   * ```
   */


  createClient(extensions) {
    return this._createClient(null, extensions);
  }

}
export { StreamingExtension };
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */

registerModule('streaming', conn => new Streaming(conn));
export default Streaming;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.sort";
import "core-js/modules/es.promise";
import _findInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source), true)).call(_context4, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source))).call(_context5, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 *
 */
import { getLogger } from './util/logger';
import RecordReference from './record-reference';
import Query, { ResponseTargets } from './query';
import QuickAction from './quick-action';

/**
 * A class for organizing all SObject access
 */
export class SObject {
  // layouts: (ln?: string) => Promise<DescribeLayoutResult>;
  // compactLayouts: () => Promise<DescribeCompactLayoutsResult>;
  // approvalLayouts: () => Promise<DescribeApprovalLayoutsResult>;

  /**
   *
   */
  constructor(conn, type) {
    _defineProperty(this, "type", void 0);

    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "_logger", void 0);

    _defineProperty(this, "layouts$", void 0);

    _defineProperty(this, "layouts$$", void 0);

    _defineProperty(this, "compactLayouts$", void 0);

    _defineProperty(this, "compactLayouts$$", void 0);

    _defineProperty(this, "approvalLayouts$", void 0);

    _defineProperty(this, "approvalLayouts$$", void 0);

    _defineProperty(this, "insert", this.create);

    _defineProperty(this, "delete", this.destroy);

    _defineProperty(this, "del", this.destroy);

    _defineProperty(this, "insertBulk", this.createBulk);

    _defineProperty(this, "deleteBulk", this.destroyBulk);

    _defineProperty(this, "deleteHardBulk", this.destroyHardBulk);

    this.type = type;
    this._conn = conn;
    this._logger = conn._logLevel ? SObject._logger.createInstance(conn._logLevel) : SObject._logger;
    const cache = this._conn.cache;

    const layoutCacheKey = layoutName => layoutName ? `layouts.namedLayouts.${layoutName}` : `layouts.${this.type}`;

    const layouts = SObject.prototype.layouts;
    this.layouts = cache.createCachedFunction(layouts, this, {
      key: layoutCacheKey,
      strategy: 'NOCACHE'
    });
    this.layouts$ = cache.createCachedFunction(layouts, this, {
      key: layoutCacheKey,
      strategy: 'HIT'
    });
    this.layouts$$ = cache.createCachedFunction(layouts, this, {
      key: layoutCacheKey,
      strategy: 'IMMEDIATE'
    });
    const compactLayoutCacheKey = `compactLayouts.${this.type}`;
    const compactLayouts = SObject.prototype.compactLayouts;
    this.compactLayouts = cache.createCachedFunction(compactLayouts, this, {
      key: compactLayoutCacheKey,
      strategy: 'NOCACHE'
    });
    this.compactLayouts$ = cache.createCachedFunction(compactLayouts, this, {
      key: compactLayoutCacheKey,
      strategy: 'HIT'
    });
    this.compactLayouts$$ = cache.createCachedFunction(compactLayouts, this, {
      key: compactLayoutCacheKey,
      strategy: 'IMMEDIATE'
    });
    const approvalLayoutCacheKey = `approvalLayouts.${this.type}`;
    const approvalLayouts = SObject.prototype.approvalLayouts;
    this.approvalLayouts = cache.createCachedFunction(approvalLayouts, this, {
      key: approvalLayoutCacheKey,
      strategy: 'NOCACHE'
    });
    this.approvalLayouts$ = cache.createCachedFunction(approvalLayouts, this, {
      key: approvalLayoutCacheKey,
      strategy: 'HIT'
    });
    this.approvalLayouts$$ = cache.createCachedFunction(approvalLayouts, this, {
      key: approvalLayoutCacheKey,
      strategy: 'IMMEDIATE'
    });
  }
  /**
   * Create records
   */


  create(records, options) {
    return this._conn.create(this.type, records, options);
  }
  /**
   * Synonym of SObject#create()
   */


  retrieve(ids, options) {
    return this._conn.retrieve(this.type, ids, options);
  }
  /**
   * Update records
   */


  update(records, options) {
    return this._conn.update(this.type, records, options);
  }
  /**
   * Upsert records
   */


  upsert(records, extIdField, options) {
    return this._conn.upsert(this.type, records, extIdField, options);
  }
  /**
   * Delete records
   */


  destroy(ids, options) {
    return this._conn.destroy(this.type, ids, options);
  }
  /**
   * Synonym of SObject#destroy()
   */


  /**
   * Call Bulk#load() to execute bulkload, returning batch object
   */
  bulkload(operation, optionsOrInput, input) {
    return this._conn.bulk.load(this.type, operation, optionsOrInput, input);
  }
  /**
   * Bulkly insert input data using bulk API
   */


  createBulk(input) {
    return this.bulkload('insert', input);
  }
  /**
   * Synonym of SObject#createBulk()
   */


  /**
   * Bulkly update records by input data using bulk API
   */
  updateBulk(input) {
    return this.bulkload('update', input);
  }
  /**
   * Bulkly upsert records by input data using bulk API
   */


  upsertBulk(input, extIdField) {
    return this.bulkload('upsert', {
      extIdField
    }, input);
  }
  /**
   * Bulkly delete records specified by input data using bulk API
   */


  destroyBulk(input) {
    return this.bulkload('delete', input);
  }
  /**
   * Synonym of SObject#destroyBulk()
   */


  /**
   * Bulkly hard delete records specified in input data using bulk API
   */
  destroyHardBulk(input) {
    return this.bulkload('hardDelete', input);
  }
  /**
   * Synonym of SObject#destroyHardBulk()
   */


  /**
   * Describe SObject metadata
   */
  describe() {
    return this._conn.describe(this.type);
  }
  /**
   *
   */


  describe$() {
    return this._conn.describe$(this.type);
  }
  /**
   *
   */


  describe$$() {
    return this._conn.describe$$(this.type);
  }
  /**
   * Get record representation instance by given id
   */


  record(id) {
    return new RecordReference(this._conn, this.type, id);
  }
  /**
   * Retrieve recently accessed records
   */


  recent() {
    return this._conn.recent(this.type);
  }
  /**
   * Retrieve the updated records
   */


  updated(start, end) {
    return this._conn.updated(this.type, start, end);
  }
  /**
   * Retrieve the deleted records
   */


  deleted(start, end) {
    return this._conn.deleted(this.type, start, end);
  }
  /**
   * Describe layout information for SObject
   */


  async layouts(layoutName) {
    const url = `/sobjects/${this.type}/describe/${layoutName ? `namedLayouts/${layoutName}` : 'layouts'}`;
    const body = await this._conn.request(url);
    return body;
  }
  /**
   * @typedef {Object} CompactLayoutInfo
   * @prop {Array.<Object>} compactLayouts - Array of compact layouts
   * @prop {String} defaultCompactLayoutId - ID of default compact layout
   * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings
   */

  /**
   * Describe compact layout information defined for SObject
   *
   * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function
   * @returns {Promise.<CompactLayoutInfo>}
   */


  async compactLayouts() {
    const url = `/sobjects/${this.type}/describe/compactLayouts`;
    const body = await this._conn.request(url);
    return body;
  }
  /**
   * Describe compact layout information defined for SObject
   *
   * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function
   * @returns {Promise.<ApprovalLayoutInfo>}
   */


  async approvalLayouts() {
    const url = `/sobjects/${this.type}/describe/approvalLayouts`;
    const body = await this._conn.request(url);
    return body;
  }
  /**
   * Find and fetch records which matches given conditions
   */


  find(conditions, fields, options = {}) {
    const {
      sort,
      limit,
      offset
    } = options,
          qoptions = _objectWithoutProperties(options, ["sort", "limit", "offset"]);

    const config = {
      fields: fields == null ? undefined : fields,
      includes: _includesInstanceProperty(options),
      table: this.type,
      conditions: conditions == null ? undefined : conditions,
      sort,
      limit,
      offset
    };
    const query = new Query(this._conn, config, qoptions);
    return query.setResponseTarget(ResponseTargets.Records);
  }
  /**
   * Fetch one record which matches given conditions
   */


  findOne(conditions, fields, options = {}) {
    var _context;

    const query = _findInstanceProperty(_context = this).call(_context, conditions, fields, _objectSpread(_objectSpread({}, options), {}, {
      limit: 1
    }));

    return query.setResponseTarget(ResponseTargets.SingleRecord);
  }
  /**
   * Find and fetch records only by specifying fields to fetch.
   */


  select(fields) {
    var _context2;

    return _findInstanceProperty(_context2 = this).call(_context2, null, fields);
  }
  /**
   * Count num of records which matches given conditions
   */


  count(conditions) {
    var _context3;

    const query = _findInstanceProperty(_context3 = this).call(_context3, conditions, 'count()');

    return query.setResponseTarget(ResponseTargets.Count);
  }
  /**
   * Returns the list of list views for the SObject
   *
   * @param {Callback.<ListViewsInfo>} [callback] - Callback function
   * @returns {Promise.<ListViewsInfo>}
   */


  listviews() {
    const url = `${this._conn._baseUrl()}/sobjects/${this.type}/listviews`;
    return this._conn.request(url);
  }
  /**
   * Returns the list view info in specifed view id
   *
   * @param {String} id - List view ID
   * @returns {ListView}
   */


  listview(id) {
    return new ListView(this._conn, this.type, id); // eslint-disable-line no-use-before-define
  }
  /**
   * Returns all registered quick actions for the SObject
   *
   * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function
   * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}
   */


  quickActions() {
    return this._conn.request(`/sobjects/${this.type}/quickActions`);
  }
  /**
   * Get reference for specified quick aciton in the SObject
   *
   * @param {String} actionName - Name of the quick action
   * @returns {QuickAction}
   */


  quickAction(actionName) {
    return new QuickAction(this._conn, `/sobjects/${this.type}/quickActions/${actionName}`);
  }

}
/**
 * A class for organizing list view information
 *
 * @protected
 * @class ListView
 * @param {Connection} conn - Connection instance
 * @param {SObject} type - SObject type
 * @param {String} id - List view ID
 */

_defineProperty(SObject, "_logger", getLogger('sobject'));

class ListView {
  /**
   *
   */
  constructor(conn, type, id) {
    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "id", void 0);

    this._conn = conn;
    this.type = type;
    this.id = id;
  }
  /**
   * Executes query for the list view and returns the resulting data and presentation information.
   */


  results() {
    const url = `${this._conn._baseUrl()}/sobjects/${this.type}/listviews/${this.id}/results`;
    return this._conn.request(url);
  }
  /**
   * Returns detailed information about a list view
   */


  describe(options = {}) {
    const url = `${this._conn._baseUrl()}/sobjects/${this.type}/listviews/${this.id}/describe`;
    return this._conn.request({
      method: 'GET',
      url,
      headers: options.headers
    });
  }
  /**
   * Explain plan for executing list view
   */


  explain() {
    const url = `/query/?explain=${this.id}`;
    return this._conn.request(url);
  }

}

export default SObject; // TODO Bulk
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
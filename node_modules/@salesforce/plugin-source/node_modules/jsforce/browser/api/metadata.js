import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.to-string";
import _get from "@babel/runtime-corejs3/helpers/get";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context11; _forEachInstanceProperty(_context11 = ownKeys(Object(source), true)).call(_context11, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context12; _forEachInstanceProperty(_context12 = ownKeys(Object(source))).call(_context12, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages Salesforce Metadata API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Readable } from 'stream';
import FormData from 'form-data';
import { registerModule } from '../jsforce';
import SOAP from '../soap';
import { isObject } from '../util/function';
import { ApiSchemas } from './metadata/schema';
export * from './metadata/schema';
/**
 *
 */

/**
 *
 */
function deallocateTypeWithMetadata(metadata) {
  var _ref = metadata,
      $ = _ref.$,
      md = _objectWithoutProperties(_ref, ["$"]);

  return md;
}

function assignTypeWithMetadata(metadata, type) {
  var convert = function convert(md) {
    return _objectSpread(_defineProperty({}, '@xsi:type', type), md);
  };

  return _Array$isArray(metadata) ? _mapInstanceProperty(metadata).call(metadata, convert) : convert(metadata);
}
/**
 * Class for Salesforce Metadata API
 */


export var MetadataApi = /*#__PURE__*/function () {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   */

  /**
   *
   */
  function MetadataApi(conn) {
    _classCallCheck(this, MetadataApi);

    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "pollInterval", 1000);

    _defineProperty(this, "pollTimeout", 10000);

    this._conn = conn;
  }
  /**
   * Call Metadata API SOAP endpoint
   *
   * @private
   */


  _createClass(MetadataApi, [{
    key: "_invoke",
    value: function () {
      var _invoke2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, message, schema) {
        var _context;

        var soapEndpoint, res;
        return _regeneratorRuntime.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                soapEndpoint = new SOAP(this._conn, {
                  xmlns: 'http://soap.sforce.com/2006/04/metadata',
                  endpointUrl: _concatInstanceProperty(_context = "".concat(this._conn.instanceUrl, "/services/Soap/m/")).call(_context, this._conn.version)
                });
                _context2.next = 3;
                return soapEndpoint.invoke(method, message, schema ? {
                  result: schema
                } : undefined, ApiSchemas);

              case 3:
                res = _context2.sent;
                return _context2.abrupt("return", res.result);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee, this);
      }));

      function _invoke(_x, _x2, _x3) {
        return _invoke2.apply(this, arguments);
      }

      return _invoke;
    }()
    /**
     * Add one or more new metadata components to the organization.
     */

  }, {
    key: "create",
    value: function create(type, metadata) {
      var isArray = _Array$isArray(metadata);

      metadata = assignTypeWithMetadata(metadata, type);
      var schema = isArray ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      return this._invoke('createMetadata', {
        metadata: metadata
      }, schema);
    }
    /**
     * Read specified metadata components in the organization.
     */

  }, {
    key: "read",
    value: function () {
      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type, fullNames) {
        var _context3;

        var ReadResultSchema, res;
        return _regeneratorRuntime.wrap(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                ReadResultSchema = type in ApiSchemas ? {
                  type: ApiSchemas.ReadResult.type,
                  props: {
                    records: [type]
                  }
                } : ApiSchemas.ReadResult;
                _context4.next = 3;
                return this._invoke('readMetadata', {
                  type: type,
                  fullNames: fullNames
                }, ReadResultSchema);

              case 3:
                res = _context4.sent;
                return _context4.abrupt("return", _Array$isArray(fullNames) ? _mapInstanceProperty(_context3 = res.records).call(_context3, deallocateTypeWithMetadata) : deallocateTypeWithMetadata(res.records[0]));

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee2, this);
      }));

      function read(_x4, _x5) {
        return _read.apply(this, arguments);
      }

      return read;
    }()
    /**
     * Update one or more metadata components in the organization.
     */

  }, {
    key: "update",
    value: function update(type, metadata) {
      var isArray = _Array$isArray(metadata);

      metadata = assignTypeWithMetadata(metadata, type);
      var schema = isArray ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      return this._invoke('updateMetadata', {
        metadata: metadata
      }, schema);
    }
    /**
     * Upsert one or more components in your organization's data.
     */

  }, {
    key: "upsert",
    value: function upsert(type, metadata) {
      var isArray = _Array$isArray(metadata);

      metadata = assignTypeWithMetadata(metadata, type);
      var schema = isArray ? [ApiSchemas.UpsertResult] : ApiSchemas.UpsertResult;
      return this._invoke('upsertMetadata', {
        metadata: metadata
      }, schema);
    }
    /**
     * Deletes specified metadata components in the organization.
     */

  }, {
    key: "delete",
    value: function _delete(type, fullNames) {
      var schema = _Array$isArray(fullNames) ? [ApiSchemas.SaveResult] : ApiSchemas.SaveResult;
      return this._invoke('deleteMetadata', {
        type: type,
        fullNames: fullNames
      }, schema);
    }
    /**
     * Rename fullname of a metadata component in the organization
     */

  }, {
    key: "rename",
    value: function rename(type, oldFullName, newFullName) {
      return this._invoke('renameMetadata', {
        type: type,
        oldFullName: oldFullName,
        newFullName: newFullName
      }, ApiSchemas.SaveResult);
    }
    /**
     * Retrieves the metadata which describes your organization, including Apex classes and triggers,
     * custom objects, custom fields on standard objects, tab sets that define an app,
     * and many other components.
     */

  }, {
    key: "describe",
    value: function describe(asOfVersion) {
      if (!asOfVersion) {
        asOfVersion = this._conn.version;
      }

      return this._invoke('describeMetadata', {
        asOfVersion: asOfVersion
      }, ApiSchemas.DescribeMetadataResult);
    }
    /**
     * Retrieves property information about metadata components in your organization
     */

  }, {
    key: "list",
    value: function list(queries, asOfVersion) {
      if (!asOfVersion) {
        asOfVersion = this._conn.version;
      }

      return this._invoke('listMetadata', {
        queries: queries,
        asOfVersion: asOfVersion
      }, [ApiSchemas.FileProperties]);
    }
    /**
     * Checks the status of asynchronous metadata calls
     */

  }, {
    key: "checkStatus",
    value: function checkStatus(asyncProcessId) {
      var res = this._invoke('checkStatus', {
        asyncProcessId: asyncProcessId
      }, ApiSchemas.AsyncResult);

      return new AsyncResultLocator(this, res);
    }
    /**
     * Retrieves XML file representations of components in an organization
     */

  }, {
    key: "retrieve",
    value: function retrieve(request) {
      var res = this._invoke('retrieve', {
        request: request
      }, ApiSchemas.RetrieveResult);

      return new RetrieveResultLocator(this, res);
    }
    /**
     * Checks the status of declarative metadata call retrieve() and returns the zip file contents
     */

  }, {
    key: "checkRetrieveStatus",
    value: function checkRetrieveStatus(asyncProcessId) {
      return this._invoke('checkRetrieveStatus', {
        asyncProcessId: asyncProcessId
      }, ApiSchemas.RetrieveResult);
    }
    /**
     * Deploy components into an organization using zipped file representations
     * using the REST Metadata API instead of SOAP
     */

  }, {
    key: "deployRest",
    value: function deployRest(zipInput) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var form = new FormData();
      form.append('file', zipInput, {
        contentType: 'application/zip',
        filename: 'package.xml'
      }); // Add the deploy options

      form.append('entity_content', _JSON$stringify({
        deployOptions: options
      }), {
        contentType: 'application/json'
      });
      var request = {
        url: '/metadata/deployRequest',
        method: 'POST',
        headers: _objectSpread({}, form.getHeaders()),
        body: form.getBuffer()
      };

      var res = this._conn.request(request);

      return new DeployResultLocator(this, res);
    }
    /**
     * Deploy components into an organization using zipped file representations
     */

  }, {
    key: "deploy",
    value: function deploy(zipInput) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var res = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var zipContentB64;
        return _regeneratorRuntime.wrap(function _callee3$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return new _Promise(function (resolve, reject) {
                  if (isObject(zipInput) && 'pipe' in zipInput && typeof zipInput.pipe === 'function') {
                    var bufs = [];
                    zipInput.on('data', function (d) {
                      return bufs.push(d);
                    });
                    zipInput.on('error', reject);
                    zipInput.on('end', function () {
                      resolve(_concatInstanceProperty(Buffer).call(Buffer, bufs).toString('base64'));
                    }); // zipInput.resume();
                  } else if (zipInput instanceof Buffer) {
                    resolve(zipInput.toString('base64'));
                  } else if (zipInput instanceof String || typeof zipInput === 'string') {
                    resolve(zipInput);
                  } else {
                    throw 'Unexpected zipInput type';
                  }
                });

              case 2:
                zipContentB64 = _context5.sent;
                return _context5.abrupt("return", _this._invoke('deploy', {
                  ZipFile: zipContentB64,
                  DeployOptions: options
                }, ApiSchemas.DeployResult));

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee3);
      }))();

      return new DeployResultLocator(this, res);
    }
    /**
     * Checks the status of declarative metadata call deploy()
     */

  }, {
    key: "checkDeployStatus",
    value: function checkDeployStatus(asyncProcessId) {
      var includeDetails = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return this._invoke('checkDeployStatus', {
        asyncProcessId: asyncProcessId,
        includeDetails: includeDetails
      }, ApiSchemas.DeployResult);
    }
  }]);

  return MetadataApi;
}();
/*--------------------------------------------*/

/**
 * The locator class for Metadata API asynchronous call result
 */

export var AsyncResultLocator = /*#__PURE__*/function (_EventEmitter) {
  _inherits(AsyncResultLocator, _EventEmitter);

  var _super = _createSuper(AsyncResultLocator);

  /**
   *
   */
  function AsyncResultLocator(meta, promise) {
    var _this2;

    _classCallCheck(this, AsyncResultLocator);

    _this2 = _super.call(this);

    _defineProperty(_assertThisInitialized(_this2), "_meta", void 0);

    _defineProperty(_assertThisInitialized(_this2), "_promise", void 0);

    _defineProperty(_assertThisInitialized(_this2), "_id", void 0);

    _this2._meta = meta;
    _this2._promise = promise;
    return _this2;
  }
  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * @method Metadata~AsyncResultLocator#then
   */


  _createClass(AsyncResultLocator, [{
    key: "then",
    value: function then(onResolve, onReject) {
      return this._promise.then(onResolve, onReject);
    }
    /**
     * Check the status of async request
     */

  }, {
    key: "check",
    value: function () {
      var _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var result;
        return _regeneratorRuntime.wrap(function _callee4$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._promise;

              case 2:
                result = _context6.sent;
                this._id = result.id;
                _context6.next = 6;
                return this._meta.checkStatus(result.id);

              case 6:
                return _context6.abrupt("return", _context6.sent);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee4, this);
      }));

      function check() {
        return _check.apply(this, arguments);
      }

      return check;
    }()
    /**
     * Polling until async call status becomes complete or error
     */

  }, {
    key: "poll",
    value: function poll(interval, timeout) {
      var _this3 = this;

      var startTime = new Date().getTime();

      var poll = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
          var now, errMsg, _result;

          return _regeneratorRuntime.wrap(function _callee5$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.prev = 0;
                  now = new Date().getTime();

                  if (!(startTime + timeout < now)) {
                    _context7.next = 7;
                    break;
                  }

                  errMsg = 'Polling time out.';

                  if (_this3._id) {
                    errMsg += ' Process Id = ' + _this3._id;
                  }

                  _this3.emit('error', new Error(errMsg));

                  return _context7.abrupt("return");

                case 7:
                  _context7.next = 9;
                  return _this3.check();

                case 9:
                  _result = _context7.sent;

                  if (_result.done) {
                    _this3.emit('complete', _result);
                  } else {
                    _this3.emit('progress', _result);

                    _setTimeout(poll, interval);
                  }

                  _context7.next = 16;
                  break;

                case 13:
                  _context7.prev = 13;
                  _context7.t0 = _context7["catch"](0);

                  _this3.emit('error', _context7.t0);

                case 16:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee5, null, [[0, 13]]);
        }));

        return function poll() {
          return _ref3.apply(this, arguments);
        };
      }();

      _setTimeout(poll, interval);
    }
    /**
     * Check and wait until the async requests become in completed status
     */

  }, {
    key: "complete",
    value: function complete() {
      var _this4 = this;

      return new _Promise(function (resolve, reject) {
        _this4.on('complete', resolve);

        _this4.on('error', reject);

        _this4.poll(_this4._meta.pollInterval, _this4._meta.pollTimeout);
      });
    }
  }]);

  return AsyncResultLocator;
}(EventEmitter);
/*--------------------------------------------*/

/**
 * The locator class to track retreive() Metadata API call result
 */

export var RetrieveResultLocator = /*#__PURE__*/function (_AsyncResultLocator) {
  _inherits(RetrieveResultLocator, _AsyncResultLocator);

  var _super2 = _createSuper(RetrieveResultLocator);

  function RetrieveResultLocator() {
    _classCallCheck(this, RetrieveResultLocator);

    return _super2.apply(this, arguments);
  }

  _createClass(RetrieveResultLocator, [{
    key: "complete",

    /**
     * Check and wait until the async request becomes in completed status,
     * and retrieve the result data.
     */
    value: function () {
      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var result;
        return _regeneratorRuntime.wrap(function _callee6$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return _get(_getPrototypeOf(RetrieveResultLocator.prototype), "complete", this).call(this);

              case 2:
                result = _context8.sent;
                return _context8.abrupt("return", this._meta.checkRetrieveStatus(result.id));

              case 4:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee6, this);
      }));

      function complete() {
        return _complete.apply(this, arguments);
      }

      return complete;
    }()
    /**
     * Change the retrieved result to Node.js readable stream
     */

  }, {
    key: "stream",
    value: function stream() {
      var _this5 = this;

      var resultStream = new Readable();
      var reading = false;
      resultStream._read = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var _result2;

        return _regeneratorRuntime.wrap(function _callee7$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!reading) {
                  _context9.next = 2;
                  break;
                }

                return _context9.abrupt("return");

              case 2:
                reading = true;
                _context9.prev = 3;
                _context9.next = 6;
                return _this5.complete();

              case 6:
                _result2 = _context9.sent;
                resultStream.push(Buffer.from(_result2.zipFile, 'base64'));
                resultStream.push(null);
                _context9.next = 14;
                break;

              case 11:
                _context9.prev = 11;
                _context9.t0 = _context9["catch"](3);
                resultStream.emit('error', _context9.t0);

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee7, null, [[3, 11]]);
      }));
      return resultStream;
    }
  }]);

  return RetrieveResultLocator;
}(AsyncResultLocator);
/*--------------------------------------------*/

/**
 * The locator class to track deploy() Metadata API call result
 *
 * @protected
 * @class Metadata~DeployResultLocator
 * @extends Metadata~AsyncResultLocator
 * @param {Metadata} meta - Metadata API object
 * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call
 */

export var DeployResultLocator = /*#__PURE__*/function (_AsyncResultLocator2) {
  _inherits(DeployResultLocator, _AsyncResultLocator2);

  var _super3 = _createSuper(DeployResultLocator);

  function DeployResultLocator() {
    _classCallCheck(this, DeployResultLocator);

    return _super3.apply(this, arguments);
  }

  _createClass(DeployResultLocator, [{
    key: "complete",

    /**
     * Check and wait until the async request becomes in completed status,
     * and retrieve the result data.
     */
    value: function () {
      var _complete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(includeDetails) {
        var result;
        return _regeneratorRuntime.wrap(function _callee8$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return _get(_getPrototypeOf(DeployResultLocator.prototype), "complete", this).call(this);

              case 2:
                result = _context10.sent;
                return _context10.abrupt("return", this._meta.checkDeployStatus(result.id, includeDetails));

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee8, this);
      }));

      function complete(_x6) {
        return _complete2.apply(this, arguments);
      }

      return complete;
    }()
  }]);

  return DeployResultLocator;
}(AsyncResultLocator);
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */

registerModule('metadata', function (conn) {
  return new MetadataApi(conn);
});
export default MetadataApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
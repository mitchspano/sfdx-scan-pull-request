import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.array.join";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.match";
import "core-js/modules/es.string.replace";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context23; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context23 = Object.prototype.toString.call(o)).call(_context23, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context21; _forEachInstanceProperty(_context21 = ownKeys(Object(source), true)).call(_context21, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context22; _forEachInstanceProperty(_context22 = ownKeys(Object(source))).call(_context22, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @file Manages Salesforce Bulk API related operations
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Writable } from 'stream';
import joinStreams from 'multistream';
import { Serializable, Parsable } from '../record-stream';
import HttpApi from '../http-api';
import { registerModule } from '../jsforce';
import { concatStreamsAsDuplex } from '../util/stream';
import { isFunction, isObject } from '../util/function';
/*--------------------------------------------*/

/**
 * Class for Bulk API Job
 */
export var Job = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Job, _EventEmitter);

  var _super = _createSuper(Job);

  /**
   *
   */
  function Job(bulk, type, operation, options, jobId) {
    var _this;

    _classCallCheck(this, Job);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "type", void 0);

    _defineProperty(_assertThisInitialized(_this), "operation", void 0);

    _defineProperty(_assertThisInitialized(_this), "options", void 0);

    _defineProperty(_assertThisInitialized(_this), "id", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", void 0);

    _defineProperty(_assertThisInitialized(_this), "_bulk", void 0);

    _defineProperty(_assertThisInitialized(_this), "_batches", void 0);

    _defineProperty(_assertThisInitialized(_this), "_jobInfo", void 0);

    _defineProperty(_assertThisInitialized(_this), "_error", void 0);

    _this._bulk = bulk;
    _this.type = type;
    _this.operation = operation;
    _this.options = options || {};
    _this.id = jobId !== null && jobId !== void 0 ? jobId : null;
    _this.state = _this.id ? 'Open' : 'Unknown';
    _this._batches = {}; // default error handler to keep the latest error

    _this.on('error', function (error) {
      return _this._error = error;
    });

    return _this;
  }
  /**
   * Return latest jobInfo from cache
   */


  _createClass(Job, [{
    key: "info",
    value: function info() {
      // if cache is not available, check the latest
      if (!this._jobInfo) {
        this._jobInfo = this.check();
      }

      return this._jobInfo;
    }
    /**
     * Open new job and get jobinfo
     */

  }, {
    key: "open",
    value: function open() {
      var _this2 = this;

      var bulk = this._bulk;
      var options = this.options; // if sobject type / operation is not provided

      if (!this.type || !this.operation) {
        throw new Error('type / operation is required to open a new job');
      } // if not requested opening job


      if (!this._jobInfo) {
        var _context, _context2, _context3, _context4, _context5;

        var _operation = this.operation.toLowerCase();

        if (_operation === 'harddelete') {
          _operation = 'hardDelete';
        }

        if (_operation === 'queryall') {
          _operation = 'queryAll';
        }

        var body = _trimInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">\n  <operation>".concat(_operation, "</operation>\n  <object>")).call(_context5, this.type, "</object>\n  ")).call(_context4, options.extIdField ? "<externalIdFieldName>".concat(options.extIdField, "</externalIdFieldName>") : '', "\n  ")).call(_context3, options.concurrencyMode ? "<concurrencyMode>".concat(options.concurrencyMode, "</concurrencyMode>") : '', "\n  ")).call(_context2, options.assignmentRuleId ? "<assignmentRuleId>".concat(options.assignmentRuleId, "</assignmentRuleId>") : '', "\n  <contentType>CSV</contentType>\n</jobInfo>\n      ")).call(_context);

        this._jobInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _res;

          return _regeneratorRuntime.wrap(function _callee$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.prev = 0;
                  _context6.next = 3;
                  return bulk._request({
                    method: 'POST',
                    path: '/job',
                    body: body,
                    headers: {
                      'Content-Type': 'application/xml; charset=utf-8'
                    },
                    responseType: 'application/xml'
                  });

                case 3:
                  _res = _context6.sent;

                  _this2.emit('open', _res.jobInfo);

                  _this2.id = _res.jobInfo.id;
                  _this2.state = _res.jobInfo.state;
                  return _context6.abrupt("return", _res.jobInfo);

                case 10:
                  _context6.prev = 10;
                  _context6.t0 = _context6["catch"](0);

                  _this2.emit('error', _context6.t0);

                  throw _context6.t0;

                case 14:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee, null, [[0, 10]]);
        }))();
      }

      return this._jobInfo;
    }
    /**
     * Create a new batch instance in the job
     */

  }, {
    key: "createBatch",
    value: function createBatch() {
      var _this3 = this;

      var batch = new Batch(this);
      batch.on('queue', function () {
        _this3._batches[batch.id] = batch;
      });
      return batch;
    }
    /**
     * Get a batch instance specified by given batch ID
     */

  }, {
    key: "batch",
    value: function batch(batchId) {
      var batch = this._batches[batchId];

      if (!batch) {
        batch = new Batch(this, batchId);
        this._batches[batchId] = batch;
      }

      return batch;
    }
    /**
     * Check the latest job status from server
     */

  }, {
    key: "check",
    value: function check() {
      var _this4 = this;

      var bulk = this._bulk;
      var logger = bulk._logger;
      this._jobInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var jobId, res;
        return _regeneratorRuntime.wrap(function _callee2$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return _this4.ready();

              case 2:
                jobId = _context7.sent;
                _context7.next = 5;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId,
                  responseType: 'application/xml'
                });

              case 5:
                res = _context7.sent;
                logger.debug(res.jobInfo);
                _this4.id = res.jobInfo.id;
                _this4.type = res.jobInfo.object;
                _this4.operation = res.jobInfo.operation;
                _this4.state = res.jobInfo.state;
                return _context7.abrupt("return", res.jobInfo);

              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee2);
      }))();
      return this._jobInfo;
    }
    /**
     * Wait till the job is assigned to server
     */

  }, {
    key: "ready",
    value: function ready() {
      return this.id ? _Promise.resolve(this.id) : this.open().then(function (_ref3) {
        var id = _ref3.id;
        return id;
      });
    }
    /**
     * List all registered batch info in job
     */

  }, {
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var bulk, logger, jobId, res, batchInfoList;
        return _regeneratorRuntime.wrap(function _callee3$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                _context8.next = 4;
                return this.ready();

              case 4:
                jobId = _context8.sent;
                _context8.next = 7;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch',
                  responseType: 'application/xml'
                });

              case 7:
                res = _context8.sent;
                logger.debug(res.batchInfoList.batchInfo);
                batchInfoList = _Array$isArray(res.batchInfoList.batchInfo) ? res.batchInfoList.batchInfo : [res.batchInfoList.batchInfo];
                return _context8.abrupt("return", batchInfoList);

              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee3, this);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
    /**
     * Close opened job
     */

  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var jobInfo;
        return _regeneratorRuntime.wrap(function _callee4$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (this.id) {
                  _context9.next = 2;
                  break;
                }

                return _context9.abrupt("return");

              case 2:
                _context9.prev = 2;
                _context9.next = 5;
                return this._changeState('Closed');

              case 5:
                jobInfo = _context9.sent;
                this.id = null;
                this.emit('close', jobInfo);
                return _context9.abrupt("return", jobInfo);

              case 11:
                _context9.prev = 11;
                _context9.t0 = _context9["catch"](2);
                this.emit('error', _context9.t0);
                throw _context9.t0;

              case 15:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee4, this, [[2, 11]]);
      }));

      function close() {
        return _close.apply(this, arguments);
      }

      return close;
    }()
    /**
     * Set the status to abort
     */

  }, {
    key: "abort",
    value: function () {
      var _abort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var jobInfo;
        return _regeneratorRuntime.wrap(function _callee5$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (this.id) {
                  _context10.next = 2;
                  break;
                }

                return _context10.abrupt("return");

              case 2:
                _context10.prev = 2;
                _context10.next = 5;
                return this._changeState('Aborted');

              case 5:
                jobInfo = _context10.sent;
                this.id = null;
                this.emit('abort', jobInfo);
                return _context10.abrupt("return", jobInfo);

              case 11:
                _context10.prev = 11;
                _context10.t0 = _context10["catch"](2);
                this.emit('error', _context10.t0);
                throw _context10.t0;

              case 15:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee5, this, [[2, 11]]);
      }));

      function abort() {
        return _abort.apply(this, arguments);
      }

      return abort;
    }()
    /**
     * @private
     */

  }, {
    key: "_changeState",
    value: function () {
      var _changeState2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(state) {
        var _this5 = this;

        var bulk, logger;
        return _regeneratorRuntime.wrap(function _callee7$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                this._jobInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
                  var _context11;

                  var jobId, body, res;
                  return _regeneratorRuntime.wrap(function _callee6$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          _context12.next = 2;
                          return _this5.ready();

                        case 2:
                          jobId = _context12.sent;
                          body = _trimInstanceProperty(_context11 = " \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">\n  <state>".concat(state, "</state>\n</jobInfo>\n      ")).call(_context11);
                          _context12.next = 6;
                          return bulk._request({
                            method: 'POST',
                            path: '/job/' + jobId,
                            body: body,
                            headers: {
                              'Content-Type': 'application/xml; charset=utf-8'
                            },
                            responseType: 'application/xml'
                          });

                        case 6:
                          res = _context12.sent;
                          logger.debug(res.jobInfo);
                          _this5.state = res.jobInfo.state;
                          return _context12.abrupt("return", res.jobInfo);

                        case 10:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee6);
                }))();
                return _context13.abrupt("return", this._jobInfo);

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee7, this);
      }));

      function _changeState(_x) {
        return _changeState2.apply(this, arguments);
      }

      return _changeState;
    }()
  }]);

  return Job;
}(EventEmitter);
/*--------------------------------------------*/

var PollingTimeoutError = /*#__PURE__*/function (_Error) {
  _inherits(PollingTimeoutError, _Error);

  var _super2 = _createSuper(PollingTimeoutError);

  /**
   *
   */
  function PollingTimeoutError(message, jobId, batchId) {
    var _this6;

    _classCallCheck(this, PollingTimeoutError);

    _this6 = _super2.call(this, message);

    _defineProperty(_assertThisInitialized(_this6), "jobId", void 0);

    _defineProperty(_assertThisInitialized(_this6), "batchId", void 0);

    _this6.name = 'PollingTimeout';
    _this6.jobId = jobId;
    _this6.batchId = batchId;
    return _this6;
  }

  return PollingTimeoutError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/*--------------------------------------------*/

/**
 * Batch (extends Writable)
 */


export var Batch = /*#__PURE__*/function (_Writable) {
  _inherits(Batch, _Writable);

  var _super3 = _createSuper(Batch);

  /**
   *
   */
  function Batch(job, id) {
    var _this7;

    _classCallCheck(this, Batch);

    _this7 = _super3.call(this, {
      objectMode: true
    });

    _defineProperty(_assertThisInitialized(_this7), "job", void 0);

    _defineProperty(_assertThisInitialized(_this7), "id", void 0);

    _defineProperty(_assertThisInitialized(_this7), "_bulk", void 0);

    _defineProperty(_assertThisInitialized(_this7), "_uploadStream", void 0);

    _defineProperty(_assertThisInitialized(_this7), "_downloadStream", void 0);

    _defineProperty(_assertThisInitialized(_this7), "_dataStream", void 0);

    _defineProperty(_assertThisInitialized(_this7), "_result", void 0);

    _defineProperty(_assertThisInitialized(_this7), "_error", void 0);

    _defineProperty(_assertThisInitialized(_this7), "run", _this7.execute);

    _defineProperty(_assertThisInitialized(_this7), "exec", _this7.execute);

    _this7.job = job;
    _this7.id = id;
    _this7._bulk = job._bulk; // default error handler to keep the latest error

    _this7.on('error', function (error) {
      return _this7._error = error;
    }); //
    // setup data streams
    //


    var converterOptions = {
      nullValue: '#N/A'
    };
    var uploadStream = _this7._uploadStream = new Serializable();
    var uploadDataStream = uploadStream.stream('csv', converterOptions);
    var downloadStream = _this7._downloadStream = new Parsable();
    var downloadDataStream = downloadStream.stream('csv', converterOptions);

    _this7.on('finish', function () {
      return uploadStream.end();
    });

    uploadDataStream.once('readable', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
      return _regeneratorRuntime.wrap(function _callee8$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.prev = 0;
              _context14.next = 3;
              return _this7.job.ready();

            case 3:
              // pipe upload data to batch API request stream
              uploadDataStream.pipe(_this7._createRequestStream());
              _context14.next = 9;
              break;

            case 6:
              _context14.prev = 6;
              _context14.t0 = _context14["catch"](0);

              _this7.emit('error', _context14.t0);

            case 9:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee8, null, [[0, 6]]);
    }))); // duplex data stream, opened access to API programmers by Batch#stream()

    _this7._dataStream = concatStreamsAsDuplex(uploadDataStream, downloadDataStream);
    return _this7;
  }
  /**
   * Connect batch API and create stream instance of request/response
   *
   * @private
   */


  _createClass(Batch, [{
    key: "_createRequestStream",
    value: function _createRequestStream() {
      var _this8 = this;

      var bulk = this._bulk;
      var logger = bulk._logger;

      var req = bulk._request({
        method: 'POST',
        path: '/job/' + this.job.id + '/batch',
        headers: {
          'Content-Type': 'text/csv'
        },
        responseType: 'application/xml'
      });

      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var _res2;

        return _regeneratorRuntime.wrap(function _callee9$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.prev = 0;
                _context15.next = 3;
                return req;

              case 3:
                _res2 = _context15.sent;
                logger.debug(_res2.batchInfo);
                _this8.id = _res2.batchInfo.id;

                _this8.emit('queue', _res2.batchInfo);

                _context15.next = 12;
                break;

              case 9:
                _context15.prev = 9;
                _context15.t0 = _context15["catch"](0);

                _this8.emit('error', _context15.t0);

              case 12:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee9, null, [[0, 9]]);
      }))();

      return req.stream();
    }
    /**
     * Implementation of Writable
     */

  }, {
    key: "_write",
    value: function _write(record_, enc, cb) {
      var Id = record_.Id,
          type = record_.type,
          attributes = record_.attributes,
          rrec = _objectWithoutProperties(record_, ["Id", "type", "attributes"]);

      var record;

      switch (this.job.operation) {
        case 'insert':
          record = rrec;
          break;

        case 'delete':
        case 'hardDelete':
          record = {
            Id: Id
          };
          break;

        default:
          record = _objectSpread({
            Id: Id
          }, rrec);
      }

      this._uploadStream.write(record, enc, cb);
    }
    /**
     * Returns duplex stream which accepts CSV data input and batch result output
     */

  }, {
    key: "stream",
    value: function stream() {
      return this._dataStream;
    }
    /**
     * Execute batch operation
     */

  }, {
    key: "execute",
    value: function execute(input) {
      var _this9 = this;

      // if batch is already executed
      if (this._result) {
        throw new Error('Batch already executed.');
      }

      this._result = new _Promise(function (resolve, reject) {
        _this9.once('response', resolve);

        _this9.once('error', reject);
      });

      if (isObject(input) && 'pipe' in input && isFunction(input.pipe)) {
        // if input has stream.Readable interface
        input.pipe(this._dataStream);
      } else {
        if (_Array$isArray(input)) {
          var _iterator = _createForOfIteratorHelper(input),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var record = _step.value;

              for (var _i = 0, _Object$keys = _Object$keys2(record); _i < _Object$keys.length; _i++) {
                var key = _Object$keys[_i];

                if (typeof record[key] === 'boolean') {
                  record[key] = String(record[key]);
                }
              }

              this.write(record);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          this.end();
        } else if (typeof input === 'string') {
          this._dataStream.write(input, 'utf8');

          this._dataStream.end();
        }
      } // return Batch instance for chaining


      return this;
    }
  }, {
    key: "then",

    /**
     * Promise/A+ interface
     * Delegate to promise, return promise instance for batch result
     */
    value: function then(onResolved, onReject) {
      if (!this._result) {
        this.execute();
      }

      return this._result.then(onResolved, onReject);
    }
    /**
     * Check the latest batch status in server
     */

  }, {
    key: "check",
    value: function () {
      var _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var bulk, logger, jobId, batchId, res;
        return _regeneratorRuntime.wrap(function _callee10$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                jobId = this.job.id;
                batchId = this.id;

                if (!(!jobId || !batchId)) {
                  _context16.next = 6;
                  break;
                }

                throw new Error('Batch not started.');

              case 6:
                _context16.next = 8;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch/' + batchId,
                  responseType: 'application/xml'
                });

              case 8:
                res = _context16.sent;
                logger.debug(res.batchInfo);
                return _context16.abrupt("return", res.batchInfo);

              case 11:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee10, this);
      }));

      function check() {
        return _check.apply(this, arguments);
      }

      return check;
    }()
    /**
     * Polling the batch result and retrieve
     */

  }, {
    key: "poll",
    value: function poll(interval, timeout) {
      var _this10 = this;

      var jobId = this.job.id;
      var batchId = this.id;

      if (!jobId || !batchId) {
        throw new Error('Batch not started.');
      }

      var startTime = new Date().getTime();

      var poll = /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
          var now, _err, res;

          return _regeneratorRuntime.wrap(function _callee11$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  now = new Date().getTime();

                  if (!(startTime + timeout < now)) {
                    _context17.next = 5;
                    break;
                  }

                  _err = new PollingTimeoutError('Polling time out. Job Id = ' + jobId + ' , batch Id = ' + batchId, jobId, batchId);

                  _this10.emit('error', _err);

                  return _context17.abrupt("return");

                case 5:
                  _context17.prev = 5;
                  _context17.next = 8;
                  return _this10.check();

                case 8:
                  res = _context17.sent;
                  _context17.next = 15;
                  break;

                case 11:
                  _context17.prev = 11;
                  _context17.t0 = _context17["catch"](5);

                  _this10.emit('error', _context17.t0);

                  return _context17.abrupt("return");

                case 15:
                  if (res.state === 'Failed') {
                    if (_parseInt(res.numberRecordsProcessed, 10) > 0) {
                      _this10.retrieve();
                    } else {
                      _this10.emit('error', new Error(res.stateMessage));
                    }
                  } else if (res.state === 'Completed') {
                    _this10.retrieve();
                  } else {
                    _this10.emit('progress', res);

                    _setTimeout(poll, interval);
                  }

                case 16:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee11, null, [[5, 11]]);
        }));

        return function poll() {
          return _ref7.apply(this, arguments);
        };
      }();

      _setTimeout(poll, interval);
    }
    /**
     * Retrieve batch result
     */

  }, {
    key: "retrieve",
    value: function () {
      var _retrieve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var bulk, jobId, job, batchId, resp, results, _context18, _res3, resultId, _res4;

        return _regeneratorRuntime.wrap(function _callee12$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                bulk = this._bulk;
                jobId = this.job.id;
                job = this.job;
                batchId = this.id;

                if (!(!jobId || !batchId)) {
                  _context19.next = 6;
                  break;
                }

                throw new Error('Batch not started.');

              case 6:
                _context19.prev = 6;
                _context19.next = 9;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch/' + batchId + '/result'
                });

              case 9:
                resp = _context19.sent;

                if (job.operation === 'query' || job.operation === 'queryAll') {
                  _res3 = resp;
                  resultId = _res3['result-list'].result;
                  results = _mapInstanceProperty(_context18 = _Array$isArray(resultId) ? resultId : [resultId]).call(_context18, function (id) {
                    return {
                      id: id,
                      batchId: batchId,
                      jobId: jobId
                    };
                  });
                } else {
                  _res4 = resp;
                  results = _mapInstanceProperty(_res4).call(_res4, function (ret) {
                    return {
                      id: ret.Id || null,
                      success: ret.Success === 'true',
                      errors: ret.Error ? [ret.Error] : []
                    };
                  });
                }

                this.emit('response', results);
                return _context19.abrupt("return", results);

              case 15:
                _context19.prev = 15;
                _context19.t0 = _context19["catch"](6);
                this.emit('error', _context19.t0);
                throw _context19.t0;

              case 19:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee12, this, [[6, 15]]);
      }));

      function retrieve() {
        return _retrieve.apply(this, arguments);
      }

      return retrieve;
    }()
    /**
     * Fetch query result as a record stream
     * @param {String} resultId - Result id
     * @returns {RecordStream} - Record stream, convertible to CSV data stream
     */

  }, {
    key: "result",
    value: function result(resultId) {
      var jobId = this.job.id;
      var batchId = this.id;

      if (!jobId || !batchId) {
        throw new Error('Batch not started.');
      }

      var resultStream = new Parsable();
      var resultDataStream = resultStream.stream('csv');

      this._bulk._request({
        method: 'GET',
        path: '/job/' + jobId + '/batch/' + batchId + '/result/' + resultId,
        responseType: 'application/octet-stream'
      }).stream().pipe(resultDataStream);

      return resultStream;
    }
  }]);

  return Batch;
}(Writable);
/*--------------------------------------------*/

/**
 *
 */

var BulkApi = /*#__PURE__*/function (_HttpApi) {
  _inherits(BulkApi, _HttpApi);

  var _super4 = _createSuper(BulkApi);

  function BulkApi() {
    _classCallCheck(this, BulkApi);

    return _super4.apply(this, arguments);
  }

  _createClass(BulkApi, [{
    key: "beforeSend",
    value: function beforeSend(request) {
      var _this$_conn$accessTok;

      request.headers = _objectSpread(_objectSpread({}, request.headers), {}, {
        'X-SFDC-SESSION': (_this$_conn$accessTok = this._conn.accessToken) !== null && _this$_conn$accessTok !== void 0 ? _this$_conn$accessTok : ''
      });
    }
  }, {
    key: "isSessionExpired",
    value: function isSessionExpired(response) {
      return response.statusCode === 400 && /<exceptionCode>InvalidSessionId<\/exceptionCode>/.test(response.body);
    }
  }, {
    key: "hasErrorInResponseBody",
    value: function hasErrorInResponseBody(body) {
      return !!body.error;
    }
  }, {
    key: "parseError",
    value: function parseError(body) {
      return {
        errorCode: body.error.exceptionCode,
        message: body.error.exceptionMessage
      };
    }
  }]);

  return BulkApi;
}(HttpApi);
/*--------------------------------------------*/

/**
 * Class for Bulk API
 *
 * @class
 */


export var Bulk = /*#__PURE__*/function () {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  /**
   *
   */
  function Bulk(conn) {
    _classCallCheck(this, Bulk);

    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "_logger", void 0);

    _defineProperty(this, "pollInterval", 1000);

    _defineProperty(this, "pollTimeout", 10000);

    this._conn = conn;
    this._logger = conn._logger;
  }
  /**
   *
   */


  _createClass(Bulk, [{
    key: "_request",
    value: function _request(request_) {
      var conn = this._conn;

      var path = request_.path,
          responseType = request_.responseType,
          rreq = _objectWithoutProperties(request_, ["path", "responseType"]);

      var baseUrl = [conn.instanceUrl, 'services/async', conn.version].join('/');

      var request = _objectSpread(_objectSpread({}, rreq), {}, {
        url: baseUrl + path
      });

      return new BulkApi(this._conn, {
        responseType: responseType
      }).request(request);
    }
    /**
     * Create and start bulkload job and batch
     */

  }, {
    key: "load",
    value: function load(type, operation, optionsOrInput, input) {
      var _this11 = this;

      var options = {};

      if (typeof optionsOrInput === 'string' || _Array$isArray(optionsOrInput) || isObject(optionsOrInput) && 'pipe' in optionsOrInput && typeof optionsOrInput.pipe === 'function') {
        // when options is not plain hash object, it is omitted
        input = optionsOrInput;
      } else {
        options = optionsOrInput;
      }

      var job = this.createJob(type, operation, options);
      var batch = job.createBatch();

      var cleanup = function cleanup() {
        return job.close();
      };

      var cleanupOnError = function cleanupOnError(err) {
        if (err.name !== 'PollingTimeout') {
          cleanup();
        }
      };

      batch.on('response', cleanup);
      batch.on('error', cleanupOnError);
      batch.on('queue', function () {
        batch === null || batch === void 0 ? void 0 : batch.poll(_this11.pollInterval, _this11.pollTimeout);
      });
      return batch.execute(input);
    }
    /**
     * Execute bulk query and get record stream
     */

  }, {
    key: "query",
    value: function query(soql) {
      var _this12 = this;

      var m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);

      if (!m) {
        throw new Error('No sobject type found in query, maybe caused by invalid SOQL.');
      }

      var type = m[1];
      var recordStream = new Parsable();
      var dataStream = recordStream.stream('csv');

      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var results, streams;
        return _regeneratorRuntime.wrap(function _callee13$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.prev = 0;
                _context20.next = 3;
                return _this12.load(type, 'query', soql);

              case 3:
                results = _context20.sent;
                streams = _mapInstanceProperty(results).call(results, function (result) {
                  return _this12.job(result.jobId).batch(result.batchId).result(result.id).stream();
                });
                joinStreams(streams).pipe(dataStream);
                _context20.next = 11;
                break;

              case 8:
                _context20.prev = 8;
                _context20.t0 = _context20["catch"](0);
                recordStream.emit('error', _context20.t0);

              case 11:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee13, null, [[0, 8]]);
      }))();

      return recordStream;
    }
    /**
     * Create a new job instance
     */

  }, {
    key: "createJob",
    value: function createJob(type, operation) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Job(this, type, operation, options);
    }
    /**
     * Get a job instance specified by given job ID
     *
     * @param {String} jobId - Job ID
     * @returns {Bulk~Job}
     */

  }, {
    key: "job",
    value: function job(jobId) {
      return new Job(this, null, null, null, jobId);
    }
  }]);

  return Bulk;
}();
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */

registerModule('bulk', function (conn) {
  return new Bulk(conn);
});
export default Bulk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvYnVsay50cyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJXcml0YWJsZSIsImpvaW5TdHJlYW1zIiwiU2VyaWFsaXphYmxlIiwiUGFyc2FibGUiLCJIdHRwQXBpIiwicmVnaXN0ZXJNb2R1bGUiLCJjb25jYXRTdHJlYW1zQXNEdXBsZXgiLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJKb2IiLCJidWxrIiwidHlwZSIsIm9wZXJhdGlvbiIsIm9wdGlvbnMiLCJqb2JJZCIsIl9idWxrIiwiaWQiLCJzdGF0ZSIsIl9iYXRjaGVzIiwib24iLCJlcnJvciIsIl9lcnJvciIsIl9qb2JJbmZvIiwiY2hlY2siLCJFcnJvciIsInRvTG93ZXJDYXNlIiwiYm9keSIsImV4dElkRmllbGQiLCJjb25jdXJyZW5jeU1vZGUiLCJhc3NpZ25tZW50UnVsZUlkIiwiX3JlcXVlc3QiLCJtZXRob2QiLCJwYXRoIiwiaGVhZGVycyIsInJlc3BvbnNlVHlwZSIsInJlcyIsImVtaXQiLCJqb2JJbmZvIiwiYmF0Y2giLCJCYXRjaCIsImJhdGNoSWQiLCJsb2dnZXIiLCJfbG9nZ2VyIiwicmVhZHkiLCJkZWJ1ZyIsIm9iamVjdCIsInJlc29sdmUiLCJvcGVuIiwidGhlbiIsImJhdGNoSW5mb0xpc3QiLCJiYXRjaEluZm8iLCJfY2hhbmdlU3RhdGUiLCJQb2xsaW5nVGltZW91dEVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJqb2IiLCJvYmplY3RNb2RlIiwiZXhlY3V0ZSIsImNvbnZlcnRlck9wdGlvbnMiLCJudWxsVmFsdWUiLCJ1cGxvYWRTdHJlYW0iLCJfdXBsb2FkU3RyZWFtIiwidXBsb2FkRGF0YVN0cmVhbSIsInN0cmVhbSIsImRvd25sb2FkU3RyZWFtIiwiX2Rvd25sb2FkU3RyZWFtIiwiZG93bmxvYWREYXRhU3RyZWFtIiwiZW5kIiwib25jZSIsInBpcGUiLCJfY3JlYXRlUmVxdWVzdFN0cmVhbSIsIl9kYXRhU3RyZWFtIiwicmVxIiwicmVjb3JkXyIsImVuYyIsImNiIiwiSWQiLCJhdHRyaWJ1dGVzIiwicnJlYyIsInJlY29yZCIsIndyaXRlIiwiaW5wdXQiLCJfcmVzdWx0IiwicmVqZWN0Iiwia2V5IiwiU3RyaW5nIiwib25SZXNvbHZlZCIsIm9uUmVqZWN0IiwiaW50ZXJ2YWwiLCJ0aW1lb3V0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJwb2xsIiwibm93IiwiZXJyIiwibnVtYmVyUmVjb3Jkc1Byb2Nlc3NlZCIsInJldHJpZXZlIiwic3RhdGVNZXNzYWdlIiwicmVzcCIsInJlc3VsdElkIiwicmVzdWx0IiwicmVzdWx0cyIsInJldCIsInN1Y2Nlc3MiLCJTdWNjZXNzIiwiZXJyb3JzIiwicmVzdWx0U3RyZWFtIiwicmVzdWx0RGF0YVN0cmVhbSIsIkJ1bGtBcGkiLCJyZXF1ZXN0IiwiX2Nvbm4iLCJhY2Nlc3NUb2tlbiIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsInRlc3QiLCJlcnJvckNvZGUiLCJleGNlcHRpb25Db2RlIiwiZXhjZXB0aW9uTWVzc2FnZSIsIkJ1bGsiLCJjb25uIiwicmVxdWVzdF8iLCJycmVxIiwiYmFzZVVybCIsImluc3RhbmNlVXJsIiwidmVyc2lvbiIsImpvaW4iLCJ1cmwiLCJvcHRpb25zT3JJbnB1dCIsImNyZWF0ZUpvYiIsImNyZWF0ZUJhdGNoIiwiY2xlYW51cCIsImNsb3NlIiwiY2xlYW51cE9uRXJyb3IiLCJwb2xsSW50ZXJ2YWwiLCJwb2xsVGltZW91dCIsInNvcWwiLCJtIiwicmVwbGFjZSIsIm1hdGNoIiwicmVjb3JkU3RyZWFtIiwiZGF0YVN0cmVhbSIsImxvYWQiLCJzdHJlYW1zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxZQUFULFFBQTZCLFFBQTdCO0FBQ0EsU0FBMkJDLFFBQTNCLFFBQTJDLFFBQTNDO0FBQ0EsT0FBT0MsV0FBUCxNQUF3QixhQUF4QjtB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QUF3Q0ssS0FBeEMsQ0FBUDtBQUNEO0FBeklIOztBQUFBO0FBQUE7QUE0SUE7O0FBQ0E7QUFDQTtBQUNBOztBQUNBVCxjQUFjLENBQUMsTUFBRCxFQUFTLFVBQUNtSCxJQUFEO0FBQUEsU0FBVSxJQUFJRCxJQUFKLENBQVNDLElBQVQsQ0FBVjtBQUFBLENBQVQsQ0FBZDtBQUVBLGVBQWVELElBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1hbmFnZXMgU2FsZXNmb3JjZSBCdWxrIEFQSSByZWxhdGVkIG9wZXJhdGlvbnNcbiAqIEBhdXRob3IgU2hpbmljaGkgVG9taXRhIDxzaGluaWNoaS50b21pdGFAZ21haWwuY29tPlxuICovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgRHVwbGV4LCBSZWFkYWJsZSwgV3JpdGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IGpvaW5TdHJlYW1zIGZyb20gJ211bHRpc3RyZWFtJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4uL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IHsgU2VyaWFsaXphYmxlLCBQYXJzYWJsZSB9IGZyb20gJy4uL3JlY29yZC1zdHJlYW0nO1xuaW1wb3J0IEh0dHBBcGkgZnJvbSAnLi4vaHR0cC1hcGknO1xuaW1wb3J0IHsgcmVnaXN0ZXJNb2R1bGUgfSBmcm9tICcuLi9qc2ZvcmNlJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL3V0aWwvbG9nZ2VyJztcbmltcG9ydCB7IGNvbmNhdFN0cmVhbXNBc0R1cGxleCB9IGZyb20gJy4uL3V0aWwvc3RyZWFtJztcbmltcG9ydCB7XG4gIEh0dHBNZXRob2RzLFxuICBIdHRwUmVxdWVzdCxcbiAgSHR0cFJlc3BvbnNlLFxuICBSZWNvcmQsXG4gIFNjaGVtYSxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNPYmplY3QgfSBmcm9tICcuLi91dGlsL2Z1bmN0aW9uJztcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmV4cG9ydCB0eXBlIEJ1bGtPcGVyYXRpb24gPVxuICB8ICdpbnNlcnQnXG4gIHwgJ3VwZGF0ZSdcbiAgfCAndXBzZXJ0J1xuICB8ICdkZWxldGUnXG4gIHwgJ2hhcmREZWxldGUnXG4gIHwgJ3F1ZXJ5J1xuICB8ICdxdWVyeUFsbCc7XG5cbmV4cG9ydCB0eXBlIEJ1bGtPcHRpb25zID0ge1xuICBleHRJZEZpZWxkPzogc3RyaW5nO1xuICBjb25jdXJyZW5jeU1vZGU/OiAnU2VyaWFsJyB8ICdQYXJhbGxlbCc7XG4gIGFzc2lnbm1lbnRSdWxlSWQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBKb2JTdGF0ZSA9ICdPcGVuJyB8ICdDbG9zZWQnIHwgJ0Fib3J0ZWQnIHwgJ0ZhaWxlZCcgfCAnVW5rbm93bic7XG5cbmV4cG9ydCB0eXBlIEpvYkluZm8gPSB7XG4gIGlkOiBzdHJpbmc7XG4gIG9iamVjdDogc3RyaW5nO1xuICBvcGVyYXRpb246IEJ1bGtPcGVyYXRpb247XG4gIHN0YXRlOiBKb2JTdGF0ZTtcbn07XG5cbnR5cGUgSm9iSW5mb1Jlc3BvbnNlID0ge1xuICBqb2JJbmZvOiBKb2JJbmZvO1xufTtcblxuZXhwb3J0IHR5cGUgQmF0Y2hTdGF0ZSA9XG4gIHwgJ1F1ZXVlZCdcbiAgfCAnSW5Qcm9ncmVzcydcbiAgfCAnQ29tcGxldGVkJ1xuICB8ICdGYWlsZWQnXG4gIHwgJ05vdFByb2Nlc3NlZCc7XG5cbmV4cG9ydCB0eXBlIEJhdGNoSW5mbyA9IHtcbiAgaWQ6IHN0cmluZztcbiAgam9iSWQ6IHN0cmluZztcbiAgc3RhdGU6IEJhdGNoU3RhdGU7XG4gIHN0YXRlTWVzc2FnZTogc3RyaW5nO1xuICBudW1iZXJSZWNvcmRzUHJvY2Vzc2VkOiBzdHJpbmc7XG4gIG51bWJlclJlY29yZHNGYWlsZWQ6IHN0cmluZztcbiAgdG90YWxQcm9jZXNzaW5nVGltZTogc3RyaW5nO1xufTtcblxudHlwZSBCYXRjaEluZm9SZXNwb25zZSA9IHtcbiAgYmF0Y2hJbmZvOiBCYXRjaEluZm87XG59O1xuXG50eXBlIEJhdGNoSW5mb0xpc3RSZXNwb25zZSA9IHtcbiAgYmF0Y2hJbmZvTGlzdDoge1xuICAgIGJhdGNoSW5mbzogQmF0Y2hJbmZvIHwgQmF0Y2hJbmZvW107XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBCdWxrUXVlcnlCYXRjaFJlc3VsdCA9IEFycmF5PHtcbiAgaWQ6IHN0cmluZztcbiAgYmF0Y2hJZDogc3RyaW5nO1xuICBqb2JJZDogc3RyaW5nO1xufT47XG5cbmV4cG9ydCB0eXBlIEJ1bGtJbmdlc3RCYXRjaFJlc3VsdCA9IEFycmF5PHtcbiAgaWQ6IHN0cmluZyB8IG51bGw7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGVycm9yczogc3RyaW5nW107XG59PjtcblxuZXhwb3J0IHR5cGUgQmF0Y2hSZXN1bHQ8T3ByIGV4dGVuZHMgQnVsa09wZXJhdGlvbj4gPSBPcHIgZXh0ZW5kc1xuICB8ICdxdWVyeSdcbiAgfCAncXVlcnlBbGwnXG4gID8gQnVsa1F1ZXJ5QmF0Y2hSZXN1bHRcbiAgOiBCdWxrSW5nZXN0QmF0Y2hSZXN1bHQ7XG5cbnR5cGUgQnVsa0luZ2VzdFJlc3VsdFJlc3BvbnNlID0gQXJyYXk8e1xuICBJZDogc3RyaW5nO1xuICBTdWNjZXNzOiBzdHJpbmc7XG4gIEVycm9yOiBzdHJpbmc7XG59PjtcblxudHlwZSBCdWxrUXVlcnlSZXN1bHRSZXNwb25zZSA9IHtcbiAgJ3Jlc3VsdC1saXN0Jzoge1xuICAgIHJlc3VsdDogc3RyaW5nIHwgc3RyaW5nW107XG4gIH07XG59O1xuXG50eXBlIEJ1bGtSZXF1ZXN0ID0ge1xuICBtZXRob2Q6IEh0dHBNZXRob2RzO1xuICBwYXRoOiBzdHJpbmc7XG4gIGJvZHk/OiBzdHJpbmc7XG4gIGhlYWRlcnM/OiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgcmVzcG9uc2VUeXBlPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBDbGFzcyBmb3IgQnVsayBBUEkgSm9iXG4gKi9cbmV4cG9ydCBjbGFzcyBKb2I8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE9wciBleHRlbmRzIEJ1bGtPcGVyYXRpb25cbj4gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICB0eXBlOiBzdHJpbmcgfCBudWxsO1xuICBvcGVyYXRpb246IE9wciB8IG51bGw7XG4gIG9wdGlvbnM6IEJ1bGtPcHRpb25zO1xuICBpZDogc3RyaW5nIHwgbnVsbDtcbiAgc3RhdGU6IEpvYlN0YXRlO1xuICBfYnVsazogQnVsazxTPjtcbiAgX2JhdGNoZXM6IHsgW2lkOiBzdHJpbmddOiBCYXRjaDxTLCBPcHI+IH07XG4gIF9qb2JJbmZvOiBQcm9taXNlPEpvYkluZm8+IHwgdW5kZWZpbmVkO1xuICBfZXJyb3I6IEVycm9yIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgYnVsazogQnVsazxTPixcbiAgICB0eXBlOiBzdHJpbmcgfCBudWxsLFxuICAgIG9wZXJhdGlvbjogT3ByIHwgbnVsbCxcbiAgICBvcHRpb25zOiBCdWxrT3B0aW9ucyB8IG51bGwsXG4gICAgam9iSWQ/OiBzdHJpbmcsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYnVsayA9IGJ1bGs7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuaWQgPSBqb2JJZCA/PyBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmlkID8gJ09wZW4nIDogJ1Vua25vd24nO1xuICAgIHRoaXMuX2JhdGNoZXMgPSB7fTtcbiAgICAvLyBkZWZhdWx0IGVycm9yIGhhbmRsZXIgdG8ga2VlcCB0aGUgbGF0ZXN0IGVycm9yXG4gICAgdGhpcy5vbignZXJyb3InLCAoZXJyb3IpID0+ICh0aGlzLl9lcnJvciA9IGVycm9yKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGxhdGVzdCBqb2JJbmZvIGZyb20gY2FjaGVcbiAgICovXG4gIGluZm8oKSB7XG4gICAgLy8gaWYgY2FjaGUgaXMgbm90IGF2YWlsYWJsZSwgY2hlY2sgdGhlIGxhdGVzdFxuICAgIGlmICghdGhpcy5fam9iSW5mbykge1xuICAgICAgdGhpcy5fam9iSW5mbyA9IHRoaXMuY2hlY2soKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2pvYkluZm87XG4gIH1cblxuICAvKipcbiAgICogT3BlbiBuZXcgam9iIGFuZCBnZXQgam9iaW5mb1xuICAgKi9cbiAgb3BlbigpOiBQcm9taXNlPEpvYkluZm8+IHtcbiAgICBjb25zdCBidWxrID0gdGhpcy5fYnVsaztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgLy8gaWYgc29iamVjdCB0eXBlIC8gb3BlcmF0aW9uIGlzIG5vdCBwcm92aWRlZFxuICAgIGlmICghdGhpcy50eXBlIHx8ICF0aGlzLm9wZXJhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0eXBlIC8gb3BlcmF0aW9uIGlzIHJlcXVpcmVkIHRvIG9wZW4gYSBuZXcgam9iJyk7XG4gICAgfVxuXG4gICAgLy8gaWYgbm90IHJlcXVlc3RlZCBvcGVuaW5nIGpvYlxuICAgIGlmICghdGhpcy5fam9iSW5mbykge1xuICAgICAgbGV0IG9wZXJhdGlvbiA9IHRoaXMub3BlcmF0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAob3BlcmF0aW9uID09PSAnaGFyZGRlbGV0ZScpIHtcbiAgICAgICAgb3BlcmF0aW9uID0gJ2hhcmREZWxldGUnO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gJ3F1ZXJ5YWxsJykge1xuICAgICAgICBvcGVyYXRpb24gPSAncXVlcnlBbGwnO1xuICAgICAgfVxuICAgICAgY29uc3QgYm9keSA9IGBcbjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxuPGpvYkluZm8gIHhtbG5zPVwiaHR0cDovL3d3dy5mb3JjZS5jb20vMjAwOS8wNi9hc3luY2FwaS9kYXRhbG9hZFwiPlxuICA8b3BlcmF0aW9uPiR7b3BlcmF0aW9ufTwvb3BlcmF0aW9uPlxuICA8b2JqZWN0PiR7dGhpcy50eXBlfTwvb2JqZWN0PlxuICAke1xuICAgIG9wdGlvbnMuZXh0SWRGaWVsZFxuICAgICAgPyBgPGV4dGVybmFsSWRGaWVsZE5hbWU+JHtvcHRpb25zLmV4dElkRmllbGR9PC9leHRlcm5hbElkRmllbGROYW1lPmBcbiAgICAgIDogJydcbiAgfVxuICAke1xuICAgIG9wdGlvbnMuY29uY3VycmVuY3lNb2RlXG4gICAgICA/IGA8Y29uY3VycmVuY3lNb2RlPiR7b3B0aW9ucy5jb25jdXJyZW5jeU1vZGV9PC9jb25jdXJyZW5jeU1vZGU+YFxuICAgICAgOiAnJ1xuICB9XG4gICR7XG4gICAgb3B0aW9ucy5hc3NpZ25tZW50UnVsZUlkXG4gICAgICA/IGA8YXNzaWdubWVudFJ1bGVJZD4ke29wdGlvbnMuYXNzaWdubWVudFJ1bGVJZH08L2Fzc2lnbm1lbnRSdWxlSWQ+YFxuICAgICAgOiAnJ1xuICB9XG4gIDxjb250ZW50VHlwZT5DU1Y8L2NvbnRlbnRUeXBlPlxuPC9qb2JJbmZvPlxuICAgICAgYC50cmltKCk7XG5cbiAgICAgIHRoaXMuX2pvYkluZm8gPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGJ1bGsuX3JlcXVlc3Q8Sm9iSW5mb1Jlc3BvbnNlPih7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHBhdGg6ICcvam9iJyxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veG1sOyBjaGFyc2V0PXV0Zi04JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdhcHBsaWNhdGlvbi94bWwnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZW1pdCgnb3BlbicsIHJlcy5qb2JJbmZvKTtcbiAgICAgICAgICB0aGlzLmlkID0gcmVzLmpvYkluZm8uaWQ7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IHJlcy5qb2JJbmZvLnN0YXRlO1xuICAgICAgICAgIHJldHVybiByZXMuam9iSW5mbztcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fam9iSW5mbztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYmF0Y2ggaW5zdGFuY2UgaW4gdGhlIGpvYlxuICAgKi9cbiAgY3JlYXRlQmF0Y2goKTogQmF0Y2g8UywgT3ByPiB7XG4gICAgY29uc3QgYmF0Y2ggPSBuZXcgQmF0Y2godGhpcyk7XG4gICAgYmF0Y2gub24oJ3F1ZXVlJywgKCkgPT4ge1xuICAgICAgdGhpcy5fYmF0Y2hlc1tiYXRjaC5pZCFdID0gYmF0Y2g7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJhdGNoO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGJhdGNoIGluc3RhbmNlIHNwZWNpZmllZCBieSBnaXZlbiBiYXRjaCBJRFxuICAgKi9cbiAgYmF0Y2goYmF0Y2hJZDogc3RyaW5nKTogQmF0Y2g8UywgT3ByPiB7XG4gICAgbGV0IGJhdGNoID0gdGhpcy5fYmF0Y2hlc1tiYXRjaElkXTtcbiAgICBpZiAoIWJhdGNoKSB7XG4gICAgICBiYXRjaCA9IG5ldyBCYXRjaCh0aGlzLCBiYXRjaElkKTtcbiAgICAgIHRoaXMuX2JhdGNoZXNbYmF0Y2hJZF0gPSBiYXRjaDtcbiAgICB9XG4gICAgcmV0dXJuIGJhdGNoO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBsYXRlc3Qgam9iIHN0YXR1cyBmcm9tIHNlcnZlclxuICAgKi9cbiAgY2hlY2soKSB7XG4gICAgY29uc3QgYnVsayA9IHRoaXMuX2J1bGs7XG4gICAgY29uc3QgbG9nZ2VyID0gYnVsay5fbG9nZ2VyO1xuXG4gICAgdGhpcy5fam9iSW5mbyA9IChhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBqb2JJZCA9IGF3YWl0IHRoaXMucmVhZHkoKTtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGJ1bGsuX3JlcXVlc3Q8Sm9iSW5mb1Jlc3BvbnNlPih7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHBhdGg6ICcvam9iLycgKyBqb2JJZCxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXBwbGljYXRpb24veG1sJyxcbiAgICAgIH0pO1xuICAgICAgbG9nZ2VyLmRlYnVnKHJlcy5qb2JJbmZvKTtcbiAgICAgIHRoaXMuaWQgPSByZXMuam9iSW5mby5pZDtcbiAgICAgIHRoaXMudHlwZSA9IHJlcy5qb2JJbmZvLm9iamVjdDtcbiAgICAgIHRoaXMub3BlcmF0aW9uID0gcmVzLmpvYkluZm8ub3BlcmF0aW9uIGFzIE9wcjtcbiAgICAgIHRoaXMuc3RhdGUgPSByZXMuam9iSW5mby5zdGF0ZTtcbiAgICAgIHJldHVybiByZXMuam9iSW5mbztcbiAgICB9KSgpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2pvYkluZm87XG4gIH1cblxuICAvKipcbiAgICogV2FpdCB0aWxsIHRoZSBqb2IgaXMgYXNzaWduZWQgdG8gc2VydmVyXG4gICAqL1xuICByZWFkeSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmlkXG4gICAgICA/IFByb21pc2UucmVzb2x2ZSh0aGlzLmlkKVxuICAgICAgOiB0aGlzLm9wZW4oKS50aGVuKCh7IGlkIH0pID0+IGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFsbCByZWdpc3RlcmVkIGJhdGNoIGluZm8gaW4gam9iXG4gICAqL1xuICBhc3luYyBsaXN0KCkge1xuICAgIGNvbnN0IGJ1bGsgPSB0aGlzLl9idWxrO1xuICAgIGNvbnN0IGxvZ2dlciA9IGJ1bGsuX2xvZ2dlcjtcbiAgICBjb25zdCBqb2JJZCA9IGF3YWl0IHRoaXMucmVhZHkoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBidWxrLl9yZXF1ZXN0PEJhdGNoSW5mb0xpc3RSZXNwb25zZT4oe1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHBhdGg6ICcvam9iLycgKyBqb2JJZCArICcvYmF0Y2gnLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYXBwbGljYXRpb24veG1sJyxcbiAgICB9KTtcbiAgICBsb2dnZXIuZGVidWcocmVzLmJhdGNoSW5mb0xpc3QuYmF0Y2hJbmZvKTtcbiAgICBjb25zdCBiYXRjaEluZm9MaXN0ID0gQXJyYXkuaXNBcnJheShyZXMuYmF0Y2hJbmZvTGlzdC5iYXRjaEluZm8pXG4gICAgICA/IHJlcy5iYXRjaEluZm9MaXN0LmJhdGNoSW5mb1xuICAgICAgOiBbcmVzLmJhdGNoSW5mb0xpc3QuYmF0Y2hJbmZvXTtcbiAgICByZXR1cm4gYmF0Y2hJbmZvTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSBvcGVuZWQgam9iXG4gICAqL1xuICBhc3luYyBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGpvYkluZm8gPSBhd2FpdCB0aGlzLl9jaGFuZ2VTdGF0ZSgnQ2xvc2VkJyk7XG4gICAgICB0aGlzLmlkID0gbnVsbDtcbiAgICAgIHRoaXMuZW1pdCgnY2xvc2UnLCBqb2JJbmZvKTtcbiAgICAgIHJldHVybiBqb2JJbmZvO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgc3RhdHVzIHRvIGFib3J0XG4gICAqL1xuICBhc3luYyBhYm9ydCgpIHtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGpvYkluZm8gPSBhd2FpdCB0aGlzLl9jaGFuZ2VTdGF0ZSgnQWJvcnRlZCcpO1xuICAgICAgdGhpcy5pZCA9IG51bGw7XG4gICAgICB0aGlzLmVtaXQoJ2Fib3J0Jywgam9iSW5mbyk7XG4gICAgICByZXR1cm4gam9iSW5mbztcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXN5bmMgX2NoYW5nZVN0YXRlKHN0YXRlOiBKb2JTdGF0ZSkge1xuICAgIGNvbnN0IGJ1bGsgPSB0aGlzLl9idWxrO1xuICAgIGNvbnN0IGxvZ2dlciA9IGJ1bGsuX2xvZ2dlcjtcblxuICAgIHRoaXMuX2pvYkluZm8gPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgam9iSWQgPSBhd2FpdCB0aGlzLnJlYWR5KCk7XG4gICAgICBjb25zdCBib2R5ID0gYCBcbjw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCI/PlxuICA8am9iSW5mbyB4bWxucz1cImh0dHA6Ly93d3cuZm9yY2UuY29tLzIwMDkvMDYvYXN5bmNhcGkvZGF0YWxvYWRcIj5cbiAgPHN0YXRlPiR7c3RhdGV9PC9zdGF0ZT5cbjwvam9iSW5mbz5cbiAgICAgIGAudHJpbSgpO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYnVsay5fcmVxdWVzdDxKb2JJbmZvUmVzcG9uc2U+KHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6ICcvam9iLycgKyBqb2JJZCxcbiAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veG1sOyBjaGFyc2V0PXV0Zi04JyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXBwbGljYXRpb24veG1sJyxcbiAgICAgIH0pO1xuICAgICAgbG9nZ2VyLmRlYnVnKHJlcy5qb2JJbmZvKTtcbiAgICAgIHRoaXMuc3RhdGUgPSByZXMuam9iSW5mby5zdGF0ZTtcbiAgICAgIHJldHVybiByZXMuam9iSW5mbztcbiAgICB9KSgpO1xuICAgIHJldHVybiB0aGlzLl9qb2JJbmZvO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuY2xhc3MgUG9sbGluZ1RpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgam9iSWQ6IHN0cmluZztcbiAgYmF0Y2hJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBqb2JJZDogc3RyaW5nLCBiYXRjaElkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLm5hbWUgPSAnUG9sbGluZ1RpbWVvdXQnO1xuICAgIHRoaXMuam9iSWQgPSBqb2JJZDtcbiAgICB0aGlzLmJhdGNoSWQgPSBiYXRjaElkO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLyoqXG4gKiBCYXRjaCAoZXh0ZW5kcyBXcml0YWJsZSlcbiAqL1xuZXhwb3J0IGNsYXNzIEJhdGNoPFxuICBTIGV4dGVuZHMgU2NoZW1hLFxuICBPcHIgZXh0ZW5kcyBCdWxrT3BlcmF0aW9uXG4+IGV4dGVuZHMgV3JpdGFibGUge1xuICBqb2I6IEpvYjxTLCBPcHI+O1xuICBpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBfYnVsazogQnVsazxTPjtcbiAgX3VwbG9hZFN0cmVhbTogU2VyaWFsaXphYmxlO1xuICBfZG93bmxvYWRTdHJlYW06IFBhcnNhYmxlO1xuICBfZGF0YVN0cmVhbTogRHVwbGV4O1xuICBfcmVzdWx0OiBQcm9taXNlPEJhdGNoUmVzdWx0PE9wcj4+IHwgdW5kZWZpbmVkO1xuICBfZXJyb3I6IEVycm9yIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3Ioam9iOiBKb2I8UywgT3ByPiwgaWQ/OiBzdHJpbmcpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG4gICAgdGhpcy5qb2IgPSBqb2I7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMuX2J1bGsgPSBqb2IuX2J1bGs7XG5cbiAgICAvLyBkZWZhdWx0IGVycm9yIGhhbmRsZXIgdG8ga2VlcCB0aGUgbGF0ZXN0IGVycm9yXG4gICAgdGhpcy5vbignZXJyb3InLCAoZXJyb3IpID0+ICh0aGlzLl9lcnJvciA9IGVycm9yKSk7XG5cbiAgICAvL1xuICAgIC8vIHNldHVwIGRhdGEgc3RyZWFtc1xuICAgIC8vXG4gICAgY29uc3QgY29udmVydGVyT3B0aW9ucyA9IHsgbnVsbFZhbHVlOiAnI04vQScgfTtcbiAgICBjb25zdCB1cGxvYWRTdHJlYW0gPSAodGhpcy5fdXBsb2FkU3RyZWFtID0gbmV3IFNlcmlhbGl6YWJsZSgpKTtcbiAgICBjb25zdCB1cGxvYWREYXRhU3RyZWFtID0gdXBsb2FkU3RyZWFtLnN0cmVhbSgnY3N2JywgY29udmVydGVyT3B0aW9ucyk7XG4gICAgY29uc3QgZG93bmxvYWRTdHJlYW0gPSAodGhpcy5fZG93bmxvYWRTdHJlYW0gPSBuZXcgUGFyc2FibGUoKSk7XG4gICAgY29uc3QgZG93bmxvYWREYXRhU3RyZWFtID0gZG93bmxvYWRTdHJlYW0uc3RyZWFtKCdjc3YnLCBjb252ZXJ0ZXJPcHRpb25zKTtcblxuICAgIHRoaXMub24oJ2ZpbmlzaCcsICgpID0+IHVwbG9hZFN0cmVhbS5lbmQoKSk7XG4gICAgdXBsb2FkRGF0YVN0cmVhbS5vbmNlKCdyZWFkYWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgam9iIGlzIG9wZW5lZCBpbiBzZXJ2ZXIgb3Igam9iIGlkIGlzIGFscmVhZHkgYXNzaWduZWRcbiAgICAgICAgYXdhaXQgdGhpcy5qb2IucmVhZHkoKTtcbiAgICAgICAgLy8gcGlwZSB1cGxvYWQgZGF0YSB0byBiYXRjaCBBUEkgcmVxdWVzdCBzdHJlYW1cbiAgICAgICAgdXBsb2FkRGF0YVN0cmVhbS5waXBlKHRoaXMuX2NyZWF0ZVJlcXVlc3RTdHJlYW0oKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBkdXBsZXggZGF0YSBzdHJlYW0sIG9wZW5lZCBhY2Nlc3MgdG8gQVBJIHByb2dyYW1tZXJzIGJ5IEJhdGNoI3N0cmVhbSgpXG4gICAgdGhpcy5fZGF0YVN0cmVhbSA9IGNvbmNhdFN0cmVhbXNBc0R1cGxleChcbiAgICAgIHVwbG9hZERhdGFTdHJlYW0sXG4gICAgICBkb3dubG9hZERhdGFTdHJlYW0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25uZWN0IGJhdGNoIEFQSSBhbmQgY3JlYXRlIHN0cmVhbSBpbnN0YW5jZSBvZiByZXF1ZXN0L3Jlc3BvbnNlXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY3JlYXRlUmVxdWVzdFN0cmVhbSgpIHtcbiAgICBjb25zdCBidWxrID0gdGhpcy5fYnVsaztcbiAgICBjb25zdCBsb2dnZXIgPSBidWxrLl9sb2dnZXI7XG4gICAgY29uc3QgcmVxID0gYnVsay5fcmVxdWVzdDxCYXRjaEluZm9SZXNwb25zZT4oe1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBwYXRoOiAnL2pvYi8nICsgdGhpcy5qb2IuaWQgKyAnL2JhdGNoJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2NzdicsXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYXBwbGljYXRpb24veG1sJyxcbiAgICB9KTtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxO1xuICAgICAgICBsb2dnZXIuZGVidWcocmVzLmJhdGNoSW5mbyk7XG4gICAgICAgIHRoaXMuaWQgPSByZXMuYmF0Y2hJbmZvLmlkO1xuICAgICAgICB0aGlzLmVtaXQoJ3F1ZXVlJywgcmVzLmJhdGNoSW5mbyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgICByZXR1cm4gcmVxLnN0cmVhbSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcGxlbWVudGF0aW9uIG9mIFdyaXRhYmxlXG4gICAqL1xuICBfd3JpdGUocmVjb3JkXzogUmVjb3JkLCBlbmM6IHN0cmluZywgY2I6ICgpID0+IHZvaWQpIHtcbiAgICBjb25zdCB7IElkLCB0eXBlLCBhdHRyaWJ1dGVzLCAuLi5ycmVjIH0gPSByZWNvcmRfO1xuICAgIGxldCByZWNvcmQ7XG4gICAgc3dpdGNoICh0aGlzLmpvYi5vcGVyYXRpb24pIHtcbiAgICAgIGNhc2UgJ2luc2VydCc6XG4gICAgICAgIHJlY29yZCA9IHJyZWM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIGNhc2UgJ2hhcmREZWxldGUnOlxuICAgICAgICByZWNvcmQgPSB7IElkIH07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjb3JkID0geyBJZCwgLi4ucnJlYyB9O1xuICAgIH1cbiAgICB0aGlzLl91cGxvYWRTdHJlYW0ud3JpdGUocmVjb3JkLCBlbmMsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGR1cGxleCBzdHJlYW0gd2hpY2ggYWNjZXB0cyBDU1YgZGF0YSBpbnB1dCBhbmQgYmF0Y2ggcmVzdWx0IG91dHB1dFxuICAgKi9cbiAgc3RyZWFtKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhU3RyZWFtO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYmF0Y2ggb3BlcmF0aW9uXG4gICAqL1xuICBleGVjdXRlKGlucHV0Pzogc3RyaW5nIHwgUmVjb3JkW10gfCBSZWFkYWJsZSkge1xuICAgIC8vIGlmIGJhdGNoIGlzIGFscmVhZHkgZXhlY3V0ZWRcbiAgICBpZiAodGhpcy5fcmVzdWx0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhdGNoIGFscmVhZHkgZXhlY3V0ZWQuJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fcmVzdWx0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vbmNlKCdyZXNwb25zZScsIHJlc29sdmUpO1xuICAgICAgdGhpcy5vbmNlKCdlcnJvcicsIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBpZiAoaXNPYmplY3QoaW5wdXQpICYmICdwaXBlJyBpbiBpbnB1dCAmJiBpc0Z1bmN0aW9uKGlucHV0LnBpcGUpKSB7XG4gICAgICAvLyBpZiBpbnB1dCBoYXMgc3RyZWFtLlJlYWRhYmxlIGludGVyZmFjZVxuICAgICAgaW5wdXQucGlwZSh0aGlzLl9kYXRhU3RyZWFtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIGlucHV0KSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocmVjb3JkKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWNvcmRba2V5XSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgIHJlY29yZFtrZXldID0gU3RyaW5nKHJlY29yZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy53cml0ZShyZWNvcmQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fZGF0YVN0cmVhbS53cml0ZShpbnB1dCwgJ3V0ZjgnKTtcbiAgICAgICAgdGhpcy5fZGF0YVN0cmVhbS5lbmQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZXR1cm4gQmF0Y2ggaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBydW4gPSB0aGlzLmV4ZWN1dGU7XG5cbiAgZXhlYyA9IHRoaXMuZXhlY3V0ZTtcblxuICAvKipcbiAgICogUHJvbWlzZS9BKyBpbnRlcmZhY2VcbiAgICogRGVsZWdhdGUgdG8gcHJvbWlzZSwgcmV0dXJuIHByb21pc2UgaW5zdGFuY2UgZm9yIGJhdGNoIHJlc3VsdFxuICAgKi9cbiAgdGhlbihcbiAgICBvblJlc29sdmVkOiAocmVzOiBCYXRjaFJlc3VsdDxPcHI+KSA9PiB2b2lkLFxuICAgIG9uUmVqZWN0OiAoZXJyOiBhbnkpID0+IHZvaWQsXG4gICkge1xuICAgIGlmICghdGhpcy5fcmVzdWx0KSB7XG4gICAgICB0aGlzLmV4ZWN1dGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdCEudGhlbihvblJlc29sdmVkLCBvblJlamVjdCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIGxhdGVzdCBiYXRjaCBzdGF0dXMgaW4gc2VydmVyXG4gICAqL1xuICBhc3luYyBjaGVjaygpIHtcbiAgICBjb25zdCBidWxrID0gdGhpcy5fYnVsaztcbiAgICBjb25zdCBsb2dnZXIgPSBidWxrLl9sb2dnZXI7XG4gICAgY29uc3Qgam9iSWQgPSB0aGlzLmpvYi5pZDtcbiAgICBjb25zdCBiYXRjaElkID0gdGhpcy5pZDtcblxuICAgIGlmICgham9iSWQgfHwgIWJhdGNoSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmF0Y2ggbm90IHN0YXJ0ZWQuJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGJ1bGsuX3JlcXVlc3Q8QmF0Y2hJbmZvUmVzcG9uc2U+KHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBwYXRoOiAnL2pvYi8nICsgam9iSWQgKyAnL2JhdGNoLycgKyBiYXRjaElkLFxuICAgICAgcmVzcG9uc2VUeXBlOiAnYXBwbGljYXRpb24veG1sJyxcbiAgICB9KTtcbiAgICBsb2dnZXIuZGVidWcocmVzLmJhdGNoSW5mbyk7XG4gICAgcmV0dXJuIHJlcy5iYXRjaEluZm87XG4gIH1cblxuICAvKipcbiAgICogUG9sbGluZyB0aGUgYmF0Y2ggcmVzdWx0IGFuZCByZXRyaWV2ZVxuICAgKi9cbiAgcG9sbChpbnRlcnZhbDogbnVtYmVyLCB0aW1lb3V0OiBudW1iZXIpIHtcbiAgICBjb25zdCBqb2JJZCA9IHRoaXMuam9iLmlkO1xuICAgIGNvbnN0IGJhdGNoSWQgPSB0aGlzLmlkO1xuXG4gICAgaWYgKCFqb2JJZCB8fCAhYmF0Y2hJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYXRjaCBub3Qgc3RhcnRlZC4nKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgcG9sbCA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgaWYgKHN0YXJ0VGltZSArIHRpbWVvdXQgPCBub3cpIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IFBvbGxpbmdUaW1lb3V0RXJyb3IoXG4gICAgICAgICAgJ1BvbGxpbmcgdGltZSBvdXQuIEpvYiBJZCA9ICcgKyBqb2JJZCArICcgLCBiYXRjaCBJZCA9ICcgKyBiYXRjaElkLFxuICAgICAgICAgIGpvYklkLFxuICAgICAgICAgIGJhdGNoSWQsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgcmVzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzID0gYXdhaXQgdGhpcy5jaGVjaygpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocmVzLnN0YXRlID09PSAnRmFpbGVkJykge1xuICAgICAgICBpZiAocGFyc2VJbnQocmVzLm51bWJlclJlY29yZHNQcm9jZXNzZWQsIDEwKSA+IDApIHtcbiAgICAgICAgICB0aGlzLnJldHJpZXZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihyZXMuc3RhdGVNZXNzYWdlKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVzLnN0YXRlID09PSAnQ29tcGxldGVkJykge1xuICAgICAgICB0aGlzLnJldHJpZXZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzJywgcmVzKTtcbiAgICAgICAgc2V0VGltZW91dChwb2xsLCBpbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzZXRUaW1lb3V0KHBvbGwsIGludGVydmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBiYXRjaCByZXN1bHRcbiAgICovXG4gIGFzeW5jIHJldHJpZXZlKCkge1xuICAgIGNvbnN0IGJ1bGsgPSB0aGlzLl9idWxrO1xuICAgIGNvbnN0IGpvYklkID0gdGhpcy5qb2IuaWQ7XG4gICAgY29uc3Qgam9iID0gdGhpcy5qb2I7XG4gICAgY29uc3QgYmF0Y2hJZCA9IHRoaXMuaWQ7XG5cbiAgICBpZiAoIWpvYklkIHx8ICFiYXRjaElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhdGNoIG5vdCBzdGFydGVkLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgYnVsay5fcmVxdWVzdDxcbiAgICAgICAgQnVsa0luZ2VzdFJlc3VsdFJlc3BvbnNlIHwgQnVsa1F1ZXJ5UmVzdWx0UmVzcG9uc2VcbiAgICAgID4oe1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiAnL2pvYi8nICsgam9iSWQgKyAnL2JhdGNoLycgKyBiYXRjaElkICsgJy9yZXN1bHQnLFxuICAgICAgfSk7XG4gICAgICBsZXQgcmVzdWx0czogQnVsa0luZ2VzdEJhdGNoUmVzdWx0IHwgQnVsa1F1ZXJ5QmF0Y2hSZXN1bHQ7XG4gICAgICBpZiAoam9iLm9wZXJhdGlvbiA9PT0gJ3F1ZXJ5JyB8fCBqb2Iub3BlcmF0aW9uID09PSAncXVlcnlBbGwnKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHJlc3AgYXMgQnVsa1F1ZXJ5UmVzdWx0UmVzcG9uc2U7XG4gICAgICAgIGxldCByZXN1bHRJZCA9IHJlc1sncmVzdWx0LWxpc3QnXS5yZXN1bHQ7XG4gICAgICAgIHJlc3VsdHMgPSAoQXJyYXkuaXNBcnJheShyZXN1bHRJZClcbiAgICAgICAgICA/IHJlc3VsdElkXG4gICAgICAgICAgOiBbcmVzdWx0SWRdXG4gICAgICAgICkubWFwKChpZCkgPT4gKHsgaWQsIGJhdGNoSWQsIGpvYklkIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHJlc3AgYXMgQnVsa0luZ2VzdFJlc3VsdFJlc3BvbnNlO1xuICAgICAgICByZXN1bHRzID0gcmVzLm1hcCgocmV0KSA9PiAoe1xuICAgICAgICAgIGlkOiByZXQuSWQgfHwgbnVsbCxcbiAgICAgICAgICBzdWNjZXNzOiByZXQuU3VjY2VzcyA9PT0gJ3RydWUnLFxuICAgICAgICAgIGVycm9yczogcmV0LkVycm9yID8gW3JldC5FcnJvcl0gOiBbXSxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KCdyZXNwb25zZScsIHJlc3VsdHMpO1xuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcXVlcnkgcmVzdWx0IGFzIGEgcmVjb3JkIHN0cmVhbVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmVzdWx0SWQgLSBSZXN1bHQgaWRcbiAgICogQHJldHVybnMge1JlY29yZFN0cmVhbX0gLSBSZWNvcmQgc3RyZWFtLCBjb252ZXJ0aWJsZSB0byBDU1YgZGF0YSBzdHJlYW1cbiAgICovXG4gIHJlc3VsdChyZXN1bHRJZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgam9iSWQgPSB0aGlzLmpvYi5pZDtcbiAgICBjb25zdCBiYXRjaElkID0gdGhpcy5pZDtcbiAgICBpZiAoIWpvYklkIHx8ICFiYXRjaElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhdGNoIG5vdCBzdGFydGVkLicpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHRTdHJlYW0gPSBuZXcgUGFyc2FibGUoKTtcbiAgICBjb25zdCByZXN1bHREYXRhU3RyZWFtID0gcmVzdWx0U3RyZWFtLnN0cmVhbSgnY3N2Jyk7XG4gICAgdGhpcy5fYnVsa1xuICAgICAgLl9yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgcGF0aDogJy9qb2IvJyArIGpvYklkICsgJy9iYXRjaC8nICsgYmF0Y2hJZCArICcvcmVzdWx0LycgKyByZXN1bHRJZCxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcbiAgICAgIH0pXG4gICAgICAuc3RyZWFtKClcbiAgICAgIC5waXBlKHJlc3VsdERhdGFTdHJlYW0pO1xuICAgIHJldHVybiByZXN1bHRTdHJlYW07XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vKipcbiAqXG4gKi9cbmNsYXNzIEJ1bGtBcGk8UyBleHRlbmRzIFNjaGVtYT4gZXh0ZW5kcyBIdHRwQXBpPFM+IHtcbiAgYmVmb3JlU2VuZChyZXF1ZXN0OiBIdHRwUmVxdWVzdCkge1xuICAgIHJlcXVlc3QuaGVhZGVycyA9IHtcbiAgICAgIC4uLnJlcXVlc3QuaGVhZGVycyxcbiAgICAgICdYLVNGREMtU0VTU0lPTic6IHRoaXMuX2Nvbm4uYWNjZXNzVG9rZW4gPz8gJycsXG4gICAgfTtcbiAgfVxuXG4gIGlzU2Vzc2lvbkV4cGlyZWQocmVzcG9uc2U6IEh0dHBSZXNwb25zZSkge1xuICAgIHJldHVybiAoXG4gICAgICByZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDAgJiZcbiAgICAgIC88ZXhjZXB0aW9uQ29kZT5JbnZhbGlkU2Vzc2lvbklkPFxcL2V4Y2VwdGlvbkNvZGU+Ly50ZXN0KHJlc3BvbnNlLmJvZHkpXG4gICAgKTtcbiAgfVxuXG4gIGhhc0Vycm9ySW5SZXNwb25zZUJvZHkoYm9keTogYW55KSB7XG4gICAgcmV0dXJuICEhYm9keS5lcnJvcjtcbiAgfVxuXG4gIHBhcnNlRXJyb3IoYm9keTogYW55KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yQ29kZTogYm9keS5lcnJvci5leGNlcHRpb25Db2RlLFxuICAgICAgbWVzc2FnZTogYm9keS5lcnJvci5leGNlcHRpb25NZXNzYWdlLFxuICAgIH07XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8qKlxuICogQ2xhc3MgZm9yIEJ1bGsgQVBJXG4gKlxuICogQGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWxrPFMgZXh0ZW5kcyBTY2hlbWE+IHtcbiAgX2Nvbm46IENvbm5lY3Rpb248Uz47XG4gIF9sb2dnZXI6IExvZ2dlcjtcblxuICAvKipcbiAgICogUG9sbGluZyBpbnRlcnZhbCBpbiBtaWxsaXNlY29uZHNcbiAgICovXG4gIHBvbGxJbnRlcnZhbCA9IDEwMDA7XG5cbiAgLyoqXG4gICAqIFBvbGxpbmcgdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIHBvbGxUaW1lb3V0ID0gMTAwMDA7XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25uOiBDb25uZWN0aW9uPFM+KSB7XG4gICAgdGhpcy5fY29ubiA9IGNvbm47XG4gICAgdGhpcy5fbG9nZ2VyID0gY29ubi5fbG9nZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBfcmVxdWVzdDxUPihyZXF1ZXN0XzogQnVsa1JlcXVlc3QpIHtcbiAgICBjb25zdCBjb25uID0gdGhpcy5fY29ubjtcbiAgICBjb25zdCB7IHBhdGgsIHJlc3BvbnNlVHlwZSwgLi4ucnJlcSB9ID0gcmVxdWVzdF87XG4gICAgY29uc3QgYmFzZVVybCA9IFtjb25uLmluc3RhbmNlVXJsLCAnc2VydmljZXMvYXN5bmMnLCBjb25uLnZlcnNpb25dLmpvaW4oXG4gICAgICAnLycsXG4gICAgKTtcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgLi4ucnJlcSxcbiAgICAgIHVybDogYmFzZVVybCArIHBhdGgsXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IEJ1bGtBcGkodGhpcy5fY29ubiwgeyByZXNwb25zZVR5cGUgfSkucmVxdWVzdDxUPihyZXF1ZXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHN0YXJ0IGJ1bGtsb2FkIGpvYiBhbmQgYmF0Y2hcbiAgICovXG4gIGxvYWQ8T3ByIGV4dGVuZHMgQnVsa09wZXJhdGlvbj4oXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIG9wZXJhdGlvbjogT3ByLFxuICAgIGlucHV0PzogUmVjb3JkW10gfCBSZWFkYWJsZSB8IHN0cmluZyxcbiAgKTogQmF0Y2g8UywgT3ByPjtcbiAgbG9hZDxPcHIgZXh0ZW5kcyBCdWxrT3BlcmF0aW9uPihcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgb3BlcmF0aW9uOiBPcHIsXG4gICAgb3B0aW9uc09ySW5wdXQ/OiBCdWxrT3B0aW9ucyB8IFJlY29yZFtdIHwgUmVhZGFibGUgfCBzdHJpbmcsXG4gICAgaW5wdXQ/OiBSZWNvcmRbXSB8IFJlYWRhYmxlIHwgc3RyaW5nLFxuICApOiBCYXRjaDxTLCBPcHI+O1xuICBsb2FkPE9wciBleHRlbmRzIEJ1bGtPcGVyYXRpb24+KFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBvcGVyYXRpb246IE9wcixcbiAgICBvcHRpb25zT3JJbnB1dD86IEJ1bGtPcHRpb25zIHwgUmVjb3JkW10gfCBSZWFkYWJsZSB8IHN0cmluZyxcbiAgICBpbnB1dD86IFJlY29yZFtdIHwgUmVhZGFibGUgfCBzdHJpbmcsXG4gICkge1xuICAgIGxldCBvcHRpb25zOiBCdWxrT3B0aW9ucyA9IHt9O1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvcHRpb25zT3JJbnB1dCA9PT0gJ3N0cmluZycgfHxcbiAgICAgIEFycmF5LmlzQXJyYXkob3B0aW9uc09ySW5wdXQpIHx8XG4gICAgICAoaXNPYmplY3Qob3B0aW9uc09ySW5wdXQpICYmXG4gICAgICAgICdwaXBlJyBpbiBvcHRpb25zT3JJbnB1dCAmJlxuICAgICAgICB0eXBlb2Ygb3B0aW9uc09ySW5wdXQucGlwZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICApIHtcbiAgICAgIC8vIHdoZW4gb3B0aW9ucyBpcyBub3QgcGxhaW4gaGFzaCBvYmplY3QsIGl0IGlzIG9taXR0ZWRcbiAgICAgIGlucHV0ID0gb3B0aW9uc09ySW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JJbnB1dCBhcyBCdWxrT3B0aW9ucztcbiAgICB9XG4gICAgY29uc3Qgam9iID0gdGhpcy5jcmVhdGVKb2IodHlwZSwgb3BlcmF0aW9uLCBvcHRpb25zKTtcbiAgICBjb25zdCBiYXRjaCA9IGpvYi5jcmVhdGVCYXRjaCgpO1xuICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiBqb2IuY2xvc2UoKTtcbiAgICBjb25zdCBjbGVhbnVwT25FcnJvciA9IChlcnI6IEVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyLm5hbWUgIT09ICdQb2xsaW5nVGltZW91dCcpIHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgYmF0Y2gub24oJ3Jlc3BvbnNlJywgY2xlYW51cCk7XG4gICAgYmF0Y2gub24oJ2Vycm9yJywgY2xlYW51cE9uRXJyb3IpO1xuICAgIGJhdGNoLm9uKCdxdWV1ZScsICgpID0+IHtcbiAgICAgIGJhdGNoPy5wb2xsKHRoaXMucG9sbEludGVydmFsLCB0aGlzLnBvbGxUaW1lb3V0KTtcbiAgICB9KTtcbiAgICByZXR1cm4gYmF0Y2guZXhlY3V0ZShpbnB1dCk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSBidWxrIHF1ZXJ5IGFuZCBnZXQgcmVjb3JkIHN0cmVhbVxuICAgKi9cbiAgcXVlcnkoc29xbDogc3RyaW5nKSB7XG4gICAgY29uc3QgbSA9IHNvcWwucmVwbGFjZSgvXFwoW1xcc1xcU10rXFwpL2csICcnKS5tYXRjaCgvRlJPTVxccysoXFx3KykvaSk7XG4gICAgaWYgKCFtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdObyBzb2JqZWN0IHR5cGUgZm91bmQgaW4gcXVlcnksIG1heWJlIGNhdXNlZCBieSBpbnZhbGlkIFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBtWzFdO1xuICAgIGNvbnN0IHJlY29yZFN0cmVhbSA9IG5ldyBQYXJzYWJsZSgpO1xuICAgIGNvbnN0IGRhdGFTdHJlYW0gPSByZWNvcmRTdHJlYW0uc3RyZWFtKCdjc3YnKTtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMubG9hZCh0eXBlLCAncXVlcnknLCBzb3FsKTtcbiAgICAgICAgY29uc3Qgc3RyZWFtcyA9IHJlc3VsdHMubWFwKChyZXN1bHQpID0+XG4gICAgICAgICAgdGhpcy5qb2IocmVzdWx0LmpvYklkKVxuICAgICAgICAgICAgLmJhdGNoKHJlc3VsdC5iYXRjaElkKVxuICAgICAgICAgICAgLnJlc3VsdChyZXN1bHQuaWQpXG4gICAgICAgICAgICAuc3RyZWFtKCksXG4gICAgICAgICk7XG4gICAgICAgIGpvaW5TdHJlYW1zKHN0cmVhbXMpLnBpcGUoZGF0YVN0cmVhbSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVjb3JkU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KSgpO1xuICAgIHJldHVybiByZWNvcmRTdHJlYW07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGpvYiBpbnN0YW5jZVxuICAgKi9cbiAgY3JlYXRlSm9iPE9wciBleHRlbmRzIEJ1bGtPcGVyYXRpb24+KFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBvcGVyYXRpb246IE9wcixcbiAgICBvcHRpb25zOiBCdWxrT3B0aW9ucyA9IHt9LFxuICApIHtcbiAgICByZXR1cm4gbmV3IEpvYih0aGlzLCB0eXBlLCBvcGVyYXRpb24sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGpvYiBpbnN0YW5jZSBzcGVjaWZpZWQgYnkgZ2l2ZW4gam9iIElEXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBqb2JJZCAtIEpvYiBJRFxuICAgKiBAcmV0dXJucyB7QnVsa35Kb2J9XG4gICAqL1xuICBqb2I8T3ByIGV4dGVuZHMgQnVsa09wZXJhdGlvbj4oam9iSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgSm9iPFMsIE9wcj4odGhpcywgbnVsbCwgbnVsbCwgbnVsbCwgam9iSWQpO1xuICB9XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLypcbiAqIFJlZ2lzdGVyIGhvb2sgaW4gY29ubmVjdGlvbiBpbnN0YW50aWF0aW9uIGZvciBkeW5hbWljYWxseSBhZGRpbmcgdGhpcyBBUEkgbW9kdWxlIGZlYXR1cmVzXG4gKi9cbnJlZ2lzdGVyTW9kdWxlKCdidWxrJywgKGNvbm4pID0+IG5ldyBCdWxrKGNvbm4pKTtcblxuZXhwb3J0IGRlZmF1bHQgQnVsaztcbiJdfQ==
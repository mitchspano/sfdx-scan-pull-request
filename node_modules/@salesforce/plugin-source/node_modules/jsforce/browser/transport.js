import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.regexp.exec";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _get from "@babel/runtime-corejs3/helpers/get";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";

var _process$env$HTTP_PRO;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 *
 */
import request, { setDefaults } from './request';
import { StreamPromise } from './util/promise';
import jsonp from './browser/jsonp';
import canvas from './browser/canvas';
/**
 * Normarize Salesforce API host name
 * @private
 */

function normalizeApiHost(apiHost) {
  var m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);

  if (m) {
    return "".concat(m[1], ".salesforce.com");
  }

  return apiHost;
}

setDefaults({
  httpProxy: (_process$env$HTTP_PRO = process.env.HTTP_PROXY) !== null && _process$env$HTTP_PRO !== void 0 ? _process$env$HTTP_PRO : undefined,
  timeout: process.env.HTTP_TIMEOUT ? _parseInt(process.env.HTTP_TIMEOUT, 10) : undefined
});
var baseUrl = typeof window !== 'undefined' && window.location && window.location.host ? "https://".concat(normalizeApiHost(window.location.host)) : process.env.LOCATION_BASE_URL || '';
/**
 * Class for HTTP request transport
 *
 * @class
 * @protected
 */

export var Transport = /*#__PURE__*/function () {
  function Transport() {
    _classCallCheck(this, Transport);
  }

  _createClass(Transport, [{
    key: "httpRequest",

    /**
     */
    value: function httpRequest(req) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return StreamPromise.create(function () {
        var createStream = _this.getRequestStreamCreator();

        var stream = createStream(req, options);
        var promise = new _Promise(function (resolve, reject) {
          stream.on('complete', function (res) {
            return resolve(res);
          }).on('error', reject);
        });
        return {
          stream: stream,
          promise: promise
        };
      });
    }
    /**
     * @protected
     */

  }, {
    key: "getRequestStreamCreator",
    value: function getRequestStreamCreator() {
      return request;
    }
  }]);

  return Transport;
}();
/**
 * Class for JSONP request transport
 */

export var JsonpTransport = /*#__PURE__*/function (_Transport) {
  _inherits(JsonpTransport, _Transport);

  var _super = _createSuper(JsonpTransport);

  function JsonpTransport(jsonpParam) {
    var _this2;

    _classCallCheck(this, JsonpTransport);

    _this2 = _super.call(this);

    _defineProperty(_assertThisInitialized(_this2), "_jsonpParam", void 0);

    _this2._jsonpParam = jsonpParam;
    return _this2;
  }

  _createClass(JsonpTransport, [{
    key: "getRequestStreamCreator",
    value: function getRequestStreamCreator() {
      var jsonpRequest = jsonp.createRequest(this._jsonpParam);
      return function (params) {
        return jsonpRequest(params);
      };
    }
  }]);

  return JsonpTransport;
}(Transport);
/**
 * Class for Sfdc Canvas request transport
 */

_defineProperty(JsonpTransport, "supprted", jsonp.supported);

export var CanvasTransport = /*#__PURE__*/function (_Transport2) {
  _inherits(CanvasTransport, _Transport2);

  var _super2 = _createSuper(CanvasTransport);

  function CanvasTransport(signedRequest) {
    var _this3;

    _classCallCheck(this, CanvasTransport);

    _this3 = _super2.call(this);

    _defineProperty(_assertThisInitialized(_this3), "_signedRequest", void 0);

    _this3._signedRequest = signedRequest;
    return _this3;
  }

  _createClass(CanvasTransport, [{
    key: "getRequestStreamCreator",
    value: function getRequestStreamCreator() {
      var canvasRequest = canvas.createRequest(this._signedRequest);
      return function (params) {
        return canvasRequest(params);
      };
    }
  }]);

  return CanvasTransport;
}(Transport);
/* @private */

_defineProperty(CanvasTransport, "supported", canvas.supported);

function createXdProxyRequest(req, proxyUrl) {
  var _context, _context2;

  var headers = {
    'salesforceproxy-endpoint': req.url
  };

  if (req.headers) {
    for (var _i = 0, _Object$keys = _Object$keys2(req.headers); _i < _Object$keys.length; _i++) {
      var _name = _Object$keys[_i];
      headers[_name] = req.headers[_name];
    }
  }

  var nocache = _concatInstanceProperty(_context = "".concat(_Date$now(), ".")).call(_context, String(Math.random()).substring(2));

  return _objectSpread({
    method: req.method,
    url: _concatInstanceProperty(_context2 = "".concat(proxyUrl, "?")).call(_context2, nocache),
    headers: headers
  }, req.body != null ? {
    body: req.body
  } : {});
}
/**
 * Class for HTTP request transport using cross-domain AJAX proxy service
 */


export var XdProxyTransport = /*#__PURE__*/function (_Transport3) {
  _inherits(XdProxyTransport, _Transport3);

  var _super3 = _createSuper(XdProxyTransport);

  function XdProxyTransport(xdProxyUrl) {
    var _this4;

    _classCallCheck(this, XdProxyTransport);

    _this4 = _super3.call(this);

    _defineProperty(_assertThisInitialized(_this4), "_xdProxyUrl", void 0);

    _this4._xdProxyUrl = xdProxyUrl;
    return _this4;
  }
  /**
   * Make HTTP request via AJAX proxy
   */


  _createClass(XdProxyTransport, [{
    key: "httpRequest",
    value: function httpRequest(req) {
      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var xdProxyUrl = this._xdProxyUrl;

      var url = req.url,
          body = req.body,
          rreq = _objectWithoutProperties(req, ["url", "body"]);

      var canonicalUrl = _indexOfInstanceProperty(url).call(url, '/') === 0 ? baseUrl + url : url;
      var xdProxyReq = createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
        url: canonicalUrl,
        body: body
      }), xdProxyUrl);
      return _get(_getPrototypeOf(XdProxyTransport.prototype), "httpRequest", this).call(this, xdProxyReq, {
        followRedirect: function followRedirect(redirectUrl) {
          return createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
            method: 'GET',
            url: redirectUrl
          }), xdProxyUrl);
        }
      });
    }
  }]);

  return XdProxyTransport;
}(Transport);
/**
 * Class for HTTP request transport using a proxy server
 */

export var HttpProxyTransport = /*#__PURE__*/function (_Transport4) {
  _inherits(HttpProxyTransport, _Transport4);

  var _super4 = _createSuper(HttpProxyTransport);

  function HttpProxyTransport(httpProxy) {
    var _this5;

    _classCallCheck(this, HttpProxyTransport);

    _this5 = _super4.call(this);

    _defineProperty(_assertThisInitialized(_this5), "_httpProxy", void 0);

    _this5._httpProxy = httpProxy;
    return _this5;
  }
  /**
   * Make HTTP request via proxy server
   */


  _createClass(HttpProxyTransport, [{
    key: "httpRequest",
    value: function httpRequest(req) {
      var options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var options = _objectSpread(_objectSpread({}, options_), {}, {
        httpProxy: this._httpProxy
      });

      return _get(_getPrototypeOf(HttpProxyTransport.prototype), "httpRequest", this).call(this, req, options);
    }
  }]);

  return HttpProxyTransport;
}(Transport);
export default Transport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
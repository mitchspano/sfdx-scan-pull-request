"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _xml2js = _interopRequireDefault(require("xml2js"));

var _soap = require("../../soap");

var _function = require("../../util/function");

/**
 *
 */
const WSDLRestrictionSchema = {
  $: {
    base: 'string'
  },
  enumeration: [{
    $: {
      value: 'string'
    }
  }],
  'xsd:enumeration': [{
    $: {
      value: 'string'
    }
  }]
};
const WSDLSimpleTypeSchema = {
  $: {
    name: 'string'
  },
  restriction: WSDLRestrictionSchema,
  'xsd:restriction': WSDLRestrictionSchema
};
const WSDLElementSchema = {
  $: {
    name: 'string',
    type: 'string',
    minOccurs: '?number',
    maxOccurs: '?string',
    nillable: '?boolean'
  }
};
const WSDLSequenceSchema = {
  element: ['?', WSDLElementSchema],
  'xsd:element': ['?', WSDLElementSchema]
};
const WSDLExtensionSchema = {
  $: {
    base: 'string'
  },
  sequence: {
    '?': WSDLSequenceSchema
  },
  'xsd:sequence': {
    '?': WSDLSequenceSchema
  }
};
const WSDLComplexContentSchema = {
  extension: {
    '?': WSDLExtensionSchema
  },
  'xsd:extension': {
    '?': WSDLExtensionSchema
  }
};
const WSDLComplexTypeSchema = {
  $: {
    name: 'string'
  },
  sequence: {
    '?': WSDLSequenceSchema
  },
  'xsd:sequence': {
    '?': WSDLSequenceSchema
  },
  complexContent: {
    '?': WSDLComplexContentSchema
  },
  'xsd:complexContent': {
    '?': WSDLComplexContentSchema
  }
};
const WSDLSchemaSchema = {
  $: 'any',
  complexType: ['?', 'any'],
  simpleType: ['?', 'any'],
  'xsd:complexType': ['?', 'any'],
  'xsd:simpleType': ['?', 'any']
};
const WSDLSchema = {
  definitions: {
    $: 'any',
    types: {
      schema: ['?', WSDLSchemaSchema],
      'xsd:schema': ['?', WSDLSchemaSchema]
    },
    message: ['any'],
    portType: {
      $: 'any',
      operation: ['any']
    },
    binding: {
      $: 'any',
      operation: ['any']
    },
    service: {
      $: 'any',
      documentation: 'string',
      operation: ['any']
    }
  }
};
/**
 *
 */

/**
 *
 */
function toJsType(xsdType, simpleTypes) {
  switch (xsdType) {
    case 'xsd:boolean':
      return 'boolean';

    case 'xsd:string':
    case 'xsd:date':
    case 'xsd:dateTime':
    case 'xsd:time':
    case 'xsd:base64Binary':
      return 'string';

    case 'xsd:int':
    case 'xsd:long':
    case 'xsd:double':
      return 'number';

    case 'xsd:anyType':
      return 'any';

    default:
      {
        const [ns, type] = xsdType.split(':');

        if (simpleTypes[type]) {
          return simpleTypes[type];
        }

        if (ns) {
          return type;
        }

        return xsdType;
      }
  }
}
/**
 *
 */


async function readWSDLFile(filePath) {
  const xmlData = await _fsExtra.default.readFile(filePath, 'utf8');
  const json = await _xml2js.default.parseStringPromise(xmlData, {
    explicitArray: false
  });
  return (0, _soap.castTypeUsingSchema)(json, WSDLSchema);
}
/**
 *
 */


function getTypeInfo(el, simpleTypes) {
  let type = toJsType(el.$.type, simpleTypes);
  const isArray = el.$.maxOccurs === 'unbounded';
  const nillable = !isArray && el.$.minOccurs === 0 || el.$.nillable;
  return isArray ? nillable ? ['?', type] : [type] : nillable ? `?${type}` : type;
}
/**
 *
 */


function extractComplexTypes(wsdl) {
  console.log(wsdl.definitions.types['xsd:schema']);
  let schemas = {};
  const simpleTypes = {};
  const types = wsdl.definitions.types;

  for (const sc of (_ref = (_types$schema = types.schema) !== null && _types$schema !== void 0 ? _types$schema : types['xsd:schema']) !== null && _ref !== void 0 ? _ref : []) {
    var _ref, _types$schema;

    for (const st of (_ref2 = (_sc$simpleType = sc.simpleType) !== null && _sc$simpleType !== void 0 ? _sc$simpleType : sc['xsd:simpleType']) !== null && _ref2 !== void 0 ? _ref2 : []) {
      var _ref2, _sc$simpleType, _simpleType$restricti;

      const simpleType = (0, _soap.castTypeUsingSchema)(st, WSDLSimpleTypeSchema);
      const rs = (_simpleType$restricti = simpleType.restriction) !== null && _simpleType$restricti !== void 0 ? _simpleType$restricti : simpleType['xsd:restriction'];
      const base = rs.$.base.split(':')[1];
      simpleTypes[simpleType.$.name] = base;
    }
  }

  console.log({
    simpleTypes
  });

  for (const sc of (_ref3 = (_types$schema2 = types.schema) !== null && _types$schema2 !== void 0 ? _types$schema2 : types['xsd:schema']) !== null && _ref3 !== void 0 ? _ref3 : []) {
    var _ref3, _types$schema2;

    for (const ct of (_ref4 = (_sc$complexType = sc.complexType) !== null && _sc$complexType !== void 0 ? _sc$complexType : sc['xsd:complexType']) !== null && _ref4 !== void 0 ? _ref4 : []) {
      var _ref4, _sc$complexType, _complexType$sequence, _seq$element, _complexType$complexC;

      const complexType = (0, _soap.castTypeUsingSchema)(ct, WSDLComplexTypeSchema);
      const schema = {
        type: complexType.$.name,
        props: {}
      };
      const seq = (_complexType$sequence = complexType.sequence) !== null && _complexType$sequence !== void 0 ? _complexType$sequence : complexType['xsd:sequence'];
      const els = (_seq$element = seq === null || seq === void 0 ? void 0 : seq.element) !== null && _seq$element !== void 0 ? _seq$element : seq === null || seq === void 0 ? void 0 : seq['xsd:element'];

      for (const el of els !== null && els !== void 0 ? els : []) {
        schema.props[el.$.name] = getTypeInfo(el, simpleTypes);
      }

      const cc = (_complexType$complexC = complexType.complexContent) !== null && _complexType$complexC !== void 0 ? _complexType$complexC : complexType['xsd:complexContent'];

      if (cc) {
        var _cc$extension;

        const extension = (_cc$extension = cc.extension) !== null && _cc$extension !== void 0 ? _cc$extension : cc['xsd:extension'];

        if (extension) {
          var _extension$sequence, _seq$element2;

          schema.extends = extension.$.base.split(':')[1];
          const seq = (_extension$sequence = extension.sequence) !== null && _extension$sequence !== void 0 ? _extension$sequence : extension['xsd:sequence'];
          const els = (_seq$element2 = seq === null || seq === void 0 ? void 0 : seq.element) !== null && _seq$element2 !== void 0 ? _seq$element2 : seq === null || seq === void 0 ? void 0 : seq['xsd:element'];

          for (const el of els !== null && els !== void 0 ? els : []) {
            schema.props[el.$.name] = getTypeInfo(el, simpleTypes);
          }
        }
      }

      schemas[complexType.$.name] = schema;
    }
  }

  return schemas;
}
/**
 *
 */


const GENERATED_MESSAGE_COMMENT = `/**
 * This file is generated from WSDL file by wsdl2schema.ts.
 * Do not modify directly.
 * To generate the file, run "ts-node path/to/wsdl2schema.ts path/to/wsdl.xml path/to/schema.ts"
 */
`;
/**
 *
 */

async function dumpSchema(schemas, outFile) {
  const out = _fsExtra.default.createWriteStream(outFile, 'utf8');

  const print = (str, indent = 0) => {
    for (let i = 0; i < indent; i++) {
      out.write(' ');
    }

    out.write(str);
  };

  const println = (str = '', indent = 0) => {
    print(str + '\n', indent);
  };

  return new _promise.default((resolve, reject) => {
    out.on('error', reject);
    out.on('finish', () => resolve());
    println(GENERATED_MESSAGE_COMMENT);
    print('export const ApiSchemas = ');
    writeSchema(schemas);
    println(' as const;');
    println();
    writeTypeDefs(schemas);
    out.end();
  });

  function writeSchema(o, indent = 0) {
    if (indent > 20) {
      print("'any'");
      return;
    }

    if ((0, _isArray.default)(o)) {
      print('[');
      let i = 0;

      for (const co of o) {
        if (i > 0) {
          print(', ');
        }

        writeSchema(co, indent);
        i++;
      }

      print(']');
    } else if ((0, _function.isMapObject)(o)) {
      const keys = (0, _keys.default)(o);

      if (keys.length > 0) {
        println('{');

        for (const name of keys) {
          const co = o[name];
          const nameId = /^[\w_$]+$/.test(name) ? name : `'${name}'`;
          print(`${nameId}: `, indent + 2);
          writeSchema(co, indent + 2);
          println(',');
        }

        print('}', indent);
      } else {
        print('{}');
      }
    } else {
      print((0, _stringify.default)(o).replace(/"/g, "'"));
    }
  }

  function writeTypeDef(o, schemas, indent = 0) {
    if (typeof o === 'string') {
      print(o);
    } else if ((0, _function.isMapObject)(o)) {
      if ('type' in o && 'props' in o) {
        if ('extends' in o && typeof o.extends === 'string') {
          print(`${o.extends} & `);
        }

        writeTypeDef(o.props, schemas, indent);
        return;
      }

      const keys = (0, _keys.default)(o);

      if (keys.length > 0) {
        println('{');

        for (const prop of (0, _keys.default)(o)) {
          let value = o[prop];
          let nillable = false;
          let isArray = false;

          if ((0, _isArray.default)(value)) {
            isArray = true;
            const len = value.length;

            if (len === 2 && value[0] === '?') {
              nillable = true;
              value = value[1];
            } else {
              value = value[0];
            }
          } else if ((0, _function.isMapObject)(value)) {
            if ('?' in value) {
              nillable = true;
              value = value['?'];
            }
          }

          if (typeof value === 'string' && value[0] === '?') {
            nillable = true;
            value = value.substring(1);
          }

          print(`${prop}${nillable ? '?' : ''}: `, indent + 2);
          writeTypeDef(value, schemas, indent + 2);

          if (isArray) {
            print('[]');
          }

          if (nillable) {
            print(' | null | undefined');
          }

          println(';');
        }

        print('}', indent);
      } else {
        print('{}');
      }
    }
  }

  function writeTypeDefs(schemas) {
    for (const name of (0, _keys.default)(schemas)) {
      const schema = schemas[name];
      print(`export type ${name} = `);
      writeTypeDef(schema, schemas);
      println(';');
      println();
    }

    println('export type ApiSchemaTypes = {');

    for (const name of (0, _keys.default)(schemas)) {
      println(`${name}: ${name};`, 2);
    }

    println('};');
  }
}
/**
 *
 */


async function main() {
  const wsdlFilePath = process.argv[2];

  if (!wsdlFilePath) {
    console.error('No input WSDL file is specified.');
    return;
  }

  const outFilePath = process.argv[3];

  if (!wsdlFilePath) {
    console.error('No output typescript schema file is specified.');
    return;
  }

  const wsdl = await readWSDLFile(wsdlFilePath);
  const schemas = extractComplexTypes(wsdl);
  dumpSchema(schemas, outFilePath);
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
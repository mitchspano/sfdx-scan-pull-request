{
  "description": "convert source into Metadata API format \n Converts source-formatted files into metadata that you can deploy using Metadata API. \nTo convert source-formatted files into the metadata format, so that you can deploy them using Metadata API,\nrun \"sfdx force:source:convert\". Then deploy the metadata using \"sfdx force:mdapi:deploy\".\n\nTo convert Metadata API–formatted files into the source format, run \"sfdx force:mdapi:convert\".\n\nTo specify a package name that includes spaces, enclose the name in single quotes.",
  "examples": [
    "$ sfdx force:source:convert -r path/to/source",
    "$ sfdx force:source:convert -r path/to/source -d path/to/outputdir -n 'My Package'"
  ],
  "flags": {
    "rootdir": "a source directory other than the default package to convert",
    "outputdir": "output directory to store the Metadata API–formatted files in",
    "packagename": "name of the package to associate with the metadata-formatted files",
    "manifest": "file path to manifest (package.xml) of metadata types to convert.",
    "sourcepath": "comma-separated list of paths to the local source files to convert",
    "metadata": "comma-separated list of metadata component names to convert"
  },
  "flagsLong": {
    "manifest": [
      "The complete path to the manifest (package.xml) file that specifies the metadata types to convert.",
      "If you specify this parameter, don’t specify --metadata or --sourcepath."
    ],
    "sourcepath": [
      "A comma-separated list of paths to the local source files to convert. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).",
      "If you specify this parameter, don’t specify --manifest or --metadata."
    ]
  },
  "success": "Source was successfully converted to Metadata API format and written to the location: %s",
  "convertFailed": "Failed to convert source"
}

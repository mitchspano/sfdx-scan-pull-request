{
  "description": "retrieve source from an org \nUse this command to retrieve source (metadata that’s in source format) from an org.\nTo take advantage of change tracking with scratch orgs, use \"sfdx force:source:pull\".\nTo retrieve metadata that’s in metadata format, use \"sfdx force:mdapi:retrieve\".\n\nThe source you retrieve overwrites the corresponding source files in your local project. This command does not attempt to merge the source from your org with your local source files.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose it in one set of double quotes.",
  "examples": [
    "To retrieve the source files in a directory:\n   $ sfdx force:source:retrieve -p path/to/source",
    "To retrieve a specific Apex class and the objects whose source is in a directory:\n   $ sfdx force:source:retrieve -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
    "To retrieve source files in a comma-separated list that contains spaces:\n   $ sfdx force:source:retrieve -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
    "To retrieve all Apex classes:\n   $ sfdx force:source:retrieve -m ApexClass",
    "To retrieve a specific Apex class:\n   $ sfdx force:source:retrieve -m ApexClass:MyApexClass",
    "To retrieve a specific Apex class and update source tracking files:\n   $ sfdx force:source:retrieve -m ApexClass:MyApexClass -t",
    "To retrieve all custom objects and Apex classes:\n   $ sfdx force:source:retrieve -m \"CustomObject,ApexClass\"",
    "To retrieve all Apex classes and two specific profiles (one of which has a space in its name):\n   $ sfdx force:source:retrieve -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
    "To retrieve all metadata components listed in a manifest:\n   $ sfdx force:source:retrieve -x path/to/package.xml",
    "To retrieve metadata from a package or multiple packages:\n   $ sfdx force:source:retrieve -n MyPackageName\n   $ sfdx force:source:retrieve -n \"Package1, PackageName With Spaces, Package3\"",
    "To retrieve all metadata from a package and specific components that aren’t in the package, specify both -n | --packagenames and one other scoping parameter:\n   $ sfdx force:source:retrieve -n MyPackageName -p path/to/apex/classes\n   $ sfdx force:source:retrieve -n MyPackageName -m ApexClass:MyApexClass\n   $ sfdx force:source:retrieve -n MyPackageName -x path/to/package.xml"
  ],
  "flags": {
    "sourcePath": "comma-separated list of source file paths to retrieve",
    "wait": "wait time for command to finish in minutes",
    "manifest": "file path for manifest (package.xml) of components to retrieve",
    "metadata": "comma-separated list of metadata component names",
    "packagename": "a comma-separated list of packages to retrieve",
    "tracksource": "if the retrieve succeeds, update source tracking information; doesn't delete local files that were deleted in the org",
    "verbose": "verbose output of retrieve result",
    "forceoverwrite": "ignore conflict warnings and overwrite changes to the project"
  },
  "flagsLong": {
    "wait": "Number of minutes to wait for the command to complete and display results to the terminal window. If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
    "manifest": [
      "The complete path for the manifest (package.xml) file that specifies the components to retrieve.",
      "If you specify this parameter, don’t specify --metadata or --sourcepath."
    ],
    "metadata": [
      "A comma-separated list of names of metadata components to retrieve from the org.",
      "If you specify this parameter, don’t specify --manifest or --sourcepath."
    ],
    "sourcePath": [
      "A comma-separated list of file paths for source to retrieve from the org. The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its sub-directories).",
      "If you specify this parameter, don’t specify --manifest or --metadata."
    ]
  },
  "SourceRetrieveError": "Could not retrieve files in the sourcepath%s",
  "retrieveTimeout": "Your retrieve request did not complete within the specified wait time [%s minutes]. Try again with a longer wait time.",
  "retrievedSourceHeader": "Retrieved Source",
  "retrievedSourceWarningsHeader": "Retrieved Source Warnings",
  "fullNameTableColumn": "FULL NAME",
  "typeTableColumn": "TYPE",
  "workspacePathTableColumn": "PROJECT PATH",
  "NoResultsFound": "No results found",
  "metadataNotFoundWarning": "WARNING: The following metadata isn’t in your org. If it’s not new, someone deleted it from the org.",
  "columnNumberColumn": "COLUMN NUMBER",
  "lineNumberColumn": "LINE NUMBER",
  "errorColumn": "PROBLEM",
  "nothingToRetrieve": "Specify a source path, manifest, metadata, or package names to retrieve.",
  "wantsToRetrieveCustomFields": "Because you're retrieving one or more CustomFields, we're also retrieving the CustomObject to which it's associated.",
  "retrieveWontDelete": "You currently have files deleted in your org.  The retrieve command will NOT delete them from your local project"
}

"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const apex_node_1 = require("@salesforce/apex-node");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const utils_1 = require("../../../../utils");
const legacyColorization_1 = require("../../../../legacyColorization");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-apex', 'tail', [
    'colorDescription',
    'commandDescription',
    'debugLevelDescription',
    'finishedTailing',
    'jsonDescription',
    'logLevelDescription',
    'logLevelLongDescription',
    'longDescription',
    'skipTraceFlagDescription'
]);
class Tail extends command_1.SfdxCommand {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (this.org) {
                    const conn = this.org.getConnection();
                    const logService = new apex_node_1.LogService(conn);
                    if (!this.flags.skiptraceflag) {
                        yield logService.prepareTraceFlag(this.flags.debuglevel);
                    }
                    yield logService.tail(this.org, this.logTailer.bind(this));
                    this.ux.log(messages.getMessage('finishedTailing'));
                }
            }
            catch (e) {
                return Promise.reject(e);
            }
        });
    }
    logTailer(fullLog) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (fullLog) {
                if (this.flags.json) {
                    this.ux.logJson({
                        status: process.exitCode,
                        result: fullLog
                    });
                }
                else {
                    const output = this.flags.color ? yield (0, legacyColorization_1.colorizeLog)(fullLog) : fullLog;
                    this.ux.log(output);
                }
            }
        });
    }
}
exports.default = Tail;
Tail.requiresUsername = true;
Tail.description = (0, utils_1.buildDescription)(messages.getMessage('commandDescription'), messages.getMessage('longDescription'));
Tail.longDescription = messages.getMessage('longDescription');
Tail.examples = [
    `$ sfdx force:apex:log:tail`,
    `$ sfdx force:apex:log:tail --debuglevel MyDebugLevel`,
    `$ sfdx force:apex:log:tail -c -s`
];
Tail.flagsConfig = {
    json: command_1.flags.boolean({
        description: messages.getMessage('jsonDescription')
    }),
    loglevel: command_1.flags.enum({
        description: messages.getMessage('logLevelDescription'),
        longDescription: messages.getMessage('logLevelLongDescription'),
        default: 'warn',
        options: utils_1.logLevels
    }),
    apiversion: command_1.flags.builtin(),
    color: command_1.flags.boolean({
        char: 'c',
        description: messages.getMessage('colorDescription')
    }),
    debuglevel: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('debugLevelDescription')
    }),
    skiptraceflag: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('skipTraceFlagDescription')
    })
};
//# sourceMappingURL=tail.js.map
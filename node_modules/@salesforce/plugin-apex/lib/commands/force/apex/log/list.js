"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const apex_node_1 = require("@salesforce/apex-node");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const utils_1 = require("../../../../utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-apex', 'list', [
    'appColHeader',
    'commandDescription',
    'durationColHeader',
    'idColHeader',
    'jsonDescription',
    'locationColHeader',
    'logLevelDescription',
    'logLevelLongDescription',
    'longDescription',
    'noDebugLogsFound',
    'operationColHeader',
    'requestColHeader',
    'sizeColHeader',
    'statusColHeader',
    'timeColHeader',
    'userColHeader'
]);
class List extends command_1.SfdxCommand {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.org) {
                    throw Error('Unable to get connection from Org.');
                }
                // org is guaranteed by requiresUsername field
                const conn = this.org.getConnection();
                const logService = new apex_node_1.LogService(conn);
                const logRecords = yield logService.getLogRecords();
                if (logRecords.length === 0) {
                    this.ux.log(messages.getMessage('noDebugLogsFound'));
                    return [];
                }
                const cleanLogs = this.cleanRecords(logRecords);
                const table = this.formatTable(cleanLogs);
                this.ux.log(table);
                return logRecords;
            }
            catch (e) {
                return Promise.reject(e);
            }
        });
    }
    formatTable(logRecords) {
        const tb = new apex_node_1.Table();
        const logRowArray = [];
        for (const logRecord of logRecords) {
            const row = {
                app: logRecord.Application,
                duration: String(logRecord.DurationMilliseconds),
                id: logRecord.Id,
                location: logRecord.Location,
                size: String(logRecord.LogLength),
                user: logRecord.LogUser.Name,
                operation: logRecord.Operation,
                request: logRecord.Request,
                time: logRecord.StartTime,
                status: logRecord.Status
            };
            logRowArray.push(row);
        }
        const tableResult = tb.createTable(logRowArray, [
            {
                key: 'app',
                label: messages.getMessage('appColHeader')
            },
            {
                key: 'duration',
                label: messages.getMessage('durationColHeader')
            },
            {
                key: 'id',
                label: messages.getMessage('idColHeader')
            },
            {
                key: 'location',
                label: messages.getMessage('locationColHeader')
            },
            {
                key: 'size',
                label: messages.getMessage('sizeColHeader')
            },
            {
                key: 'user',
                label: messages.getMessage('userColHeader')
            },
            {
                key: 'operation',
                label: messages.getMessage('operationColHeader')
            },
            {
                key: 'request',
                label: messages.getMessage('requestColHeader')
            },
            {
                key: 'time',
                label: messages.getMessage('timeColHeader')
            },
            {
                key: 'status',
                label: messages.getMessage('statusColHeader')
            }
        ]);
        return tableResult;
    }
    cleanRecords(logRecords) {
        return logRecords.map(record => {
            record.StartTime = this.formatTime(record.StartTime);
            return record;
        });
    }
    formatTime(time) {
        const milliIndex = time.indexOf('.');
        if (milliIndex !== -1) {
            return time.substring(0, milliIndex) + time.substring(milliIndex + 4);
        }
        return time;
    }
}
exports.default = List;
List.requiresUsername = true;
List.description = (0, utils_1.buildDescription)(messages.getMessage('commandDescription'), messages.getMessage('longDescription'));
List.longDescription = messages.getMessage('longDescription');
List.examples = [
    `$ sfdx force:apex:log:list`,
    `$ sfdx force:apex:log:list -u me@my.org`
];
List.flagsConfig = {
    json: command_1.flags.boolean({
        description: messages.getMessage('jsonDescription')
    }),
    loglevel: command_1.flags.enum({
        description: messages.getMessage('logLevelDescription'),
        longDescription: messages.getMessage('logLevelLongDescription'),
        default: 'warn',
        options: utils_1.logLevels
    }),
    apiversion: command_1.flags.builtin()
};
//# sourceMappingURL=list.js.map
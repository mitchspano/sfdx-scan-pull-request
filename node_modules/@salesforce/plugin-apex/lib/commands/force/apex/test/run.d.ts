import { CancellationTokenSource } from '@salesforce/apex-node';
import { flags, SfdxCommand } from '@salesforce/command';
import { AnyJson } from '@salesforce/ts-types';
export declare const TestLevelValues: string[];
export default class Run extends SfdxCommand {
    protected static requiresUsername: boolean;
    protected cancellationTokenSource: CancellationTokenSource;
    static description: string;
    static longDescription: string;
    static examples: string[];
    static readonly flagsConfig: {
        json: flags.Discriminated<flags.Boolean<boolean>>;
        loglevel: flags.Discriminated<flags.Enum<string>>;
        apiversion: flags.Builtin;
        codecoverage: flags.Discriminated<flags.Boolean<boolean>>;
        outputdir: flags.Discriminated<flags.String>;
        testlevel: flags.Discriminated<flags.Enum<string>>;
        classnames: flags.Discriminated<flags.String>;
        resultformat: flags.Discriminated<flags.Enum<string>>;
        suitenames: flags.Discriminated<flags.String>;
        tests: flags.Discriminated<flags.String>;
        wait: flags.Discriminated<flags.String>;
        synchronous: flags.Discriminated<flags.Boolean<boolean>>;
        verbose: flags.Builtin;
        detailedcoverage: flags.Discriminated<flags.Boolean<boolean>>;
    };
    run(): Promise<AnyJson>;
    validateFlags(): Promise<void>;
    private getTestLevelfromFlags;
    private logHuman;
    private logTap;
    private logJUnit;
    private formatResultInJson;
    private formatReportHint;
    /**
     * Handles special exceptions where we don't want to return early
     * with the testRunId.
     **/
    private shouldImmediatelyReturn;
}

"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.colorLogs = exports.buildDescription = exports.logLevels = exports.resultFormat = exports.colorError = exports.colorSuccess = exports.FAILURE_EXIT_CODE = void 0;
const chalk = require("chalk");
exports.FAILURE_EXIT_CODE = 100;
exports.colorSuccess = chalk.bold.green;
exports.colorError = chalk.bold.red;
exports.resultFormat = ['human', 'tap', 'junit', 'json'];
exports.logLevels = [
    'trace',
    'debug',
    'info',
    'warn',
    'error',
    'fatal',
    'TRACE',
    'DEBUG',
    'INFO',
    'WARN',
    'ERROR',
    'FATAL'
];
function buildDescription(shortDescription, longDescription) {
    return `${shortDescription}\n${longDescription}`;
}
exports.buildDescription = buildDescription;
const colorMap = new Map([
    [new RegExp(/\b([\w]+\.)+(\w)+\b/g), chalk.blueBright],
    [new RegExp(/\b(DEBUG)\b/g), chalk.bold.cyan],
    [new RegExp(/\b(HINT|INFO|INFORMATION)\b/g), chalk.bold.green],
    [new RegExp(/\b(WARNING|WARN)\b/g), chalk.bold.yellow],
    [new RegExp(/\b(ERROR|FAILURE|FAIL)\b/g), chalk.bold.red],
    [new RegExp(/\b([a-zA-Z.]*Exception)\b/g), chalk.bold.red],
    [new RegExp(/"[^"]*"/g), chalk.bold.red],
    [new RegExp(/\b([0-9]+|true|false|null)\b/g), chalk.blueBright]
]);
function replace(regex, word) {
    const color = colorMap.get(regex);
    if (!color) {
        throw new Error('Error retrieving colors');
    }
    const result = word.replace(regex, match => {
        return `${color(match)}`;
    });
    return result;
}
function colorLogs(log) {
    for (const c of colorMap.keys()) {
        log = replace(c, log);
    }
    return log;
}
exports.colorLogs = colorLogs;
//# sourceMappingURL=utils.js.map
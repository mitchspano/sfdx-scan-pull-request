"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildOutputDirConfig = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const apex_node_1 = require("@salesforce/apex-node");
/**
 * Builds output directory configuration with CLI format result files
 * @param result Test results from async/sync test run
 * @param jsonOutput JSON CLI format of test results
 * @param outputDir Output directory for result files
 * @param resultFormat Result format for output files
 * @param detailedCoverage Boolean to control detailed coverage reporting
 * @param synchronous Whether the test run was synchronous
 * @returns Output directory configuration
 */
function buildOutputDirConfig(result, jsonOutput, outputDir, resultFormat, detailedCoverage, synchronous = false) {
    var _a, _b, _c, _d, _e;
    const outputDirConfig = {
        dirPath: outputDir
    };
    if (result.hasOwnProperty('summary')) {
        result = result;
        jsonOutput = jsonOutput;
        if (typeof resultFormat !== 'undefined' || synchronous) {
            outputDirConfig.fileInfos = [
                {
                    filename: result.summary.testRunId
                        ? `test-result-${result.summary.testRunId}.json`
                        : `test-result.json`,
                    content: jsonOutput
                },
                ...(jsonOutput.coverage
                    ? [
                        {
                            filename: `test-result-codecoverage.json`,
                            content: (_a = jsonOutput.coverage) === null || _a === void 0 ? void 0 : _a.coverage
                        }
                    ]
                    : [])
            ];
            outputDirConfig.resultFormats = [apex_node_1.ResultFormat.junit];
        }
        if (typeof resultFormat === 'undefined' && synchronous) {
            resultFormat = apex_node_1.ResultFormat.human;
        }
        switch (resultFormat) {
            case 'tap':
                const tapResult = new apex_node_1.TapReporter().format(result);
                (_b = outputDirConfig.fileInfos) === null || _b === void 0 ? void 0 : _b.push({
                    filename: `test-result.txt`,
                    content: tapResult
                });
                (_c = outputDirConfig.resultFormats) === null || _c === void 0 ? void 0 : _c.push(apex_node_1.ResultFormat.tap);
                break;
            case 'junit':
                const junitResult = new apex_node_1.JUnitReporter().format(result);
                (_d = outputDirConfig.fileInfos) === null || _d === void 0 ? void 0 : _d.push({
                    filename: `test-result.xml`,
                    content: junitResult
                });
                break;
            case 'human':
                const humanResult = new apex_node_1.HumanReporter().format(result, detailedCoverage);
                (_e = outputDirConfig.fileInfos) === null || _e === void 0 ? void 0 : _e.push({
                    filename: `test-result.txt`,
                    content: humanResult
                });
                break;
        }
    }
    return outputDirConfig;
}
exports.buildOutputDirConfig = buildOutputDirConfig;
//# sourceMappingURL=util.js.map
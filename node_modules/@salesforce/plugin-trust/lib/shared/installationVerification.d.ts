/// <reference types="node" />
import { Readable } from 'stream';
import { URL } from 'url';
import * as request from 'request';
import { NpmMeta } from '../shared/npmCommand';
import { NpmName } from './NpmName';
export declare const ALLOW_LIST_FILENAME = "unsignedPluginAllowList.json";
export declare const DEFAULT_REGISTRY = "https://registry.npmjs.org/";
export declare type IRequest = (url: string, cb?: request.RequestCallback) => void;
export interface ConfigContext {
    configDir?: string;
    cacheDir?: string;
    dataDir?: string;
    cliRoot?: string;
}
export interface Verifier {
    verify(): Promise<NpmMeta>;
    isAllowListed(): Promise<boolean>;
}
export declare class CodeVerifierInfo {
    private signature;
    private publicKey;
    private data;
    get dataToVerify(): Readable;
    set dataToVerify(value: Readable);
    get signatureStream(): Readable;
    set signatureStream(value: Readable);
    get publicKeyStream(): Readable;
    set publicKeyStream(value: Readable);
}
export declare function validSalesforceHostname(url: string | null): boolean;
export declare function verify(codeVerifierInfo: CodeVerifierInfo): Promise<boolean>;
export declare const getNpmRegistry: () => URL;
/**
 * class for verifying a digital signature pack of an npm
 */
export declare class InstallationVerification implements Verifier {
    private pluginNpmName;
    private config;
    private readonly requestImpl;
    private fsImpl;
    private readonly readFileAsync;
    private readonly unlinkAsync;
    private logger;
    constructor(requestImpl?: IRequest, fsImpl?: unknown);
    /**
     * setter for the cli engine config
     *
     * @param _config cli engine config
     */
    setConfig(_config?: ConfigContext): InstallationVerification;
    /**
     * setter for the plugin name
     *
     * @param _pluginName the published plugin name
     */
    setPluginNpmName(_pluginName?: NpmName | undefined): InstallationVerification;
    /**
     * validates the digital signature.
     */
    verify(): Promise<NpmMeta>;
    isAllowListed(): Promise<boolean>;
    /**
     * Retrieve url content for a host
     *
     * @param url host url.
     */
    getSigningContent(url: string): Promise<Readable>;
    /**
     * Downloads the tgz file content and stores it in a cache folder
     */
    streamTagGz(): Promise<NpmMeta>;
    private getConfigPath;
    private getCachePath;
    /**
     * Invoke npm to discover a urls for the certificate and digital signature.
     */
    private retrieveNpmMeta;
    private getLogger;
}
export declare class VerificationConfig {
    private verifierMember;
    private logMember;
    private promptMember;
    get verifier(): Verifier;
    set verifier(value: Verifier);
    get log(): (message: string) => void;
    set log(value: (message: string) => void);
    get prompt(): (message: string) => Promise<string>;
    set prompt(value: (message: string) => Promise<string>);
}
export declare function doPrompt(vconfig: VerificationConfig): Promise<void>;
export declare function doInstallationCodeSigningVerification(config: ConfigContext, plugin: {
    plugin: string;
    tag: string;
}, verificationConfig: VerificationConfig): Promise<void>;

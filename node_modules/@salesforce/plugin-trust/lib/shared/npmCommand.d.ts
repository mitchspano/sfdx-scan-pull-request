import * as shelljs from 'shelljs';
export declare type NpmMeta = {
    tarballUrl?: string;
    signatureUrl?: string;
    publicKeyUrl?: string;
    tarballLocalPath?: string;
    verified?: boolean;
    moduleName?: string;
    version?: string;
    tarballFilename?: string;
};
export declare type NpmShowResults = {
    versions: string[];
    'dist-tags': {
        [name: string]: string;
    };
    sfdx?: {
        publicKeyUrl: string;
        signatureUrl: string;
    };
    dist?: {
        [name: string]: string;
    };
};
declare type NpmCommandOptions = shelljs.ExecOptions & {
    json?: boolean;
    registry?: string;
    cliRoot?: string;
};
declare type NpmCommandResult = shelljs.ShellString;
export declare class NpmCommand {
    private static npmPkgPath;
    static runNpmCmd(cmd: string, options?: NpmCommandOptions): NpmCommandResult;
    private static npmPackagePath;
    /**
     * Returns the path to the npm-cli.js file in this package's node_modules
     *
     * @private
     */
    private static npmCli;
    /**
     * Locate node executable and return its absolute path
     * First it tries to locate the node executable on the root path passed in
     * If not found then tries to use whatver 'node' resolves to on the user's PATH
     * If found return absolute path to the executable
     * If the node executable cannot be found, an error is thrown
     *
     * @private
     */
    private static findNode;
    /**
     * Finds the bin directory in the sfdx installation root path
     *
     * @param sfdxPath
     * @private
     */
    private static findSfdxBinDirs;
}
export declare class NpmModule {
    private module;
    private version;
    private cliRoot;
    npmMeta: NpmMeta;
    constructor(module: string, version?: string, cliRoot?: string);
    show(registry: string): NpmShowResults;
    pack(registry: string, options?: shelljs.ExecOptions): void;
    fetchTarball(registry: string, options?: shelljs.ExecOptions): Promise<void>;
    pollForAvailability(checkFn: () => void): Promise<void>;
}
export {};

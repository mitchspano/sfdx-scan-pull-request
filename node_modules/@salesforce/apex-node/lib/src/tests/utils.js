"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryNamespaces = exports.stringify = exports.calculatePercentage = exports.isValidApexClassID = exports.isValidTestRunID = void 0;
const constants_1 = require("./constants");
function isValidTestRunID(testRunId) {
    return ((testRunId.length === 15 || testRunId.length === 18) &&
        testRunId.startsWith(constants_1.TEST_RUN_ID_PREFIX));
}
exports.isValidTestRunID = isValidTestRunID;
function isValidApexClassID(apexClassId) {
    return ((apexClassId.length === 15 || apexClassId.length === 18) &&
        apexClassId.startsWith(constants_1.CLASS_ID_PREFIX));
}
exports.isValidApexClassID = isValidApexClassID;
function calculatePercentage(dividend, divisor) {
    let percentage = '0%';
    if (dividend > 0) {
        const calcPct = ((dividend / divisor) * 100).toFixed();
        percentage = `${calcPct}%`;
    }
    return percentage;
}
exports.calculatePercentage = calculatePercentage;
function stringify(jsonObj) {
    return JSON.stringify(jsonObj, null, 2);
}
exports.stringify = stringify;
function queryNamespaces(connection) {
    return __awaiter(this, void 0, void 0, function* () {
        const installedNsQuery = 'SELECT NamespacePrefix FROM PackageLicense';
        const installedNsPromise = connection.query(installedNsQuery);
        const orgNsQuery = 'SELECT NamespacePrefix FROM Organization';
        const orgNsPromise = connection.query(orgNsQuery);
        const allNamespaces = yield Promise.all([installedNsPromise, orgNsPromise]);
        const installedNamespaces = allNamespaces[0].records.map(record => {
            return { installedNs: true, namespace: record.NamespacePrefix };
        });
        const orgNamespaces = allNamespaces[1].records.map(record => {
            return { installedNs: false, namespace: record.NamespacePrefix };
        });
        return [...orgNamespaces, ...installedNamespaces];
    });
}
exports.queryNamespaces = queryNamespaces;
//# sourceMappingURL=utils.js.map
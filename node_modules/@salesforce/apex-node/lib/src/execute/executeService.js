"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteService = void 0;
const fs_1 = require("fs");
const types_1 = require("./types");
const i18n_1 = require("../i18n");
const utils_1 = require("../utils");
const utils_2 = require("./utils");
const readline = require("readline");
class ExecuteService {
    constructor(connection) {
        this.connection = connection;
    }
    executeAnonymous(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.getApexCode(options);
            let count = 0;
            while (count < 2) {
                try {
                    const request = this.buildExecRequest(data);
                    const result = yield this.connectionRequest(request);
                    return this.jsonFormat(result);
                }
                catch (e) {
                    if (e.name === 'ERROR_HTTP_500' &&
                        e.message &&
                        e.message.includes('INVALID_SESSION_ID')) {
                        yield (0, utils_1.refreshAuth)(this.connection);
                        count += 1;
                    }
                    else {
                        throw new Error(i18n_1.nls.localize('unexpectedExecuteCommandError', e.message));
                    }
                }
            }
        });
    }
    getApexCode(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.apexCode) {
                return String(options.apexCode);
            }
            else if (options.apexFilePath) {
                return this.readApexFile(options.apexFilePath);
            }
            else if (options.userInput) {
                return yield this.getUserInput();
            }
            else {
                throw new Error(i18n_1.nls.localize('optionExecAnonError'));
            }
        });
    }
    readApexFile(filepath) {
        if (!(0, fs_1.existsSync)(filepath)) {
            throw new Error(i18n_1.nls.localize('fileNotFoundError', filepath));
        }
        return (0, fs_1.readFileSync)(filepath, 'utf8');
    }
    getUserInput() {
        return __awaiter(this, void 0, void 0, function* () {
            process.stdout.write(i18n_1.nls.localize('execAnonInputPrompt'));
            return new Promise((resolve, reject) => {
                const readInterface = readline.createInterface(process.stdin, process.stdout);
                const timeout = setTimeout(() => {
                    reject(new Error(i18n_1.nls.localize('execAnonInputTimeout')));
                    readInterface.close();
                }, 60000);
                let apexCode = '';
                readInterface.on('line', (input) => {
                    timeout.refresh();
                    apexCode = apexCode + input + '\n';
                });
                readInterface.on('close', () => {
                    resolve(apexCode);
                    clearTimeout(timeout);
                });
                readInterface.on('error', (err) => {
                    reject(new Error(i18n_1.nls.localize('unexpectedExecAnonInputError', err.message)));
                });
            });
        });
    }
    // Tooling API execute anonymous apex REST endpoint was not used because
    // it requires multiple api calls to turn on trace flag, execute anonymous apex, and get the generated debug log
    buildExecRequest(data) {
        const body = (0, utils_2.encodeBody)(this.connection.accessToken, data);
        const postEndpoint = `${this.connection.instanceUrl}/services/Soap/s/${this.connection.version}/${this.connection.accessToken.split('!')[0]}`;
        const requestHeaders = {
            'content-type': 'text/xml',
            soapaction: types_1.action
        };
        const request = {
            method: 'POST',
            url: postEndpoint,
            body,
            headers: requestHeaders
        };
        return request;
    }
    jsonFormat(soapResponse) {
        const execAnonResponse = soapResponse[types_1.soapEnv][types_1.soapBody].executeAnonymousResponse.result;
        const formattedResponse = {
            compiled: execAnonResponse.compiled === 'true',
            success: execAnonResponse.success === 'true',
            logs: soapResponse[types_1.soapEnv][types_1.soapHeader].DebuggingInfo.debugLog
        };
        if (!formattedResponse.success) {
            formattedResponse.diagnostic = [
                {
                    lineNumber: execAnonResponse.line,
                    columnNumber: execAnonResponse.column,
                    compileProblem: typeof execAnonResponse.compileProblem === 'object'
                        ? ''
                        : execAnonResponse.compileProblem,
                    exceptionMessage: typeof execAnonResponse.exceptionMessage === 'object'
                        ? ''
                        : execAnonResponse.exceptionMessage,
                    exceptionStackTrace: typeof execAnonResponse.exceptionStackTrace === 'object'
                        ? ''
                        : execAnonResponse.exceptionStackTrace
                }
            ];
        }
        return formattedResponse;
    }
    connectionRequest(requestData) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.connection.request(requestData));
        });
    }
}
exports.ExecuteService = ExecuteService;
//# sourceMappingURL=executeService.js.map
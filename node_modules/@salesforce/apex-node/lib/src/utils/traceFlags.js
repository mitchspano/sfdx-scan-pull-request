"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceFlags = void 0;
const i18n_1 = require("../i18n");
const logs_1 = require("../logs");
const dateUtil_1 = require("./dateUtil");
const authUtil_1 = require("./authUtil");
class TraceFlags {
    constructor(connection) {
        this.connection = connection;
    }
    ensureTraceFlags(debugLevelName) {
        return __awaiter(this, void 0, void 0, function* () {
            const username = this.connection.getUsername();
            if (!username) {
                throw new Error(i18n_1.nls.localize('error_no_default_username'));
            }
            const userId = (yield this.getUserIdOrThrow(username)).Id;
            const traceFlag = yield this.getTraceFlagForUser(userId);
            if (traceFlag) {
                // update existing debug level and trace flag
                if (!(yield this.updateDebugLevel(traceFlag.DebugLevelId))) {
                    return false;
                }
                const expirationDate = this.calculateExpirationDate(traceFlag.ExpirationDate
                    ? new Date(traceFlag.ExpirationDate)
                    : new Date());
                return yield this.updateTraceFlag(traceFlag.Id, expirationDate);
            }
            else {
                const debugLevelId = yield this.getDebugLevelId(debugLevelName);
                // create a trace flag
                const expirationDate = this.calculateExpirationDate(new Date());
                if (!(yield this.createTraceFlag(userId, debugLevelId, expirationDate))) {
                    return false;
                }
            }
            return true;
        });
    }
    getDebugLevelId(debugLevelName) {
        return __awaiter(this, void 0, void 0, function* () {
            let debugLevelId;
            if (debugLevelName) {
                debugLevelId = yield this.findDebugLevel(debugLevelName);
                if (!debugLevelId) {
                    throw new Error(i18n_1.nls.localize('trace_flags_failed_to_find_debug_level', debugLevelName));
                }
            }
            else {
                debugLevelId = yield this.createDebugLevel(logs_1.DEFAULT_DEBUG_LEVEL_NAME);
                if (!debugLevelId) {
                    throw new Error(i18n_1.nls.localize('trace_flags_failed_to_create_debug_level'));
                }
            }
            return debugLevelId;
        });
    }
    findDebugLevel(debugLevelName) {
        return __awaiter(this, void 0, void 0, function* () {
            const escapedDebugLevel = (0, authUtil_1.escapeXml)(debugLevelName);
            const query = `SELECT Id FROM DebugLevel WHERE DeveloperName = '${escapedDebugLevel}'`;
            const result = (yield this.connection.tooling.query(query));
            return result.totalSize && result.totalSize > 0 && result.records
                ? result.records[0].Id
                : undefined;
        });
    }
    updateDebugLevel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const debugLevel = {
                Id: id,
                ApexCode: 'FINEST',
                Visualforce: 'FINER'
            };
            const result = (yield this.connection.tooling.update('DebugLevel', debugLevel));
            return result.success;
        });
    }
    createDebugLevel(debugLevelName) {
        return __awaiter(this, void 0, void 0, function* () {
            const developerName = debugLevelName;
            const debugLevel = {
                developerName,
                MasterLabel: developerName,
                ApexCode: 'FINEST',
                Visualforce: 'FINER'
            };
            const result = (yield this.connection.tooling.create('DebugLevel', debugLevel));
            return result.success && result.id ? result.id : undefined;
        });
    }
    updateTraceFlag(id, expirationDate) {
        return __awaiter(this, void 0, void 0, function* () {
            const traceFlag = {
                Id: id,
                StartDate: Date.now(),
                ExpirationDate: expirationDate.toUTCString()
            };
            const result = (yield this.connection.tooling.update('TraceFlag', traceFlag));
            return result.success;
        });
    }
    createTraceFlag(userId, debugLevelId, expirationDate) {
        return __awaiter(this, void 0, void 0, function* () {
            const traceFlag = {
                tracedentityid: userId,
                logtype: logs_1.LOG_TYPE,
                debuglevelid: debugLevelId,
                StartDate: Date.now(),
                ExpirationDate: expirationDate.toUTCString()
            };
            const result = (yield this.connection.tooling.create('TraceFlag', traceFlag));
            return result.success && result.id ? result.id : undefined;
        });
    }
    isValidDateLength(expirationDate) {
        const currDate = Date.now();
        return (expirationDate.getTime() - currDate >
            logs_1.LOG_TIMER_LENGTH_MINUTES * dateUtil_1.MILLISECONDS_PER_MINUTE);
    }
    calculateExpirationDate(expirationDate) {
        if (!this.isValidDateLength(expirationDate)) {
            expirationDate = new Date(Date.now() + logs_1.LOG_TIMER_LENGTH_MINUTES * dateUtil_1.MILLISECONDS_PER_MINUTE);
        }
        return expirationDate;
    }
    getUserIdOrThrow(username) {
        return __awaiter(this, void 0, void 0, function* () {
            const escapedUsername = (0, authUtil_1.escapeXml)(username);
            const userQuery = `SELECT Id FROM User WHERE username='${escapedUsername}'`;
            const userResult = yield this.connection.query(userQuery);
            if (userResult.totalSize === 0) {
                throw new Error(i18n_1.nls.localize('trace_flags_unknown_user'));
            }
            return userResult.records[0];
        });
    }
    getTraceFlagForUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const traceFlagQuery = `
      SELECT Id, logtype, startdate, expirationdate, debuglevelid, debuglevel.apexcode, debuglevel.visualforce
      FROM TraceFlag
      WHERE logtype='${logs_1.LOG_TYPE}' AND TracedEntityId='${userId}'
      ORDER BY CreatedDate DESC
      LIMIT 1
    `;
            const traceFlagResult = yield this.connection.tooling.query(traceFlagQuery);
            if (traceFlagResult.totalSize > 0) {
                return traceFlagResult.records[0];
            }
            return undefined;
        });
    }
}
exports.TraceFlags = TraceFlags;
//# sourceMappingURL=traceFlags.js.map
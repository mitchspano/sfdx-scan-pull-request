"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFiles = exports.createFile = exports.ensureFileExists = exports.ensureDirectoryExists = void 0;
const fs = require("fs");
const path = require("path");
function ensureDirectoryExists(filePath) {
    if (fs.existsSync(filePath)) {
        return;
    }
    ensureDirectoryExists(path.dirname(filePath));
    fs.mkdirSync(filePath);
}
exports.ensureDirectoryExists = ensureDirectoryExists;
function ensureFileExists(filePath) {
    ensureDirectoryExists(path.dirname(filePath));
    fs.closeSync(fs.openSync(filePath, 'w'));
}
exports.ensureFileExists = ensureFileExists;
/**
 * Method to save a file on disk.
 *
 * @param filePath path where to
 * @param fileContent file contents
 */
function createFile(filePath, fileContent) {
    ensureFileExists(filePath);
    const writeStream = fs.createWriteStream(filePath);
    writeStream.write(fileContent);
}
exports.createFile = createFile;
function streamPromise(stream) {
    return new Promise((resolve, reject) => {
        stream.on('end', () => {
            resolve();
        });
        stream.on('error', error => {
            reject(error);
        });
    });
}
/**
 * Method to save multiple files on disk
 * @param fileMap key = filePath, value = file contents
 */
function createFiles(fileMap) {
    return __awaiter(this, void 0, void 0, function* () {
        const writePromises = fileMap.map(file => {
            ensureFileExists(file.path);
            const writeStream = fs.createWriteStream(file.path);
            writeStream.write(file.content);
            return streamPromise(writeStream);
        });
        yield Promise.all(writePromises);
    });
}
exports.createFiles = createFiles;
//# sourceMappingURL=fileSystemHandler.js.map
"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License.
 *  See https://github.com/Microsoft/vscode/blob/master/LICENSE.txt for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancellationTokenSource = void 0;
class Token {
    constructor() {
        this.isCancellationRequested = false;
        this.callbacks = [];
    }
    onCancellationRequested(listener) {
        if (this.isCancellationRequested) {
            listener();
        }
        else {
            this.callbacks.push(listener);
        }
    }
}
class CancellationTokenSource {
    constructor() {
        this.token = new Token();
    }
    asyncCancel() {
        return __awaiter(this, void 0, void 0, function* () {
            this.token.isCancellationRequested = true;
            for (const callback of this.token.callbacks) {
                yield callback();
            }
            this.token.callbacks = [];
        });
    }
}
exports.CancellationTokenSource = CancellationTokenSource;
//# sourceMappingURL=cancellation.js.map
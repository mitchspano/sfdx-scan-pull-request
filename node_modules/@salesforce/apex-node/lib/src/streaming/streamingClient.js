"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingClient = exports.Deferred = void 0;
const faye_1 = require("faye");
const types_1 = require("./types");
const i18n_1 = require("../i18n");
const utils_1 = require("../utils");
const TEST_RESULT_CHANNEL = '/systemTopic/TestResult';
const DEFAULT_STREAMING_TIMEOUT_MS = 14400;
class Deferred {
    constructor() {
        this.promise = new Promise(resolve => (this.resolve = resolve));
    }
}
exports.Deferred = Deferred;
class StreamingClient {
    constructor(connection, progress) {
        this.apiVersion = '36.0';
        this.subscribedTestRunIdDeferred = new Deferred();
        this.hasDisconnected = false;
        this.conn = connection;
        this.progress = progress;
        const streamUrl = this.getStreamURL(this.conn.instanceUrl);
        this.client = new faye_1.Client(streamUrl, {
            timeout: DEFAULT_STREAMING_TIMEOUT_MS
        });
        this.client.on('transport:up', () => {
            var _a;
            (_a = this.progress) === null || _a === void 0 ? void 0 : _a.report({
                type: 'StreamingClientProgress',
                value: 'streamingTransportUp',
                message: i18n_1.nls.localize('streamingTransportUp')
            });
        });
        this.client.on('transport:down', () => {
            var _a;
            (_a = this.progress) === null || _a === void 0 ? void 0 : _a.report({
                type: 'StreamingClientProgress',
                value: 'streamingTransportDown',
                message: i18n_1.nls.localize('streamingTransportDown')
            });
        });
        this.client.addExtension({
            incoming: (message, callback) => __awaiter(this, void 0, void 0, function* () {
                if (message && message.error) {
                    // throw errors on handshake errors
                    if (message.channel === '/meta/handshake') {
                        this.disconnect();
                        throw new Error(i18n_1.nls.localize('streamingHandshakeFail', message.error));
                    }
                    // refresh auth on 401 errors
                    if (message.error === "401::Authentication invalid" /* ERROR_AUTH_INVALID */) {
                        yield this.init();
                        callback(message);
                        return;
                    }
                    // call faye callback on handshake advice
                    if (message.advice && message.advice.reconnect === 'handshake') {
                        callback(message);
                        return;
                    }
                    // call faye callback on 403 unknown client errors
                    if (message.error === "403::Unknown client" /* ERROR_UNKNOWN_CLIENT_ID */) {
                        callback(message);
                        return;
                    }
                    // default: disconnect and throw error
                    this.disconnect();
                    throw new Error(message.error);
                }
                callback(message);
            })
        });
    }
    get subscribedTestRunIdPromise() {
        return this.subscribedTestRunIdDeferred.promise;
    }
    removeTrailingSlashURL(instanceUrl) {
        return instanceUrl ? instanceUrl.replace(/\/+$/, '') : '';
    }
    getStreamURL(instanceUrl) {
        const urlElements = [
            this.removeTrailingSlashURL(instanceUrl),
            'cometd',
            this.apiVersion
        ];
        return urlElements.join('/');
    }
    // NOTE: There's an intermittent auth issue with Streaming API that requires the connection to be refreshed
    // The builtin org.refreshAuth() util only refreshes the connection associated with the instance of the org you provide, not all connections associated with that username's orgs
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, utils_1.refreshAuth)(this.conn);
            const accessToken = this.conn.getConnectionOptions().accessToken;
            if (accessToken) {
                this.client.setHeader('Authorization', `OAuth ${accessToken}`);
            }
            else {
                throw new Error(i18n_1.nls.localize('noAccessTokenFound'));
            }
        });
    }
    handshake() {
        return new Promise(resolve => {
            this.client.handshake(() => {
                resolve();
            });
        });
    }
    disconnect() {
        this.client.disconnect();
        this.hasDisconnected = true;
    }
    subscribe(action, testRunId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((subscriptionResolve, subscriptionReject) => {
                let intervalId;
                try {
                    this.client.subscribe(TEST_RESULT_CHANNEL, (message) => __awaiter(this, void 0, void 0, function* () {
                        const result = yield this.handler(message);
                        if (result) {
                            this.disconnect();
                            clearInterval(intervalId);
                            subscriptionResolve({
                                runId: this.subscribedTestRunId,
                                queueItem: result
                            });
                        }
                    }));
                    if (action) {
                        action()
                            .then(id => {
                            this.subscribedTestRunId = id;
                            this.subscribedTestRunIdDeferred.resolve(id);
                            if (!this.hasDisconnected) {
                                intervalId = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                                    const result = yield this.getCompletedTestRun(id);
                                    if (result) {
                                        this.disconnect();
                                        clearInterval(intervalId);
                                        subscriptionResolve({
                                            runId: this.subscribedTestRunId,
                                            queueItem: result
                                        });
                                    }
                                }), types_1.RetreiveResultsInterval);
                            }
                        })
                            .catch(e => {
                            this.disconnect();
                            clearInterval(intervalId);
                            subscriptionReject(e);
                        });
                    }
                    else {
                        this.subscribedTestRunId = testRunId;
                        this.subscribedTestRunIdDeferred.resolve(testRunId);
                        if (!this.hasDisconnected) {
                            intervalId = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                                const result = yield this.getCompletedTestRun(testRunId);
                                if (result) {
                                    this.disconnect();
                                    clearInterval(intervalId);
                                    subscriptionResolve({
                                        runId: this.subscribedTestRunId,
                                        queueItem: result
                                    });
                                }
                            }), types_1.RetreiveResultsInterval);
                        }
                    }
                }
                catch (e) {
                    this.disconnect();
                    clearInterval(intervalId);
                    subscriptionReject(e);
                }
            });
        });
    }
    isValidTestRunID(testRunId, subscribedId) {
        if (testRunId.length !== 15 && testRunId.length !== 18) {
            return false;
        }
        const testRunId15char = testRunId.substring(0, 14);
        if (subscribedId) {
            const subscribedTestRunId15char = subscribedId.substring(0, 14);
            return subscribedTestRunId15char === testRunId15char;
        }
        return true;
    }
    handler(message, runId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const testRunId = runId || message.sobject.Id;
            if (!this.isValidTestRunID(testRunId, this.subscribedTestRunId)) {
                return null;
            }
            const result = yield this.getCompletedTestRun(testRunId);
            if (result) {
                return result;
            }
            (_a = this.progress) === null || _a === void 0 ? void 0 : _a.report({
                type: 'StreamingClientProgress',
                value: 'streamingProcessingTestRun',
                message: i18n_1.nls.localize('streamingProcessingTestRun', testRunId),
                testRunId
            });
            return null;
        });
    }
    getCompletedTestRun(testRunId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const queryApexTestQueueItem = `SELECT Id, Status, ApexClassId, TestRunResultId FROM ApexTestQueueItem WHERE ParentJobId = '${testRunId}'`;
            const result = yield this.conn.tooling.query(queryApexTestQueueItem, {
                autoFetch: true
            });
            if (result.records.length === 0) {
                throw new Error(i18n_1.nls.localize('noTestQueueResults', testRunId));
            }
            (_a = this.progress) === null || _a === void 0 ? void 0 : _a.report({
                type: 'TestQueueProgress',
                value: result
            });
            for (let i = 0; i < result.records.length; i++) {
                const item = result.records[i];
                if (item.Status === "Queued" /* Queued */ ||
                    item.Status === "Holding" /* Holding */ ||
                    item.Status === "Preparing" /* Preparing */ ||
                    item.Status === "Processing" /* Processing */) {
                    return null;
                }
            }
            return result;
        });
    }
}
exports.StreamingClient = StreamingClient;
//# sourceMappingURL=streamingClient.js.map
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const path = require("path");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const createUtil_1 = require("../../../../lib/helpers/createUtil");
const validationUtil_1 = require("../../../../lib/helpers/validationUtil");
// Initialize Messages with the current plugin directory
core_1.Messages.importMessagesDirectory(__dirname);
// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = core_1.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'createRecord');
class Create extends command_1.SfdxCommand {
    // eslint-disable-next-line @typescript-eslint/member-ordering
    async run() {
        var _b;
        try {
            const createUtil = new createUtil_1.CreateUtil();
            let typename = this.flags.typename;
            const recordname = this.flags.recordname;
            const label = (_b = this.flags.label) !== null && _b !== void 0 ? _b : recordname;
            const protectedFlag = this.flags.protected === 'true';
            const inputdir = this.flags.inputdir;
            const outputdir = this.flags.outputdir;
            const dirName = createUtil.appendDirectorySuffix(typename);
            const fieldDirPath = path.join(inputdir, dirName, 'fields');
            const fileNames = await fs.promises.readdir(fieldDirPath);
            // forgive them if they passed in type__mdt, and cut off the __mdt
            if (typename.endsWith('__mdt')) {
                typename = typename.substring(0, typename.indexOf('__mdt'));
            }
            // if customMetadata folder does not exist, create it
            await fs.promises.mkdir(outputdir, { recursive: true });
            const fileData = await createUtil.getFileData(fieldDirPath, fileNames);
            await createUtil.createRecord({
                typename,
                recordname,
                label,
                inputdir,
                outputdir,
                protected: protectedFlag,
                varargs: this.varargs,
                fileData,
            });
            this.ux.log(messages.getMessage('successResponse', [typename, recordname, label, protectedFlag, outputdir]));
            // Return an object to be displayed with --json
            return {
                typename,
                recordname,
                label,
                inputdir,
                outputdir,
                protectedFlag,
                varargs: this.varargs,
                fileData,
            };
        }
        catch (err) {
            if (err instanceof Error) {
                this.ux.log(err.message);
            }
        }
    }
}
exports.default = Create;
_a = Create;
Create.description = messages.getMessage('commandDescription');
Create.longDescription = messages.getMessage('commandLongDescription');
Create.examples = [
    messages.getMessage('exampleCaption1'),
    '    $ sfdx force:cmdt:record:create --typename MyCMT__mdt --recordname MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar',
    messages.getMessage('exampleCaption2'),
    '    $ sfdx force:cmdt:record:create --typename MyCMT__mdt --recordname MyRecord --label "' +
        messages.getMessage('labelFlagExample') +
        '" ' +
        '--protected true My_Custom_Field_1=Foo My_Custom_Field_2=Bar',
];
Create.flagsConfig = {
    typename: command_1.flags.string({
        char: 't',
        description: messages.getMessage('typenameFlagDescription'),
        longDescription: messages.getMessage('typenameFlagLongDescription'),
        required: true,
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateMetadataTypeName)(input)),
    }),
    recordname: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('recordNameFlagDescription'),
        longDescription: messages.getMessage('recordNameFlagLongDescription'),
        required: true,
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateMetadataRecordName)(input)),
    }),
    label: command_1.flags.string({
        char: 'l',
        description: messages.getMessage('labelFlagDescription'),
        longDescription: messages.getMessage('labelFlagLongDescription'),
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateLessThanForty)(input, messages.getMessage('notAValidLabelNameError', [input]))),
    }),
    protected: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('protectedFlagDescription'),
        longDescription: messages.getMessage('protectedFlagLongDescription'),
        options: ['true', 'false'],
        default: 'false',
    }),
    inputdir: command_1.flags.directory({
        char: 'i',
        description: messages.getMessage('inputDirectoryFlagDescription'),
        longDescription: messages.getMessage('inputDirectoryFlagLongDescription'),
        default: path.join('force-app', 'main', 'default', 'objects'),
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('outputDirectoryFlagDescription'),
        longDescription: messages.getMessage('outputDirectoryFlagLongDescription'),
        default: path.join('force-app', 'main', 'default', 'customMetadata'),
    }),
};
Create.varargs = {
    required: false,
    validator: (name) => {
        // only custom fields allowed
        if (!name.endsWith('__c')) {
            const errMsg = `Invalid parameter [${name}] found`;
            const errName = 'InvalidVarargName';
            const errAction = messages.getMessage('errorInvalidCustomField');
            throw new core_1.SfError(errMsg, errName, [errAction]);
        }
    },
};
Create.requiresProject = true;
//# sourceMappingURL=create.js.map
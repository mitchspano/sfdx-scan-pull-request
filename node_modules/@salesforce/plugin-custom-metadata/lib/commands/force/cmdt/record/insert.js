"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const path = require("path");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const csv = require("../../../../../csvtojson");
const createUtil_1 = require("../../../../lib/helpers/createUtil");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'insertRecord');
class Insert extends command_1.SfdxCommand {
    // eslint-disable-next-line @typescript-eslint/member-ordering
    async run() {
        const createUtil = new createUtil_1.CreateUtil();
        const filepath = this.flags.filepath;
        let typename = this.flags.typename;
        const inputdir = this.flags.inputdir;
        const outputdir = this.flags.outputdir;
        const dirName = createUtil.appendDirectorySuffix(typename);
        const fieldDirPath = path.join(inputdir, dirName, 'fields');
        const fileNames = await fs.promises.readdir(fieldDirPath);
        const nameField = this.flags.namecolumn;
        // forgive them if they passed in type__mdt, and cut off the __mdt
        if (typename.endsWith('__mdt')) {
            typename = typename.substring(0, typename.indexOf('__mdt'));
        }
        // if customMetadata folder does not exist, create it
        await fs.promises.mkdir(outputdir, { recursive: true });
        const fileData = await createUtil.getFileData(fieldDirPath, fileNames);
        const csvDataAry = (await csv().fromFile(filepath));
        const metadataTypeFields = createUtil.getFieldNames(fileData, nameField);
        if (csvDataAry.length > 0) {
            const record = csvDataAry[0];
            for (const key in record) {
                if (!metadataTypeFields.includes(key)) {
                    throw new core_1.SfError(messages.getMessage('fieldNotFoundError', [key, typename]));
                }
            }
        }
        // find the cmdt in the inputdir.
        // loop through files and create records that match fields
        const recordConfigs = csvDataAry.map((record) => ({
            typename,
            recordname: record[nameField].replace(' ', '_'),
            label: record[nameField],
            inputdir,
            outputdir,
            protected: false,
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            varargs: Object.fromEntries(
            // TODO: throw an error if any of the fields in the csvDataAry do not exist in the fileData
            fileData.map((file) => (record[file.fullName] ? [file.fullName, record[file.fullName]] : []))),
            fileData,
        }));
        await Promise.all(recordConfigs.map((r) => createUtil.createRecord(r)));
        this.ux.log(messages.getMessage('successResponse', [filepath, outputdir]));
        return recordConfigs;
    }
}
exports.default = Insert;
Insert.description = messages.getMessage('commandDescription');
Insert.longDescription = messages.getMessage('commandLongDescription');
Insert.examples = [
    messages.getMessage('exampleCaption1'),
    '    $ sfdx force:cmdt:record:insert --filepath path/to/my.csv --typename My_CMDT_Name',
    messages.getMessage('exampleCaption2'),
    '    $ sfdx force:cmdt:record:insert --filepath path/to/my.csv --typename My_CMDT_Name --inputdir "' +
        messages.getMessage('inputDirectoryFlagExample') +
        '" --namecolumn "PrimaryKey"',
];
Insert.flagsConfig = {
    filepath: command_1.flags.string({
        char: 'f',
        description: messages.getMessage('filepathFlagDescription'),
        longDescription: messages.getMessage('filepathFlagLongDescription'),
        required: true,
    }),
    typename: command_1.flags.string({
        char: 't',
        description: messages.getMessage('typenameFlagDescription'),
        longDescription: messages.getMessage('typenameFlagLongDescription'),
        required: true,
    }),
    inputdir: command_1.flags.directory({
        char: 'i',
        description: messages.getMessage('inputDirectoryFlagDescription'),
        longDescription: messages.getMessage('inputDirectoryFlagLongDescription'),
        default: path.join('force-app', 'main', 'default', 'objects'),
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('outputDirectoryFlagDescription'),
        longDescription: messages.getMessage('outputDirectoryFlagLongDescription'),
        default: path.join('force-app', 'main', 'default', 'customMetadata'),
    }),
    namecolumn: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('namecolumnFlagDescription'),
        longDescription: messages.getMessage('namecolumnFlagLongDescription'),
        default: 'Name',
    }),
};
Insert.requiresProject = true;
//# sourceMappingURL=insert.js.map
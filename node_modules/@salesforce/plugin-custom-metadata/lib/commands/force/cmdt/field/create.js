"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const fileWriter_1 = require("../../../../lib/helpers/fileWriter");
const validationUtil_1 = require("../../../../lib/helpers/validationUtil");
const templates_1 = require("../../../../lib/templates/templates");
// Initialize Messages with the current plugin directory
core_1.Messages.importMessagesDirectory(__dirname);
// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = core_1.Messages.loadMessages('@salesforce/plugin-custom-metadata', 'createField');
class Create extends command_1.SfdxCommand {
    // eslint-disable-next-line @typescript-eslint/member-ordering
    async run() {
        var _b, _c;
        const fieldName = this.flags.fieldname; // this should become the new file name
        const label = (_b = this.flags.label) !== null && _b !== void 0 ? _b : fieldName;
        const fieldtype = this.flags.fieldtype;
        const picklistvalues = (_c = this.flags.picklistvalues) !== null && _c !== void 0 ? _c : [];
        const decimalplaces = this.flags.decimalplaces;
        if (fieldtype === 'Picklist' && picklistvalues.length === 0) {
            throw new core_1.SfError(messages.getMessage('picklistValuesNotSuppliedError'));
        }
        const templates = new templates_1.Templates();
        const data = templates.createDefaultTypeStructure(fieldName, fieldtype, label, picklistvalues, decimalplaces);
        const fieldXML = templates.createFieldXML(data, false);
        const writer = new fileWriter_1.FileWriter();
        const saveResults = await writer.writeFieldFile(fs, this.flags.outputdir, fieldName, fieldXML);
        this.ux.log(messages.getMessage('targetDirectory', [saveResults.dir]));
        this.ux.log(messages.getMessage(saveResults.updated ? 'fileUpdate' : 'fileCreated', [saveResults.fileName]));
        return {
            fieldName,
            label,
            fieldtype,
        };
    }
}
exports.default = Create;
_a = Create;
Create.description = messages.getMessage('commandDescription');
Create.longDescription = messages.getMessage('commandLongDescription');
Create.examples = [
    messages.getMessage('exampleCaption1'),
    '    $ sfdx force:cmdt:field:create --fieldname MyField --fieldtype Checkbox',
    messages.getMessage('exampleCaption2'),
    '    $ sfdx force:cmdt:field:create --fieldname MyField --fieldtype Picklist --picklistvalues "A,B,C"',
    messages.getMessage('exampleCaption3'),
    '    $ sfdx force:cmdt:field:create --fieldname MyField --fieldtype Number --decimalplaces 2',
];
Create.args = [{ name: 'file' }];
Create.flagsConfig = {
    fieldname: command_1.flags.string({
        char: 'n',
        required: true,
        description: messages.getMessage('nameFlagDescription'),
        longDescription: messages.getMessage('nameFlagLongDescription'),
        parse: async (input) => Promise.resolve((0, validationUtil_1.validateAPIName)(input, messages.getMessage('invalidCustomFieldError', [input]))),
    }),
    fieldtype: command_1.flags.enum({
        char: 'f',
        required: true,
        description: messages.getMessage('fieldTypeDescription'),
        longDescription: messages.getMessage('nameFlagLongDescription'),
        options: [
            'Checkbox',
            'Date',
            'DateTime',
            'Email',
            'Number',
            'Percent',
            'Phone',
            'Picklist',
            'Text',
            'TextArea',
            'LongTextArea',
            'Url',
        ],
    }),
    picklistvalues: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('picklistValuesFlagDescription'),
        longDescription: messages.getMessage('picklistValuesFlagLongDescription'),
    }),
    decimalplaces: command_1.flags.number({
        char: 's',
        description: messages.getMessage('decimalplacesFlagDescription'),
        longDescription: messages.getMessage('decimalplacesFlagLongDescription'),
        default: 0,
        min: 0,
    }),
    label: command_1.flags.string({
        char: 'l',
        description: messages.getMessage('labelFlagDescription'),
        longDescription: messages.getMessage('labelFlagLongDescription'),
    }),
    outputdir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('outputDirectoryFlagDescription'),
        longDescription: messages.getMessage('outputDirectoryFlagLongDescription'),
        default: '',
    }),
};
Create.requiresProject = true;
//# sourceMappingURL=create.js.map
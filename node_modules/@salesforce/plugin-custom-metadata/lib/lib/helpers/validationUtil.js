"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLessThanForty = exports.validateMetadataRecordName = exports.isValidMetadataRecordName = exports.validateMetadataTypeName = exports.validateAPIName = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-custom-metadata', 'validation', [
    'sobjectnameFlagError',
    'invalidCMDTApiName',
    'notAValidRecordNameError',
]);
/**
 * Returns true if the name is a valid api name for an sobject/field
 *
 * @param  name API name of the object
 */
const validateAPIName = (name, message) => {
    // trimming the __c from the field during character count since it does not count towards the limit
    // Regex makes sure that the field name is alpha numeric, doesn't end in an underscore
    // and optionally if it ends in __c
    const cleanedValue = name.replace('__c', '').replace('__C', '');
    if (cleanedValue.length > 40 || !/^[a-zA-Z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*(__[cC])?$/.test(cleanedValue)) {
        throw new core_1.SfError(message !== null && message !== void 0 ? message : messages.getMessage('sobjectnameFlagError', [name]));
    }
    return name;
};
exports.validateAPIName = validateAPIName;
/**
 * Returns true if the fieldname is a valid metadata object name
 *
 * @param  fieldName API name of the field
 */
const validateMetadataTypeName = (typeName) => {
    // trimming the __mdt from the field during character count since it does not count towards the limit
    // Regex makes sure that the field name is alpha numeric, doesn't end in an underscore
    // and optionally if it ends in __mdt
    const trimmedValue = typeName.replace(/__mdt$/gi, '');
    if (trimmedValue.length > 40 || !/^[a-zA-Z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*(__[mdtT])?$/.test(trimmedValue)) {
        throw new core_1.SfError(messages.getMessage('invalidCMDTApiName', [typeName]));
    }
    return trimmedValue;
};
exports.validateMetadataTypeName = validateMetadataTypeName;
const isValidMetadataRecordName = (recordName) => {
    return recordName.length <= 40 && /^[a-zA-Z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$/.test(recordName);
};
exports.isValidMetadataRecordName = isValidMetadataRecordName;
/**
 * Returns true if the fieldname is a valid metadata record name
 *
 * @param  fieldName record name of a metadata record
 */
const validateMetadataRecordName = (typeName) => {
    // Regex makes sure that the field name is alpha numeric, doesn't end in an underscore
    if (!(0, exports.isValidMetadataRecordName)(typeName)) {
        throw new core_1.SfError(messages.getMessage('notAValidRecordNameError', [typeName]));
    }
    return typeName;
};
exports.validateMetadataRecordName = validateMetadataRecordName;
/**
 * Returns true if name is below 40 characters
 *
 * @param  name label name or plural label
 */
const validateLessThanForty = (name, message) => {
    if (name.length > 40) {
        throw new core_1.SfError(message);
    }
    return name;
};
exports.validateLessThanForty = validateLessThanForty;
//# sourceMappingURL=validationUtil.js.map
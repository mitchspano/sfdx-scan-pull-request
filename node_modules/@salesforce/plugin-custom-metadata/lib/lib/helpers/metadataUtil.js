"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanQueryResponse = exports.describeObjFields = exports.validCustomSettingType = exports.describeField = void 0;
/**
 * Returns describe object for the field API name from the Object API name you specify
 *
 * @param  objDescribe  describe object JSON
 * @param  fieldName API name of the field to query
 * @returns Promise - Promise - record in JSON format
 */
const describeField = (objDescribe, fieldName) => {
    return (0, exports.describeObjFields)(objDescribe).find((field) => field.fullName === fieldName);
};
exports.describeField = describeField;
/**
 * Returns true if the object name you specify is a list type custom setting
 *
 * @param  objName object describe JSON
 * @returns boolean
 */
const validCustomSettingType = (objDescribe) => objDescribe.customSettingsType === 'List' && objDescribe.visibility === 'Public';
exports.validCustomSettingType = validCustomSettingType;
/**
 * Returns describe object for all fields from the object  API name you specify
 *
 * @param  objDescribe object describe JSON
 * @returns Promise - Promise - record in JSON format
 */
const describeObjFields = (objDescribe) => {
    return objDescribe.fields;
};
exports.describeObjFields = describeObjFields;
const cleanQueryResponse = (sObjectRecord, objectDescribe) => {
    return Object.fromEntries(Object.entries(sObjectRecord)
        .filter(([fieldName]) => fieldName !== 'attributes' && fieldName !== 'Name')
        .flatMap(([fieldName, value]) => {
        const fieldDescribe = (0, exports.describeField)(objectDescribe, fieldName);
        // everything but location returns as is
        if (fieldDescribe.type !== 'Location') {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return [[fieldName, value]];
        }
        const fieldValue = JSON.stringify(value);
        if (fieldValue.includes('latitude') || fieldValue.includes('longitude')) {
            return [
                [`Lat_${fieldName}`, fieldValue.slice(fieldValue.indexOf(':') + 1, fieldValue.indexOf(','))],
                [`Long_${fieldName}`, fieldValue.slice(fieldValue.lastIndexOf(':') + 1, fieldValue.indexOf('}'))],
            ];
        }
        else {
            return [
                [`Lat_${fieldName}`, ''],
                [`Long_${fieldName}`, ''],
            ];
        }
    }));
};
exports.cleanQueryResponse = cleanQueryResponse;
//# sourceMappingURL=metadataUtil.js.map
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityCreateCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const CommunityNameValueParser_1 = require("../../../shared/community/commands/CommunityNameValueParser");
const ConnectExecutor_1 = require("../../../shared/connect/services/ConnectExecutor");
const CommunityCreateResource_1 = require("../../../shared/community/connect/CommunityCreateResource");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'create');
/**
 * A command to create a community.
 * This is just an sfdx wrapper around the community create connect endpoint
 */
class CommunityCreateCommand extends command_1.SfdxCommand {
    async run() {
        const createCommand = new CommunityCreateResource_1.CommunityCreateResource(this.flags, this.varargs, this.ux);
        return new ConnectExecutor_1.ConnectExecutor(createCommand, this.org).callConnectApi();
    }
    parseVarargs(args) {
        this.logger.debug(`parseVarargs([${args.join(', ')}])`);
        // It never looks like args is ever undefined as long as varargs is turned on for the command...
        // But since the signature says it's optional, we should probably gate this even though it's unnecessary right now.
        if (args === undefined) {
            return {};
        }
        const parser = new CommunityNameValueParser_1.CommunityNameValueParser(CommunityCreateCommand.validationPatterns);
        const values = parser.parse(args);
        this.logger.debug('parseVarargs result:' + JSON.stringify(values));
        return values;
    }
}
exports.CommunityCreateCommand = CommunityCreateCommand;
CommunityCreateCommand.requiresUsername = true;
CommunityCreateCommand.varargs = true;
CommunityCreateCommand.description = messages.getMessage('description');
CommunityCreateCommand.examples = messages.getMessage('examples').split(os.EOL);
CommunityCreateCommand.flagsConfig = {
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('flags.name.description'),
        longDescription: messages.getMessage('flags.name.longDescription'),
        required: true,
    }),
    templatename: command_1.flags.string({
        char: 't',
        description: messages.getMessage('flags.templateName.description'),
        longDescription: messages.getMessage('flags.templateName.longDescription'),
        required: true,
    }),
    urlpathprefix: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('flags.urlPathPrefix.description'),
        longDescription: messages.getMessage('flags.urlPathPrefix.longDescription'),
        required: true,
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('flags.description.description'),
        longDescription: messages.getMessage('flags.description.longDescription'),
    }),
};
CommunityCreateCommand.validationPatterns = [
    // Exact matches
    'name',
    'urlPathPrefix',
    'templateName',
    'description',
    // templateParams.*, but must be only word characters (e.g. no spaces, special chars)
    'templateParams(\\.\\w+)+',
];
//# sourceMappingURL=create.js.map
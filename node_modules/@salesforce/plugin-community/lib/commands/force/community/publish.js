"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityPublishCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const CommunityPublishResource_1 = require("../../../shared/community/connect/CommunityPublishResource");
const ConnectExecutor_1 = require("../../../shared/connect/services/ConnectExecutor");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'publish');
/**
 * A command to publish a community. This is just an sfdx wrapper around
 * the community publish connect endpoint
 */
class CommunityPublishCommand extends command_1.SfdxCommand {
    async run() {
        const publishCommand = new CommunityPublishResource_1.CommunityPublishResource(this.flags, this.org, this.ux);
        return new ConnectExecutor_1.ConnectExecutor(publishCommand, this.org).callConnectApi();
    }
}
exports.CommunityPublishCommand = CommunityPublishCommand;
CommunityPublishCommand.requiresUsername = true;
CommunityPublishCommand.description = messages.getMessage('description');
CommunityPublishCommand.examples = messages.getMessage('examples').split(os.EOL);
CommunityPublishCommand.flagsConfig = {
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('flags.name.description'),
        longDescription: messages.getMessage('flags.name.longDescription'),
        required: true,
    }),
};
//# sourceMappingURL=publish.js.map
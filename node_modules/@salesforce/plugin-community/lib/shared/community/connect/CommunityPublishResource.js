"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunityPublishResource = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const url_1 = require("url");
const core_1 = require("@salesforce/core");
const CommunitiesServices_1 = require("../service/CommunitiesServices");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-community', 'publish');
/**
 * A connect api resource for publishing a community
 */
class CommunityPublishResource {
    constructor(flags, org, ux) {
        this.flags = flags;
        this.org = org;
        this.ux = ux;
    }
    async fetchRelativeConnectUrl() {
        return `/connect/communities/${await this.fetchCommunityId()}/publish`;
    }
    getRequestMethod() {
        return 'POST';
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async fetchPostParams() {
        return JSON.stringify({});
    }
    handleSuccess(result) {
        const response = {
            id: result.id,
            message: messages.getMessage('response.message'),
            name: result.name,
            status: this.info.status,
            url: new url_1.URL(result.url).toString(),
        };
        const columns = {
            id: { header: 'Id' },
            message: { header: 'Message' },
            name: { header: 'Name' },
            status: { header: 'Status' },
            url: { header: 'Url' },
        };
        this.ux.styledHeader(messages.getMessage('response.styleHeader'));
        this.ux.table([response], columns);
        return response;
    }
    handleError(error) {
        throw error;
    }
    async fetchCommunityId() {
        this.info = await CommunitiesServices_1.CommunitiesServices.fetchCommunityInfoFromName(this.org, this.flags.name);
        if (!this.info) {
            throw messages.createError('error.communityNotExists', [this.flags.name]);
        }
        return this.info.id;
    }
}
exports.CommunityPublishResource = CommunityPublishResource;
//# sourceMappingURL=CommunityPublishResource.js.map
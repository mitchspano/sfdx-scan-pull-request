import * as Config from '@oclif/config';
import { Optional } from '@salesforce/ts-types';
import { AuthFields } from '@salesforce/core';
declare type HookOpts<T> = {
    Command: Config.Command.Class;
    argv: string[];
    commandId: string;
    result: Optional<T>;
};
export declare type OrgCreateResult = Pick<AuthFields, 'accessToken' | 'clientId' | 'created' | 'createdOrgInstance' | 'devHubUsername' | 'expirationDate' | 'instanceUrl' | 'loginUrl' | 'orgId' | 'username'>;
declare type PostOrgCreateOpts = HookOpts<OrgCreateResult>;
/**
 * Extends OCLIF's Hooks interface to add types for hooks that run on sfdx org commands
 */
export interface OrgHooks extends Config.Hooks {
    postorgcreate: PostOrgCreateOpts;
}
export declare type OrgHook<T> = (this: Config.Hook.Context, options: T extends keyof Config.Hooks ? OrgHooks[T] : T) => any;
export declare namespace OrgHook {
    type PostOrgCreate = Config.Hook<OrgHooks['postorgcreate']>;
}
export {};

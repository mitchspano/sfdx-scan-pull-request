"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SandboxReporter = void 0;
const kit_1 = require("@salesforce/kit");
class SandboxReporter {
    static sandboxProgress(update) {
        const { remainingWait, interval, sandboxProcessObj, waitingOnAuth } = update;
        const waitTime = SandboxReporter.getSecondsToHuman(remainingWait);
        const waitTimeMsg = `Sleeping ${interval} seconds. Will wait ${waitTime} more before timing out.`;
        const sandboxIdentifierMsg = `${sandboxProcessObj.SandboxName}(${sandboxProcessObj.Id})`;
        const waitingOnAuthMessage = waitingOnAuth ? ', waiting on JWT auth' : '';
        const completionMessage = `(${sandboxProcessObj.CopyProgress}% completed${waitingOnAuthMessage})`;
        return `Sandbox request ${sandboxIdentifierMsg} is ${sandboxProcessObj.Status} ${completionMessage}. ${waitTimeMsg}`;
    }
    static logSandboxProcessResult(result
    // sandboxProcessObj.CopyProgress is a number
    ) {
        const { sandboxProcessObj, sandboxRes } = result;
        const sandboxReadyForUse = `Sandbox ${sandboxProcessObj.SandboxName}(${sandboxProcessObj.Id}) is ready for use.`;
        const data = [
            { key: 'Id', value: sandboxProcessObj.Id },
            { key: 'SandboxName', value: sandboxProcessObj.SandboxName },
            { key: 'Status', value: sandboxProcessObj.Status },
            { key: 'CopyProgress', value: sandboxProcessObj.CopyProgress },
            { key: 'Description', value: sandboxProcessObj.Description },
            { key: 'LicenseType', value: sandboxProcessObj.LicenseType },
            { key: 'SandboxInfoId', value: sandboxProcessObj.SandboxInfoId },
            { key: 'SourceId', value: sandboxProcessObj.SourceId },
            { key: 'SandboxOrg', value: sandboxProcessObj.SandboxOrganization },
            { key: 'Created Date', value: sandboxProcessObj.CreatedDate },
            { key: 'ApexClassId', value: sandboxProcessObj.ApexClassId },
            { key: 'Authorized Sandbox Username', value: sandboxRes.authUserName },
        ];
        return { sandboxReadyForUse, data };
    }
    static getSecondsToHuman(waitTimeInSec) {
        const hours = kit_1.Duration.hours(Math.floor(waitTimeInSec / 3600));
        const minutes = kit_1.Duration.minutes(Math.floor((waitTimeInSec % 3600) / 60));
        const seconds = kit_1.Duration.seconds(Math.floor(waitTimeInSec % 60));
        const hDisplay = hours.hours > 0 ? hours.toString() + ' ' : '';
        const mDisplay = minutes.minutes > 0 ? minutes.toString() + ' ' : '';
        const sDisplay = seconds.seconds > 0 ? seconds.toString() : '';
        return (hDisplay + mDisplay + sDisplay).trim();
    }
}
exports.SandboxReporter = SandboxReporter;
//# sourceMappingURL=sandboxReporter.js.map
"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create = void 0;
const os = require("os");
const fs = require("fs");
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
const sandboxReporter_1 = require("../../../../shared/sandboxReporter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'create');
class Create extends command_1.SfdxCommand {
    constructor() {
        super(...arguments);
        this.lifecycleEventNames = ['postorgcreate'];
    }
    async run() {
        this.logger.debug('Create started with args %s ', this.flags);
        if (this.flags.type === core_1.OrgTypes.Sandbox) {
            this.validateSandboxFlags();
            return this.createSandbox();
        }
        else {
            // default to scratch org
            return this.createScratchOrg();
        }
    }
    validateSandboxFlags() {
        if (!this.flags.targetusername) {
            throw new core_1.SfError(messages.getMessage('requiresUsername'));
        }
        if (this.flags.retry !== 0) {
            throw new core_1.SfError(messages.getMessage('retryIsNotValidForSandboxes'), 'retryIsNotValidForSandboxes');
        }
        if (this.flags.clientid) {
            this.ux.warn(messages.getMessage('clientIdNotSupported', [this.flags.clientid]));
        }
        if (this.flags.nonamespace) {
            this.ux.warn(messages.getMessage('noNamespaceNotSupported', [this.flags.nonamespace]));
        }
        if (this.flags.noancestors) {
            this.ux.warn(messages.getMessage('noAncestorsNotSupported', [this.flags.noancestors]));
        }
        if (this.flags.durationdays) {
            this.ux.warn(messages.getMessage('durationDaysNotSupported', [this.flags.durationdays]));
        }
    }
    lowerToUpper(object) {
        // the API has keys defined in capital camel case, while the definition schema has them as lower camel case
        // we need to convert lower camel case to upper before merging options so they will override properly
        Object.keys(object).map((key) => {
            const upperCase = key.charAt(0).toUpperCase();
            if (key.charAt(0) !== upperCase) {
                const capitalKey = upperCase + key.slice(1);
                object[capitalKey] = object[key];
                delete object[key];
            }
        });
        return object;
    }
    createSandboxRequest() {
        this.logger.debug('Create Varargs: %s ', this.varargs);
        let sandboxDefFileContents = this.readJsonDefFile();
        let capitalizedVarArgs = {};
        if (sandboxDefFileContents) {
            sandboxDefFileContents = this.lowerToUpper(sandboxDefFileContents);
        }
        if (this.varargs) {
            capitalizedVarArgs = this.lowerToUpper(this.varargs);
        }
        // varargs override file input
        const sandboxReq = { SandboxName: undefined, ...sandboxDefFileContents, ...capitalizedVarArgs };
        if (!sandboxReq.SandboxName) {
            // sandbox names are 10 chars or less, a radix of 36 = [a-z][0-9]
            // technically without querying the production org, the generated name could already exist, but the chances of that are lower than the perf penalty of querying and verifying
            sandboxReq.SandboxName = `sbx${Date.now().toString(36).slice(-7)}`;
            this.ux.warn(`No SandboxName defined, generating new SandboxName: ${sandboxReq.SandboxName}`);
        }
        if (!sandboxReq.LicenseType) {
            throw new core_1.SfError(messages.getMessage('missingLicenseType'));
        }
        return sandboxReq;
    }
    async createSandbox() {
        const prodOrg = await core_1.Org.create({ aliasOrUsername: this.flags.targetusername });
        const lifecycle = core_1.Lifecycle.getInstance();
        // register the sandbox event listeners before calling `prodOrg.createSandbox()`
        // `on` doesn't support synchronous methods
        // eslint-disable-next-line @typescript-eslint/require-await
        lifecycle.on(core_1.SandboxEvents.EVENT_ASYNC_RESULT, async (results) => {
            this.ux.log(messages.getMessage('sandboxSuccess', [results.Id, results.SandboxName, this.flags.targetusername]));
        });
        // eslint-disable-next-line @typescript-eslint/require-await
        lifecycle.on(core_1.SandboxEvents.EVENT_STATUS, async (results) => {
            this.ux.log(sandboxReporter_1.SandboxReporter.sandboxProgress(results));
        });
        // eslint-disable-next-line @typescript-eslint/require-await
        lifecycle.on(core_1.SandboxEvents.EVENT_AUTH, async (results) => {
            this.sandboxAuth = results;
        });
        lifecycle.on(core_1.SandboxEvents.EVENT_RESULT, async (results) => {
            var _a;
            const { sandboxReadyForUse, data } = sandboxReporter_1.SandboxReporter.logSandboxProcessResult(results);
            this.ux.log(sandboxReadyForUse);
            this.ux.styledHeader('Sandbox Org Creation Status');
            this.ux.table(data, {
                key: { header: 'Name' },
                value: { header: 'Value' },
            });
            if ((_a = results.sandboxRes) === null || _a === void 0 ? void 0 : _a.authUserName) {
                if (this.flags.setalias) {
                    const stateAggregator = await core_1.StateAggregator.getInstance();
                    stateAggregator.aliases.set(this.flags.setalias, results.sandboxRes.authUserName);
                    const result = await stateAggregator.aliases.write();
                    this.logger.debug('Set Alias: %s result: %s', this.flags.setalias, result);
                }
                if (this.flags.setdefaultusername) {
                    const globalConfig = this.configAggregator.getGlobalConfig();
                    globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, results.sandboxRes.authUserName);
                    const result = await globalConfig.write();
                    this.logger.debug('Set defaultUsername: %s result: %s', this.flags.setdefaultusername, result);
                }
            }
        });
        const sandboxReq = this.createSandboxRequest();
        this.logger.debug('Calling create with SandboxRequest: %s ', sandboxReq);
        const wait = this.flags.wait;
        try {
            return prodOrg.createSandbox(sandboxReq, { wait });
        }
        catch (e) {
            // guaranteed to be SfdxError from core;
            const err = e;
            if (err === null || err === void 0 ? void 0 : err.message.includes('The org cannot be found')) {
                // there was most likely an issue with DNS when auth'ing to the new sandbox, but it was created.
                if (this.flags.setalias && this.sandboxAuth) {
                    const stateAggregator = await core_1.StateAggregator.getInstance();
                    stateAggregator.aliases.set(this.flags.setalias, this.sandboxAuth.authUserName);
                    const result = await stateAggregator.aliases.write();
                    this.logger.debug('Set Alias: %s result: %s', this.flags.setalias, result);
                }
                if (this.flags.setdefaultusername && this.sandboxAuth) {
                    const globalConfig = this.configAggregator.getGlobalConfig();
                    globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, this.sandboxAuth.authUserName);
                    const result = await globalConfig.write();
                    this.logger.debug('Set defaultUsername: %s result: %s', this.flags.setdefaultusername, result);
                }
                err.actions = [messages.getMessage('dnsTimeout'), messages.getMessage('partialSuccess')];
                err.exitCode = 68;
                throw err;
            }
        }
    }
    readJsonDefFile() {
        // the -f option
        if (this.flags.definitionfile) {
            this.logger.debug('Reading JSON DefFile %s ', this.flags.definitionfile);
            return JSON.parse(fs.readFileSync(this.flags.definitionfile, 'utf-8'));
        }
    }
    async createScratchOrg() {
        this.logger.debug('OK, will do scratch org creation');
        if (!this.hubOrg) {
            throw new core_1.SfError(messages.getMessage('RequiresDevhubUsernameError'));
        }
        // Ensure we have an org config input source.
        if (!this.flags.definitionfile && Object.keys(this.varargs).length === 0) {
            throw new core_1.SfError(messages.getMessage('noConfig'));
        }
        this.logger.debug('validation complete');
        // If the user supplied a specific client ID, we have no way of knowing if it's
        // a certificate-based Connected App or not. Therefore, we have to assume that
        // we'll need the client secret, so prompt the user for it.
        const secret = this.flags.clientid
            ? await this.ux.prompt(messages.getMessage('secretPrompt'), {
                type: 'mask',
            })
            : undefined;
        const createCommandOptions = {
            connectedAppConsumerKey: this.flags.clientid,
            durationDays: this.flags.durationdays,
            nonamespace: this.flags.nonamespace,
            noancestors: this.flags.noancestors,
            wait: this.flags.wait,
            retry: this.flags.retry,
            apiversion: this.flags.apiversion,
            definitionfile: this.flags.definitionfile,
            orgConfig: this.varargs,
            clientSecret: secret,
            setDefault: this.flags.setdefaultusername === true,
            alias: this.flags.setalias,
            tracksSource: true,
        };
        const { username, scratchOrgInfo, authFields, warnings } = await this.hubOrg.scratchOrgCreate(createCommandOptions);
        await core_1.Lifecycle.getInstance().emit('scratchOrgInfo', scratchOrgInfo);
        // emit postorgcreate event for hook
        const postOrgCreateHookInfo = [authFields].map((element) => ({
            accessToken: element.accessToken,
            clientId: element.clientId,
            created: element.created,
            createdOrgInstance: element.createdOrgInstance,
            devHubUsername: element.devHubUsername,
            expirationDate: element.expirationDate,
            instanceUrl: element.instanceUrl,
            loginUrl: element.loginUrl,
            orgId: element.orgId,
            username: element.username,
        }))[0];
        await core_1.Lifecycle.getInstance().emit('postorgcreate', postOrgCreateHookInfo);
        this.logger.debug(`orgConfig.loginUrl: ${authFields.loginUrl}`);
        this.logger.debug(`orgConfig.instanceUrl: ${authFields.instanceUrl}`);
        this.ux.log(messages.getMessage('scratchOrgCreateSuccess', [authFields.orgId, username]));
        if (warnings.length > 0) {
            warnings.forEach((warning) => {
                this.ux.warn(warning);
            });
        }
        return {
            username,
            scratchOrgInfo,
            authFields,
            warnings,
            orgId: authFields.orgId,
        };
    }
}
exports.Create = Create;
Create.description = messages.getMessage('description');
Create.examples = messages.getMessage('examples').split(os.EOL);
Create.supportsDevhubUsername = true;
Create.supportsUsername = true;
Create.varargs = true;
Create.flagsConfig = {
    type: command_1.flags.enum({
        char: 't',
        description: messages.getMessage('flags.type'),
        options: [core_1.OrgTypes.Scratch, core_1.OrgTypes.Sandbox],
        default: core_1.OrgTypes.Scratch,
    }),
    definitionfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('flags.definitionFile'),
    }),
    nonamespace: command_1.flags.boolean({
        char: 'n',
        description: messages.getMessage('flags.noNamespace'),
    }),
    noancestors: command_1.flags.boolean({
        char: 'c',
        description: messages.getMessage('flags.noAncestors'),
    }),
    clientid: command_1.flags.string({
        char: 'i',
        description: messages.getMessage('flags.clientId'),
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('flags.setDefaultUsername'),
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('flags.setAlias'),
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('flags.wait'),
        min: 6,
        default: kit_1.Duration.minutes(6),
    }),
    durationdays: command_1.flags.integer({
        char: 'd',
        description: messages.getMessage('flags.durationDays'),
        min: 1,
        max: 30,
        default: 7,
    }),
    retry: command_1.flags.number({
        hidden: true,
        default: 0,
        max: 10,
        description: messages.getMessage('flags.retry'),
    }),
};
//# sourceMappingURL=create.js.map
"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgCloneCommand = void 0;
const os_1 = require("os");
const fs = require("fs");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const sandboxReporter_1 = require("../../../shared/sandboxReporter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'clone');
class OrgCloneCommand extends command_1.SfdxCommand {
    async run() {
        const lifecycle = core_1.Lifecycle.getInstance();
        if (this.flags.type === core_1.OrgTypes.Sandbox) {
            // eslint-disable-next-line @typescript-eslint/require-await
            lifecycle.on(core_1.SandboxEvents.EVENT_ASYNC_RESULT, async (results) => {
                // Keep all console output in the command
                this.ux.log(messages.getMessage('commandSuccess', [results.Id, results.SandboxName]));
            });
            // eslint-disable-next-line @typescript-eslint/require-await
            lifecycle.on(core_1.SandboxEvents.EVENT_STATUS, async (results) => {
                this.ux.log(sandboxReporter_1.SandboxReporter.sandboxProgress(results));
            });
            lifecycle.on(core_1.SandboxEvents.EVENT_RESULT, async (results) => {
                var _a;
                const { sandboxReadyForUse, data } = sandboxReporter_1.SandboxReporter.logSandboxProcessResult(results);
                this.ux.log(sandboxReadyForUse);
                this.ux.styledHeader('Sandbox Org Cloning Status');
                this.ux.table(data, {
                    key: { header: 'Name' },
                    value: { header: 'Value' },
                });
                if ((_a = results === null || results === void 0 ? void 0 : results.sandboxRes) === null || _a === void 0 ? void 0 : _a.authUserName) {
                    if (this.flags.setalias) {
                        const stateAggregator = await core_1.StateAggregator.getInstance();
                        stateAggregator.aliases.set(this.flags.setalias, results.sandboxRes.authUserName);
                        const result = stateAggregator.aliases.getAll();
                        this.logger.debug('Set Alias: %s result: %s', this.flags.setalias, result);
                    }
                    if (this.flags.setdefaultusername) {
                        const globalConfig = this.configAggregator.getGlobalConfig();
                        globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, results.sandboxRes.authUserName);
                        const result = await globalConfig.write();
                        this.logger.debug('Set defaultUsername: %s result: %s', this.flags.setdefaultusername, result);
                    }
                }
            });
            const { sandboxReq, srcSandboxName } = this.createSandboxRequest();
            this.logger.debug('Calling clone with SandboxRequest: %s and SandboxName: %s ', sandboxReq, srcSandboxName);
            const wait = this.flags.wait;
            return this.org.cloneSandbox(sandboxReq, srcSandboxName, { wait });
        }
        else {
            throw new core_1.SfError(messages.getMessage('commandOrganizationTypeNotSupport', [core_1.OrgTypes.Sandbox]), messages.getMessage('commandOrganizationTypeNotSupportAction', [core_1.OrgTypes.Sandbox]));
        }
    }
    createSandboxRequest() {
        this.logger.debug('Clone started with args %s ', this.flags);
        this.logger.debug('Clone Varargs: %s ', this.varargs);
        let sandboxDefFileContents = this.readJsonDefFile();
        let capitalizedVarArgs = {};
        if (sandboxDefFileContents) {
            sandboxDefFileContents = this.lowerToUpper(sandboxDefFileContents);
        }
        if (this.varargs) {
            capitalizedVarArgs = this.lowerToUpper(this.varargs);
        }
        // varargs override file input
        const sandboxReq = { SandboxName: undefined, ...sandboxDefFileContents, ...capitalizedVarArgs };
        this.logger.debug('SandboxRequest after merging DefFile and Varargs: %s ', sandboxReq);
        // try to find the source sandbox name either from the definition file or the commandline arg
        // NOTE the name and the case "SourceSandboxName" must match exactly
        const srcSandboxName = sandboxReq[OrgCloneCommand.SANDBOXDEF_SRC_SANDBOXNAME];
        if (srcSandboxName) {
            // we have to delete this property from the sandboxRequest object,
            // because sandboxRequest object represent the POST request to create SandboxInfo bpo,
            // sandboxInfo does not have a column named  SourceSandboxName, this field will be converted to sourceId in the clone call below
            delete sandboxReq[OrgCloneCommand.SANDBOXDEF_SRC_SANDBOXNAME];
        }
        else {
            // error - we need SourceSandboxName to know which sandbox to clone from
            throw new core_1.SfError(messages.getMessage('missingSourceSandboxName', [OrgCloneCommand.SANDBOXDEF_SRC_SANDBOXNAME]), messages.getMessage('missingSourceSandboxNameAction', [OrgCloneCommand.SANDBOXDEF_SRC_SANDBOXNAME]));
        }
        return { sandboxReq, srcSandboxName };
    }
    lowerToUpper(object) {
        // the API has keys defined in capital camel case, while the definition schema has them as lower camel case
        // we need to convert lower camel case to upper before merging options so they will override properly
        return Object.fromEntries(Object.entries(object).map(([key, value]) => [(0, kit_1.upperFirst)(key), value]));
    }
    readJsonDefFile() {
        // the -f option
        if (this.flags.definitionfile) {
            this.logger.debug('Reading JSON DefFile %s ', this.flags.definitionfile);
            return JSON.parse(fs.readFileSync(this.flags.definitionfile, 'utf-8'));
        }
    }
}
exports.OrgCloneCommand = OrgCloneCommand;
OrgCloneCommand.examples = messages.getMessage('examples').split(os_1.EOL);
OrgCloneCommand.description = messages.getMessage('description');
OrgCloneCommand.requiresProject = false;
OrgCloneCommand.requiresUsername = true;
OrgCloneCommand.varargs = true;
OrgCloneCommand.SANDBOXDEF_SRC_SANDBOXNAME = 'SourceSandboxName';
OrgCloneCommand.flagsConfig = {
    type: command_1.flags.enum({
        char: 't',
        description: messages.getMessage('flags.type'),
        required: true,
        options: ['sandbox'],
    }),
    definitionfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('flags.definitionfile'),
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('flags.setdefaultusername'),
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('flags.setalias'),
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('flags.wait'),
        longDescription: messages.getMessage('flagsLong.wait'),
        min: kit_1.Duration.minutes(2),
        default: kit_1.Duration.minutes(6),
    }),
};
//# sourceMappingURL=clone.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Delete = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'delete');
class Delete extends command_1.SfdxCommand {
    async run() {
        const username = this.org.getUsername();
        const orgId = this.org.getOrgId();
        const isSandbox = await this.org.isSandbox();
        // read the config file for the org to be deleted, if it has a PROD_ORG_USERNAME entry, it's a sandbox
        // we either need permission to proceed without a prompt OR get the user to confirm
        if (this.flags.noprompt ||
            (await this.ux.confirm(messages.getMessage('confirmDelete', [isSandbox ? 'sandbox' : 'scratch', username])))) {
            let alreadyDeleted = false;
            let successMessageKey = 'commandSandboxSuccess';
            try {
                // will determine if it's a scratch org or sandbox and will delete from the appropriate parent org (DevHub or Production)
                await this.org.delete();
            }
            catch (e) {
                if (e instanceof Error && e.name === 'ScratchOrgNotFound') {
                    alreadyDeleted = true;
                }
                else if (e instanceof Error && e.name === 'SandboxNotFound') {
                    successMessageKey = 'sandboxConfigOnlySuccess';
                }
                else {
                    throw e;
                }
            }
            this.ux.log(isSandbox
                ? messages.getMessage(successMessageKey, [username])
                : messages.getMessage(alreadyDeleted ? 'deleteOrgConfigOnlyCommandSuccess' : 'deleteOrgCommandSuccess', [
                    username,
                ]));
        }
        return { username, orgId };
    }
}
exports.Delete = Delete;
Delete.requiresUsername = true;
Delete.supportsDevhubUsername = true;
Delete.description = messages.getMessage('description');
Delete.examples = messages.getMessage('examples').split(os.EOL);
Delete.flagsConfig = {
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('flags.noprompt'),
    }),
};
//# sourceMappingURL=delete.js.map
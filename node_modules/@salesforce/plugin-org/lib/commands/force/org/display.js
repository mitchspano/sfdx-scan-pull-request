"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgDisplayCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const utils_1 = require("../../../shared/utils");
const orgHighlighter_1 = require("../../../shared/orgHighlighter");
const orgListUtil_1 = require("../../../shared/orgListUtil");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'display');
const sharedMessages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'messages');
class OrgDisplayCommand extends command_1.SfdxCommand {
    async run() {
        try {
            // the auth file might have a stale access token.  We want to refresh it before getting the fields
            await this.org.refreshAuth();
        }
        catch (error) {
            // even if this fails, we want to display the information we can read from the auth file
            this.ux.warn('unable to refresh auth for org');
        }
        // translate to alias if necessary
        const authInfo = await core_1.AuthInfo.create({ username: this.org.getUsername() });
        const fields = authInfo.getFields(true);
        const isScratchOrg = fields.devHubUsername;
        const scratchOrgInfo = isScratchOrg ? await this.getScratchOrgInformation(fields.orgId) : {};
        const returnValue = {
            // renamed properties
            id: fields.orgId,
            devHubId: fields.devHubUsername,
            // copied properties
            accessToken: fields.accessToken,
            instanceUrl: fields.instanceUrl,
            username: fields.username,
            clientId: fields.clientId,
            password: fields.password,
            ...scratchOrgInfo,
            // properties with more complex logic
            connectedStatus: isScratchOrg
                ? undefined
                : await orgListUtil_1.OrgListUtil.determineConnectedStatusForNonScratchOrg(fields.username),
            sfdxAuthUrl: this.flags.verbose && fields.refreshToken ? authInfo.getSfdxAuthUrl() : undefined,
            alias: await (0, utils_1.getAliasByUsername)(fields.username),
        };
        this.ux.warn(sharedMessages.getMessage('SecurityWarning'));
        if (!this.flags.json) {
            this.print(returnValue);
        }
        return returnValue;
    }
    print(result) {
        this.ux.log('');
        const tableRows = Object.keys(result)
            .filter((key) => result[key] !== undefined && result[key] !== null) // some values won't exist
            .sort() // this command always alphabetizes the table rows
            .map((key) => ({
            key: (0, kit_1.camelCaseToTitleCase)(key),
            value: (0, orgHighlighter_1.getStyledValue)(key, result[key]),
        }));
        this.ux.styledHeader('Org Description');
        this.ux.table(tableRows, {
            key: { header: 'KEY' },
            value: { header: 'VALUE' },
        });
    }
    async getScratchOrgInformation(orgId) {
        var _a, _b, _c;
        const hubOrg = await this.org.getDevHubOrg();
        const result = (await orgListUtil_1.OrgListUtil.retrieveScratchOrgInfoFromDevHub(hubOrg.getUsername(), [core_1.sfdc.trimTo15(orgId)]))[0];
        if (result) {
            return {
                status: result.Status,
                expirationDate: result.ExpirationDate,
                createdBy: (_a = result.CreatedBy) === null || _a === void 0 ? void 0 : _a.Username,
                edition: (_b = result.Edition) !== null && _b !== void 0 ? _b : undefined,
                namespace: (_c = result.Namespace) !== null && _c !== void 0 ? _c : undefined,
                orgName: result.OrgName,
                createdDate: result.CreatedDate,
            };
        }
        throw new core_1.SfError(messages.getMessage('noScratchOrgInfoError', [core_1.sfdc.trimTo15(orgId), hubOrg.getUsername()]), 'NoScratchInfo', [messages.getMessage('noScratchOrgInfoAction')]);
    }
}
exports.OrgDisplayCommand = OrgDisplayCommand;
OrgDisplayCommand.description = messages.getMessage('description');
OrgDisplayCommand.examples = messages.getMessage('examples').split(os.EOL);
OrgDisplayCommand.requiresUsername = true;
OrgDisplayCommand.flagsConfig = {
    verbose: command_1.flags.builtin(),
};
//# sourceMappingURL=display.js.map
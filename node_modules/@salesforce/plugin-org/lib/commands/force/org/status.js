"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgStatusCommand = void 0;
const os_1 = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const sandboxReporter_1 = require("../../../shared/sandboxReporter");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'status');
class OrgStatusCommand extends command_1.SfdxCommand {
    async run() {
        this.logger.debug('Status started with args %s ', this.flags);
        const lifecycle = core_1.Lifecycle.getInstance();
        // eslint-disable-next-line @typescript-eslint/require-await
        lifecycle.on(core_1.SandboxEvents.EVENT_STATUS, async (results) => {
            this.ux.log(sandboxReporter_1.SandboxReporter.sandboxProgress(results));
        });
        lifecycle.on(core_1.SandboxEvents.EVENT_RESULT, async (results) => {
            var _a;
            const resultMsg = `Sandbox ${results.sandboxProcessObj.SandboxName}(${results.sandboxProcessObj.Id}) is ready for use.`;
            this.ux.log(resultMsg);
            const { data } = sandboxReporter_1.SandboxReporter.logSandboxProcessResult(results);
            this.ux.styledHeader('Sandbox Org Status');
            this.ux.table(data, {
                key: { header: 'Name' },
                value: { header: 'Value' },
            });
            if ((_a = results.sandboxRes) === null || _a === void 0 ? void 0 : _a.authUserName) {
                if (this.flags.setalias) {
                    const stateAggregator = await core_1.StateAggregator.getInstance();
                    stateAggregator.aliases.set(this.flags.setalias, results.sandboxRes.authUserName);
                    await stateAggregator.aliases.write();
                    this.logger.debug('Set Alias: %s result: %s', this.flags.setalias, results.sandboxRes.authUserName);
                }
                if (this.flags.setdefaultusername) {
                    const globalConfig = this.configAggregator.getGlobalConfig();
                    globalConfig.set(core_1.OrgConfigProperties.TARGET_ORG, results.sandboxRes.authUserName);
                    const result = await globalConfig.write();
                    this.logger.debug('Set defaultUsername: %s result: %s', this.flags.setdefaultusername, result);
                }
            }
        });
        this.logger.debug('Calling auth for SandboxName args: %s ', this.flags.sandboxname);
        const results = await this.org.sandboxStatus(this.flags.sandboxname, { wait: this.flags.wait });
        this.logger.debug('Results for auth call: %s ', results);
        if (!results) {
            this.ux.styledHeader('Sandbox Org Creation Status');
            this.ux.log('No SandboxProcess Result Found');
        }
        return results;
    }
}
exports.OrgStatusCommand = OrgStatusCommand;
OrgStatusCommand.examples = messages.getMessage('examples').split(os_1.EOL);
OrgStatusCommand.description = messages.getMessage('description');
OrgStatusCommand.requiresProject = false;
OrgStatusCommand.requiresUsername = true;
OrgStatusCommand.flagsConfig = {
    sandboxname: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('flags.sandboxname'),
        required: true,
    }),
    setdefaultusername: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('flags.setdefaultusername'),
    }),
    setalias: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('flags.setalias'),
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('flags.wait'),
        min: kit_1.Duration.minutes(2),
        default: kit_1.Duration.minutes(6),
    }),
};
//# sourceMappingURL=status.js.map
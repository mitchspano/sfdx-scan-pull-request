{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/chatter.js"],"names":["f","g","exports","module","define","amd","window","global","self","this","jsforce","modules","api","Chatter","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","inherits","_","Promise","conn","_conn","prototype","_request","params","callback","test","method","isObject","body","headers","Content-Type","JSON","stringify","url","_normalizeUrl","request","indexOf","version","Request","thenCall","resource","queryParams","Resource","batch","requests","batchRequests","batchDeferreds","forEach","deferred","defer","_promise","promise","push","batchParams","then","res","results","result","statusCode","reject","resolve","chatter","_chatter","_params","richInput","stream","onResolve","onReject","isFunction","qstring","map","keys","name","encodeURIComponent","join","super_","_url","create","data","retrieve","update","del","on"],"mappings":"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","file":"jsforce-api-chatter.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * @file Manages Salesforce Chatter REST API calls\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\n */\n\n'use strict';\n\nvar inherits = window.jsforce.require('inherits'),\n    _       = window.jsforce.require('lodash/core'),\n    jsforce = window.jsforce.require('./core'),\n    Promise = window.jsforce.require('./promise');\n\n/**\n * API class for Chatter REST API call\n *\n * @class\n * @param {Connection} conn Connection\n */\nvar Chatter = module.exports = function(conn) {\n  this._conn = conn;\n};\n\n/**\n * Sending request to API endpoint\n * @private\n */\nChatter.prototype._request = function(params, callback) {\n  if (/^(put|post|patch)$/i.test(params.method)) {\n    if (_.isObject(params.body)) {\n      params.headers = {\n        \"Content-Type\": \"application/json\"\n      };\n      params.body = JSON.stringify(params.body);\n    }\n  }\n  params.url = this._normalizeUrl(params.url);\n  return this._conn.request(params, callback);\n};\n\n/**\n * Convert path to site root relative url\n * @private\n */\nChatter.prototype._normalizeUrl = function(url) {\n  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {\n    return '/services/data/v' + this._conn.version + url;\n  } else if (/^\\/v[\\d]+\\.[\\d]+\\//.test(url)) {\n    return '/services/data' + url;\n  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {\n    return '/services/data/v' + this._conn.version + '/chatter' + url;\n  } else {\n    return url;\n  }\n};\n\n/**\n * @typedef {Object} Chatter~RequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * @typedef {Object} Chatter~RequestResult\n */\n\n/**\n * Make a request for chatter API resource\n *\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func\n * @returns {Chatter~Request}\n */\nChatter.prototype.request = function(params, callback) {\n  return new Request(this, params).thenCall(callback);\n};\n\n/**\n * Make a resource request to chatter API\n *\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n * @returns {Chatter~Resource}\n */\nChatter.prototype.resource = function(url, queryParams) {\n  return new Resource(this, url, queryParams);\n};\n\n/**\n * @typedef {Object} Chatter~BatchRequestResult\n * @prop {Boolean} hasError - Flag if the batch has one or more errors\n * @prop {Array.<Object>} results - Batch request results in array\n * @prop {Number} results.statusCode - HTTP response status code\n * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body\n */\n\n/**\n * Make a batch request to chatter API\n *\n * @params {Array.<Chatter~Request>} requests - Chatter API requests\n * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func\n * @returns {Promise.<Chatter~BatchRequestResult>}\n */\nChatter.prototype.batch = function(requests, callback) {\n  var self = this;\n  var batchRequests = [], batchDeferreds = [];\n  _.forEach(requests, function(request) {\n    var deferred = Promise.defer();\n    request._promise = deferred.promise;\n    batchRequests.push(request.batchParams());\n    batchDeferreds.push(deferred);\n  });\n  var params = {\n    method: 'POST',\n    url: this._normalizeUrl('/connect/batch'),\n    body: {\n      batchRequests: batchRequests\n    }\n  };\n  return this.request(params).then(function(res) {\n    _.forEach(res.results, function(result, i) {\n      var deferred = batchDeferreds[i];\n      if (result.statusCode >= 400) {\n        deferred.reject(result.result);\n      } else {\n        deferred.resolve(result.result);\n      }\n    });\n    return res;\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/**\n * A class representing chatter API request\n *\n * @protected\n * @class Chatter~Request\n * @implements {Promise.<Chatter~RequestResult>}\n * @param {Chatter} chatter - Chatter API object\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\n */\nvar Request = function(chatter, params) {\n  this._chatter = chatter;\n  this._params = params;\n  this._promise = null;\n};\n\n/**\n * @typedef {Object} Chatter~BatchRequestParams\n * @prop {String} method - HTTP method\n * @prop {String} url - Resource URL\n * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)\n */\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#batchParams\n * @returns {Chatter~BatchRequestParams}\n */\nRequest.prototype.batchParams = function() {\n  var params = this._params;\n  var batchParams = {\n    method: params.method,\n    url: this._chatter._normalizeUrl(params.url)\n  };\n  if (this._params.body) {\n    batchParams.richInput = this._params.body;\n  }\n  return batchParams;\n};\n\n/**\n * Retrieve parameters in batch request form\n *\n * @method Chatter~Request#promise\n * @returns {Promise.<Chatter~RequestResult>}\n */\nRequest.prototype.promise = function() {\n  return this._promise || this._chatter._request(this._params);\n};\n\n/**\n * Returns Node.js Stream object for request\n *\n * @method Chatter~Request#stream\n * @returns {stream.Stream}\n */\nRequest.prototype.stream = function() {\n  return this._chatter._request(this._params).stream();\n};\n\n/**\n * Promise/A+ interface\n * http://promises-aplus.github.io/promises-spec/\n *\n * Delegate to deferred promise, return promise instance for batch result\n *\n * @method Chatter~Request#then\n */\nRequest.prototype.then = function(onResolve, onReject) {\n  return this.promise().then(onResolve, onReject);\n};\n\n/**\n * Promise/A+ extension\n * Call \"then\" using given node-style callback function\n *\n * @method Chatter~Request#thenCall\n */\nRequest.prototype.thenCall = function(callback) {\n  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;\n};\n\n\n/*--------------------------------------------*/\n/**\n * A class representing chatter API resource\n *\n * @protected\n * @class Chatter~Resource\n * @extends Chatter~Request\n * @param {Chatter} chatter - Chatter API object\n * @param {String} url - Resource URL\n * @param {Object} [queryParams] - Query parameters (in hash object)\n */\nvar Resource = function(chatter, url, queryParams) {\n  if (queryParams) {\n    var qstring = _.map(_.keys(queryParams), function(name) {\n      return name + \"=\" + encodeURIComponent(queryParams[name]);\n    }).join('&');\n    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;\n  }\n  Resource.super_.call(this, chatter, { method: 'GET', url: url });\n  this._url = url;\n};\n\ninherits(Resource, Request);\n\n/**\n * Create a new resource\n *\n * @method Chatter~Resource#create\n * @param {Object} data - Data to newly post\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.create = function(data, callback) {\n  return this._chatter.request({\n    method: 'POST',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n\n/**\n * Retrieve resource content\n *\n * @method Chatter~Resource#retrieve\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.retrieve = function(callback) {\n  return this.thenCall(callback);\n};\n\n/**\n * Update specified resource\n *\n * @method Chatter~Resource#update\n * @param {Object} data - Data to update\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.update = function(data, callback) {\n  return this._chatter.request({\n    method: 'PATCH',\n    url: this._url,\n    body: data\n  }).thenCall(callback);\n};\n\n/**\n * Synonym of Resource#delete()\n *\n * @method Chatter~Resource#del\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\n/**\n * Delete specified resource\n *\n * @method Chatter~Resource#delete\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\n * @returns {Chatter~Request}\n */\nResource.prototype.del =\nResource.prototype[\"delete\"] = function(callback) {\n  return this._chatter.request({\n    method: 'DELETE',\n    url: this._url\n  }).thenCall(callback);\n};\n\n\n/*--------------------------------------------*/\n/*\n * Register hook in connection instantiation for dynamically adding this API module features\n */\njsforce.on('connection:new', function(conn) {\n  conn.chatter = new Chatter(conn);\n});\n"]}
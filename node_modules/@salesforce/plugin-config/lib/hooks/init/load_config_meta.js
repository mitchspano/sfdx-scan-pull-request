"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const log = core_2.Logger.childFromRoot('plugin-config:load_config_meta');
const OCLIF_META_PJSON_KEY = 'configMeta';
function loadConfigMeta(plugin) {
    var _a;
    let configMetaRequireLocation;
    try {
        const configMetaPath = (0, ts_types_1.get)(plugin, `pjson.oclif.${OCLIF_META_PJSON_KEY}`, null);
        if (typeof configMetaPath !== 'string') {
            return;
        }
        const relativePath = (0, core_1.tsPath)(plugin.root, configMetaPath);
        // use relative path if it exists, require string as is
        configMetaRequireLocation = relativePath !== null && relativePath !== void 0 ? relativePath : configMetaPath;
    }
    catch {
        return;
    }
    if (!configMetaRequireLocation) {
        return;
    }
    try {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-var-requires
        const configMetaPathModule = require(configMetaRequireLocation);
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access
        return (_a = configMetaPathModule === null || configMetaPathModule === void 0 ? void 0 : configMetaPathModule.default) !== null && _a !== void 0 ? _a : configMetaPathModule;
    }
    catch {
        log.error(`Error trying to load config meta from ${configMetaRequireLocation}`);
        return;
    }
}
const hook = ({ config }) => {
    const flattenedConfigMetas = (config.plugins || [])
        .map((plugin) => {
        const configMeta = loadConfigMeta(plugin);
        if (!configMeta) {
            log.info(`No config meta found for ${plugin.name}`);
        }
        return configMeta;
    })
        .filter(ts_types_1.isObject)
        .flat();
    if (flattenedConfigMetas.length) {
        core_2.Config.addAllowedProperties(flattenedConfigMetas);
    }
    return;
};
exports.default = hook;
//# sourceMappingURL=load_config_meta.js.map
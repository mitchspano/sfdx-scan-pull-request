"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnSet = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const config_1 = require("../../config");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-config', 'unset');
class UnSet extends config_1.ConfigCommand {
    async run() {
        const argv = await this.parseArgs();
        if (!argv || argv.length === 0) {
            throw messages.createError('NoConfigKeysFound');
        }
        else {
            const config = await core_1.Config.create(core_1.Config.getDefaultOptions(this.flags.global));
            await config.read();
            argv.forEach((key) => {
                var _a;
                try {
                    const configKey = ((_a = core_1.Config.getPropertyConfigMeta(key)) === null || _a === void 0 ? void 0 : _a.key) || key;
                    config.unset(configKey);
                    this.responses.push({ name: key, success: true });
                }
                catch (err) {
                    process.exitCode = 1;
                    this.responses.push({
                        name: key,
                        success: false,
                        error: err,
                    });
                }
            });
            await config.write();
            if (!this.flags.json) {
                this.output('Unset Config', false);
            }
        }
        return this.formatResults();
    }
}
exports.UnSet = UnSet;
UnSet.description = messages.getMessage('description');
UnSet.examples = messages.getMessage('examples').split(os.EOL);
UnSet.strict = false;
UnSet.flagsConfig = {
    global: command_1.flags.boolean({
        char: 'g',
        description: messages.getMessage('global'),
        longDescription: messages.getMessage('globalLong'),
        required: false,
    }),
};
//# sourceMappingURL=unset.js.map
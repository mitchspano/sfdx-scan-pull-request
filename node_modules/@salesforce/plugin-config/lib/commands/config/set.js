"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Set = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const config_1 = require("../../config");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-config', 'set');
class Set extends config_1.ConfigCommand {
    async run() {
        var _a;
        const config = await core_1.Config.create(core_1.Config.getDefaultOptions(this.flags.global));
        await config.read();
        let value = '';
        for (const name of Object.keys(this.varargs)) {
            try {
                value = (0, ts_types_1.getString)(this.varargs, name);
                if ((name === core_1.SfdxPropertyKeys.DEFAULT_DEV_HUB_USERNAME || name === core_1.SfdxPropertyKeys.DEFAULT_USERNAME) &&
                    value) {
                    // verify that the value passed can be used to create an Org
                    await core_1.Org.create({ aliasOrUsername: value });
                }
                const configKey = ((_a = core_1.Config.getPropertyConfigMeta(name)) === null || _a === void 0 ? void 0 : _a.key) || name;
                config.set(configKey, value);
                this.responses.push({ name, value, success: true });
            }
            catch (err) {
                process.exitCode = 1;
                this.responses.push({
                    name,
                    value,
                    success: false,
                    error: err,
                });
            }
        }
        await config.write();
        if (!this.flags.json) {
            this.output('Set Config', false);
        }
        return this.formatResults();
    }
}
exports.Set = Set;
Set.description = messages.getMessage('description');
Set.examples = messages.getMessage('examples').split(os.EOL);
Set.varargs = { required: true };
Set.flagsConfig = {
    global: command_1.flags.boolean({
        char: 'g',
        description: messages.getMessage('global'),
        longDescription: messages.getMessage('globalLong'),
        required: false,
    }),
};
Set.aliases = ['force:config:set'];
//# sourceMappingURL=set.js.map
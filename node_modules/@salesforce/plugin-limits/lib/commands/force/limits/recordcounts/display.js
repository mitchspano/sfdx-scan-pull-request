"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitsRecordCountsDisplayCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-limits', 'recordcounts');
class LimitsRecordCountsDisplayCommand extends command_1.SfdxCommand {
    async run() {
        try {
            const sobjectsPassed = this.flags.sobjecttype;
            const sobjectsQuery = sobjectsPassed ? `=${sobjectsPassed.join()}` : '';
            const conn = this.org.getConnection();
            const geturl = `${conn.baseUrl()}/limits/recordCount?sObjects${sobjectsQuery}`;
            const result = await conn.request(geturl);
            // if an object is requested, but there's 0 of them on the server, append that object to the result
            if (sobjectsPassed) {
                sobjectsPassed.forEach((name) => {
                    if (!result.sObjects.find((record) => record.name === name)) {
                        result.sObjects.push({ name, count: 0 });
                    }
                });
            }
            return result.sObjects;
        }
        catch (err) {
            throw core_1.SfError.wrap(err);
        }
    }
}
exports.LimitsRecordCountsDisplayCommand = LimitsRecordCountsDisplayCommand;
LimitsRecordCountsDisplayCommand.description = messages.getMessage('commandDescription');
LimitsRecordCountsDisplayCommand.examples = messages.getMessage('examples').split(os.EOL);
LimitsRecordCountsDisplayCommand.requiresUsername = true;
LimitsRecordCountsDisplayCommand.result = {
    tableColumnData: {
        name: { header: 'sObject' },
        count: { header: 'Record Count' },
    },
    display() {
        if (Array.isArray(this.data) && this.data.length) {
            this.ux.table(this.data, this.tableColumnData);
        }
    },
};
LimitsRecordCountsDisplayCommand.flagsConfig = {
    sobjecttype: command_1.flags.array({
        char: 's',
        description: messages.getMessage('sobjecttypeFlagDescription'),
    }),
};
//# sourceMappingURL=display.js.map
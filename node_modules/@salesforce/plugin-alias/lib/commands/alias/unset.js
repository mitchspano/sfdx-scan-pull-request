"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const core_1 = require("@salesforce/core");
const alias_1 = require("../../alias");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-alias', 'unset');
class Unset extends alias_1.AliasCommand {
    async run() {
        const argv = await this.parseArgs();
        if (!argv || argv.length === 0) {
            throw messages.createError('NoAliasKeysFound');
        }
        else {
            const results = [];
            const stateAggregator = await core_1.StateAggregator.getInstance();
            argv.forEach((key) => {
                try {
                    stateAggregator.aliases.unset(key);
                    results.push({ alias: key, success: true });
                }
                catch (error) {
                    const err = error;
                    process.exitCode = 1;
                    results.push({ alias: key, success: false, error: err });
                }
            });
            await stateAggregator.aliases.write();
            this.output(alias_1.Command.Unset, results);
            return results;
        }
    }
}
exports.default = Unset;
Unset.description = messages.getMessage('description');
Unset.examples = messages.getMessage('examples').split(os.EOL);
Unset.strict = false;
//# sourceMappingURL=unset.js.map
import { AsyncOptionalCreatable } from '@salesforce/kit';
import { Optional } from '@salesforce/ts-types';
import { GlobalInfo } from '../globalInfoConfig';
import { SfTokens, SfToken, Timestamp } from '../types';
/**
 * @deprecated
 */
export declare class GlobaInfoTokenAccessor {
    private globalInfo;
    constructor(globalInfo: GlobalInfo);
    getAll(decrypt?: boolean): SfTokens;
    get(name: string, decrypt?: boolean): Optional<SfToken & Timestamp>;
    has(name: string): boolean;
    set(name: string, token: SfToken): void;
    update(name: string, token: Partial<SfToken>): void;
    unset(name: string): void;
}
export declare class TokenAccessor extends AsyncOptionalCreatable {
    private config;
    /**
     * Return all tokens.
     *
     * @param decrypt
     * @returns {SfTokens}
     */
    getAll(decrypt?: boolean): SfTokens;
    /**
     * Return a token for the provided name.
     *
     * @param name
     * @param decrypt
     * @returns {Optional<SfToken & Timestamp>}
     */
    get(name: string, decrypt?: boolean): Optional<SfToken & Timestamp>;
    /**
     * Return true if a given name has a token associated with it.
     *
     * @param name
     * @returns {boolean}
     */
    has(name: string): boolean;
    /**
     * Set the token for the provided name.
     *
     * @param name
     * @param token
     */
    set(name: string, token: SfToken): void;
    /**
     * Update the token for the provided name.
     *
     * @param name
     * @param token
     */
    update(name: string, token: Partial<SfToken>): void;
    /**
     * Unet the token for the provided name.
     *
     * @param name
     */
    unset(name: string): void;
    /**
     * Write the contents to the token file.
     *
     * @returns {Promise<SfTokens>}
     */
    write(): Promise<SfTokens>;
    protected init(): Promise<void>;
}

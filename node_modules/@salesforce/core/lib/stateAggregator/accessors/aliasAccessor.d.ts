import { AsyncOptionalCreatable } from '@salesforce/kit';
import { Nullable } from '@salesforce/ts-types';
import { ConfigContents } from '../../exported';
import { GlobalInfo } from '../globalInfoConfig';
import { SfAliases, SfOrg, SfToken } from '../types';
export declare type Aliasable = string | Partial<SfOrg> | Partial<SfToken>;
/**
 * @deprecated
 */
export declare class GlobalInfoAliasAccessor {
    private globalInfo;
    constructor(globalInfo: GlobalInfo);
    /**
     * Returns all the aliases for all the values
     */
    getAll(): SfAliases;
    /**
     * Returns all the aliases for a given entity
     *
     * @param entity the aliasable entity that you want to get the aliases of
     */
    getAll(entity: Aliasable): string[];
    /**
     * Returns the first alias found for a given entity
     *
     * @param entity the aliasable entity that you want to get the alias of
     */
    get(entity: Aliasable): Nullable<string>;
    /**
     * Returns the value that corresponds to the given alias if it exists
     *
     * @param alias the alias that corresponds to a value
     */
    getValue(alias: string): Nullable<string>;
    /**
     * Returns the username that corresponds to the given alias if it exists
     *
     * @param alias the alias that corresponds to a username
     */
    getUsername(alias: string): Nullable<string>;
    /**
     * If the provided string is an alias, it returns the corresponding value.
     * If the provided string is not an alias, we assume that the provided string
     * is the value and return it.
     *
     * This method is helpful when you don't know if the string you have is a value
     * or an alias.
     *
     * @param valueOrAlias a string that might be a value or might be an alias
     */
    resolveValue(valueOrAlias: string): string;
    /**
     * If the provided string is an alias, it returns the corresponding username.
     * If the provided string is not an alias, we assume that the provided string
     * is the username and return it.
     *
     * This method is helpful when you don't know if the string you have is a username
     * or an alias.
     *
     * @param usernameOrAlias a string that might be a username or might be an alias
     */
    resolveUsername(usernameOrAlias: string): string;
    /**
     * Set an alias for the given aliasable entity
     *
     * @param alias the alias you want to set
     * @param entity the aliasable entity that's being aliased
     */
    set(alias: string, entity: Aliasable): void;
    /**
     * Updates the alias for the given aliasable entity
     *
     * @param alias the alias you want to set
     * @param entity the aliasable entity that's being aliased
     */
    update(alias: string, entity: Aliasable): void;
    unset(alias: string): void;
    /**
     * This method unsets all the aliases for the given entity.
     *
     * @param entity the aliasable entity for which you want to unset all aliases
     */
    unsetAll(entity: Aliasable): void;
    /**
     * Returns the username of given aliasable entity
     */
    private getNameOf;
}
export declare class AliasAccessor extends AsyncOptionalCreatable {
    private config;
    /**
     * Returns all the aliases for all the values
     */
    getAll(): ConfigContents<string>;
    /**
     * Returns all the aliases for a given entity
     *
     * @param entity the aliasable entity that you want to get the aliases of
     */
    getAll(entity: Aliasable): string[];
    /**
     * Returns the first alias found for a given entity
     *
     * @param entity the aliasable entity that you want to get the alias of
     */
    get(entity: Aliasable): Nullable<string>;
    /**
     * Returns the value that corresponds to the given alias if it exists
     *
     * @param alias the alias that corresponds to a value
     */
    getValue(alias: string): Nullable<string>;
    /**
     * Returns the username that corresponds to the given alias if it exists
     *
     * @param alias the alias that corresponds to a username
     */
    getUsername(alias: string): Nullable<string>;
    /**
     * If the provided string is an alias, it returns the corresponding value.
     * If the provided string is not an alias, we assume that the provided string
     * is the value and return it.
     *
     * This method is helpful when you don't know if the string you have is a value
     * or an alias.
     *
     * @param valueOrAlias a string that might be a value or might be an alias
     */
    resolveValue(valueOrAlias: string): string;
    /**
     * If the provided string is an alias, it returns the corresponding username.
     * If the provided string is not an alias, we assume that the provided string
     * is the username and return it.
     *
     * This method is helpful when you don't know if the string you have is a username
     * or an alias.
     *
     * @param usernameOrAlias a string that might be a username or might be an alias
     */
    resolveUsername(usernameOrAlias: string): string;
    /**
     * If the provided string is an alias, return it.
     * If the provided string is not an alias, return the username of the provided alias
     *
     * This method is helpful when you don't know if the string you have is a username
     * or an alias.
     *
     * @param usernameOrAlias a string that might be a username or might be an alias
     */
    resolveAlias(usernameOrAlias: string): Nullable<string>;
    /**
     * Set an alias for the given aliasable entity
     *
     * @param alias the alias you want to set
     * @param entity the aliasable entity that's being aliased
     */
    set(alias: string, entity: Aliasable): void;
    /**
     * Unset the given alias.
     *
     */
    unset(alias: string): void;
    /**
     * Unsets all the aliases for the given entity.
     *
     * @param entity the aliasable entity for which you want to unset all aliases
     */
    unsetAll(entity: Aliasable): void;
    write(): Promise<ConfigContents>;
    /**
     * Returns true if the provided alias exists
     *
     * @param alias the alias you want to check
     */
    has(alias: string): boolean;
    protected init(): Promise<void>;
    /**
     * Returns the username of given aliasable entity
     */
    private getNameOf;
}

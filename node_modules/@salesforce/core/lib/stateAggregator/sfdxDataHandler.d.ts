import { ConfigFile } from '../config/configFile';
import { SfInfo, SfInfoKeys, SfOrg, SfOrgs, SfSandbox } from './types';
interface Handler<T extends SfInfoKeys> {
    sfKey: T;
    merge: (sfData: SfInfo) => Promise<Partial<SfInfo>>;
    migrate: () => Promise<Pick<SfInfo, T>>;
    write: (latest: SfInfo, original: SfInfo) => Promise<void>;
}
interface Changes<T> {
    changed: T;
    deleted: string[];
}
export declare class SfdxDataHandler {
    handlers: (AuthHandler | AliasesHandler | SandboxesHandler | TokensHandler)[];
    private original;
    write(latest?: SfInfo): Promise<void>;
    merge(sfData?: SfInfo): Promise<SfInfo>;
    private setOriginal;
}
declare abstract class BaseHandler<T extends SfInfoKeys> implements Handler<T> {
    abstract sfKey: T;
    merge(sfData?: SfInfo): Promise<Partial<SfInfo>>;
    abstract migrate(): Promise<Pick<SfInfo, T>>;
    abstract write(latest: SfInfo, original: SfInfo): Promise<void>;
}
export declare class AuthHandler extends BaseHandler<SfInfoKeys.ORGS> {
    private static authFilenameFilterRegEx;
    sfKey: typeof SfInfoKeys.ORGS;
    migrate(): Promise<Pick<SfInfo, SfInfoKeys.ORGS>>;
    write(latest: SfInfo, original: SfInfo): Promise<void>;
    findChanges(latest: SfInfo, original: SfInfo): Promise<Changes<SfOrgs>>;
    createAuthFileConfig(username: string): Promise<ConfigFile<ConfigFile.Options>>;
    listAllAuthFiles(): Promise<string[]>;
    listAllAuthorizations(): Promise<SfOrg[]>;
}
export declare class AliasesHandler extends BaseHandler<SfInfoKeys.ALIASES> {
    private static SFDX_ALIASES_FILENAME;
    sfKey: typeof SfInfoKeys.ALIASES;
    migrate(): Promise<Pick<SfInfo, SfInfoKeys.ALIASES>>;
    merge(sfData?: SfInfo): Promise<Partial<SfInfo>>;
    write(latest: SfInfo): Promise<void>;
}
export declare class SandboxesHandler extends BaseHandler<SfInfoKeys.SANDBOXES> {
    private static sandboxFilenameFilterRegEx;
    sfKey: typeof SfInfoKeys.SANDBOXES;
    merge(sfData?: SfInfo): Promise<Partial<SfInfo>>;
    migrate(): Promise<Pick<SfInfo, SfInfoKeys.SANDBOXES>>;
    write(latest: SfInfo, original: SfInfo): Promise<void>;
    listAllSandboxFiles(): Promise<string[]>;
    listAllSandboxes(): Promise<SfSandbox[]>;
    private findChanges;
}
export declare class TokensHandler extends BaseHandler<SfInfoKeys.TOKENS> {
    private static SFDX_TOKENS_FILENAME;
    sfKey: typeof SfInfoKeys.TOKENS;
    migrate(): Promise<Pick<SfInfo, SfInfoKeys.TOKENS>>;
    write(latest: SfInfo): Promise<void>;
}
export {};

"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkScratchOrgInfoForErrors = exports.validateScratchOrgInfoForResume = void 0;
const messages_1 = require("../messages");
const sfError_1 = require("../sfError");
const logger_1 = require("../logger");
const scratchOrgCache_1 = require("./scratchOrgCache");
const scratchOrgLifecycleEvents_1 = require("./scratchOrgLifecycleEvents");
const WORKSPACE_CONFIG_FILENAME = 'sfdx-project.json';
messages_1.Messages.importMessagesDirectory(__dirname);
const messages = messages_1.Messages.loadMessages('@salesforce/core', 'scratchOrgErrorCodes');
const namedMessages = messages_1.Messages.load('@salesforce/core', 'scratchOrgErrorCodes', [
    'SignupFailedActionError',
    'SignupFailedUnknownError',
    'SignupFailedError',
    'SignupUnexpectedError',
    'StillInProgressError',
    'action.StillInProgress',
    'ScratchOrgDeletedError',
    'NoScratchOrgInfoError',
]);
// getMessage will throw when the code isn't found
// and we don't know whether a given code takes arguments or not
const optionalErrorCodeMessage = (errorCode, args) => {
    try {
        // only apply args if message requires them
        let message = messages.getMessage(errorCode);
        if (message.includes('%s')) {
            message = messages.getMessage(errorCode, args);
        }
        return message;
    }
    catch {
        // generic error message
        return undefined;
    }
};
const validateScratchOrgInfoForResume = async ({ jobId, scratchOrgInfo, cache, hubUsername, }) => {
    if (!scratchOrgInfo || !scratchOrgInfo.Id || scratchOrgInfo.Status === 'Deleted') {
        // 1. scratch org info does not exist in that dev hub or has been deleted
        cache.unset(jobId);
        await cache.write();
        throw scratchOrgInfo.Status === 'Deleted'
            ? namedMessages.createError('ScratchOrgDeletedError')
            : namedMessages.createError('NoScratchOrgInfoError');
    }
    if (['New', 'Creating'].includes(scratchOrgInfo.Status)) {
        // 2. scratchOrgInfo exists, still isn't finished.  Stays in cache for future attempts
        throw namedMessages.createError('StillInProgressError', [scratchOrgInfo.Status], ['action.StillInProgress']);
    }
    return (0, exports.checkScratchOrgInfoForErrors)(scratchOrgInfo, hubUsername);
};
exports.validateScratchOrgInfoForResume = validateScratchOrgInfoForResume;
const checkScratchOrgInfoForErrors = async (orgInfo, hubUsername) => {
    if (!orgInfo || !orgInfo.Id) {
        throw new sfError_1.SfError('No scratch org info found.', 'ScratchOrgInfoNotFound');
    }
    if (orgInfo.Status === 'Active') {
        await (0, scratchOrgLifecycleEvents_1.emit)({ stage: 'available', scratchOrgInfo: orgInfo });
        return orgInfo;
    }
    if (orgInfo.Status === 'Error' && orgInfo.ErrorCode) {
        await scratchOrgCache_1.ScratchOrgCache.unset(orgInfo.Id);
        const message = optionalErrorCodeMessage(orgInfo.ErrorCode, [WORKSPACE_CONFIG_FILENAME]);
        if (message) {
            throw new sfError_1.SfError(message, 'RemoteOrgSignupFailed', [
                namedMessages.getMessage('SignupFailedActionError', [orgInfo.ErrorCode]),
            ]);
        }
        throw new sfError_1.SfError(namedMessages.getMessage('SignupFailedError', [orgInfo.ErrorCode]));
    }
    if (orgInfo.Status === 'Error') {
        await scratchOrgCache_1.ScratchOrgCache.unset(orgInfo.Id);
        const logger = await logger_1.Logger.child('ScratchOrgErrorCodes');
        // Maybe the request object can help the user somehow
        logger.error('No error code on signup error! Logging request.');
        logger.error(orgInfo);
        throw new sfError_1.SfError(namedMessages.getMessage('SignupFailedUnknownError', [orgInfo.Id, hubUsername]), 'signupFailedUnknown');
    }
    throw new sfError_1.SfError(namedMessages.getMessage('SignupUnexpectedError'), 'UnexpectedSignupStatus');
};
exports.checkScratchOrgInfoForErrors = checkScratchOrgInfoForErrors;
//# sourceMappingURL=scratchOrgErrorCodes.js.map
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import fs from 'fs';
import path from 'path';
import { BaseRegistry } from './base';
/**
 *
 */

function getDefaultConfigFilePath() {
  const homeDir = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

  if (!homeDir) {
    throw new Error('cannot find user home directory to store configuration files');
  }

  return path.join(homeDir, '.jsforce', 'config.json');
}
/**
 *
 */


export class FileRegistry extends BaseRegistry {
  constructor({
    configFilePath
  }) {
    super();

    _defineProperty(this, "_configFilePath", void 0);

    this._configFilePath = configFilePath || getDefaultConfigFilePath();

    try {
      var data = fs.readFileSync(this._configFilePath, 'utf-8');
      this._registryConfig = JSON.parse(data);
    } catch (e) {//
    }
  }

  _saveConfig() {
    const data = _JSON$stringify(this._registryConfig, null, 4);

    try {
      fs.writeFileSync(this._configFilePath, data);
      fs.chmodSync(this._configFilePath, '600');
    } catch (e) {
      const configDir = path.dirname(this._configFilePath);
      fs.mkdirSync(configDir);
      fs.chmodSync(configDir, '700');
      fs.writeFileSync(this._configFilePath, data);
      fs.chmodSync(this._configFilePath, '600');
    }
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWdpc3RyeS9maWxlLnRzIl0sIm5hbWVzIjpbImZzIiwicGF0aCIsIkJhc2VSZWdpc3RyeSIsImdldERlZmF1bHRDb25maWdGaWxlUGF0aCIsImhvbWVEaXIiLCJwcm9jZXNzIiwiZW52IiwicGxhdGZvcm0iLCJFcnJvciIsImpvaW4iLCJGaWxlUmVnaXN0cnkiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ0ZpbGVQYXRoIiwiX2NvbmZpZ0ZpbGVQYXRoIiwiZGF0YSIsInJlYWRGaWxlU3luYyIsIl9yZWdpc3RyeUNvbmZpZyIsIkpTT04iLCJwYXJzZSIsImUiLCJfc2F2ZUNvbmZpZyIsIndyaXRlRmlsZVN5bmMiLCJjaG1vZFN5bmMiLCJjb25maWdEaXIiLCJkaXJuYW1lIiwibWtkaXJTeW5jIl0sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU9BLEVBQVAsTUFBZSxJQUFmO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLFNBQVNDLFlBQVQsUUFBNkIsUUFBN0I7QUFFQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0Msd0JBQVQsR0FBb0M7QUFDbEMsUUFBTUMsT0FBTyxHQUNYQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUQsT0FBTyxDQUFDRSxRQUFSLEtBQXFCLE9BQXJCLEdBQStCLGFBQS9CLEdBQStDLE1BQTNELENBREY7O0FBRUEsTUFBSSxDQUFDSCxPQUFMLEVBQWM7QUFDWixVQUFNLElBQUlJLEtBQUosQ0FDSiw4REFESSxDQUFOO0FBR0Q7O0FBQ0QsU0FBT1AsSUFBSSxDQUFDUSxJQUFMLENBQVVMLE9BQVYsRUFBbUIsVUFBbkIsRUFBK0IsYUFBL0IsQ0FBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBOzs7QUFDQSxPQUFPLE1BQU1NLFlBQU4sU0FBMkJSLFlBQTNCLENBQXdDO0FBRzdDUyxFQUFBQSxXQUFXLENBQUM7QUFBRUMsSUFBQUE7QUFBRixHQUFELEVBQWtEO0FBQzNEOztBQUQyRDs7QUFFM0QsU0FBS0MsZUFBTCxHQUF1QkQsY0FBYyxJQUFJVCx3QkFBd0IsRUFBakU7O0FBQ0EsUUFBSTtBQUNGLFVBQUlXLElBQUksR0FBR2QsRUFBRSxDQUFDZSxZQUFILENBQWdCLEtBQUtGLGVBQXJCLEVBQXNDLE9BQXRDLENBQVg7QUFDQSxXQUFLRyxlQUFMLEdBQXVCQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osSUFBWCxDQUF2QjtBQUNELEtBSEQsQ0FHRSxPQUFPSyxDQUFQLEVBQVUsQ0FDVjtBQUNEO0FBQ0Y7O0FBRURDLEVBQUFBLFdBQVcsR0FBRztBQUNaLFVBQU1OLElBQUksR0FBRyxnQkFBZSxLQUFLRSxlQUFwQixFQUFxQyxJQUFyQyxFQUEyQyxDQUEzQyxDQUFiOztBQUNBLFFBQUk7QUFDRmhCLE1BQUFBLEVBQUUsQ0FBQ3FCLGFBQUgsQ0FBaUIsS0FBS1IsZUFBdEIsRUFBdUNDLElBQXZDO0FBQ0FkLE1BQUFBLEVBQUUsQ0FBQ3NCLFNBQUgsQ0FBYSxLQUFLVCxlQUFsQixFQUFtQyxLQUFuQztBQUNELEtBSEQsQ0FHRSxPQUFPTSxDQUFQLEVBQVU7QUFDVixZQUFNSSxTQUFTLEdBQUd0QixJQUFJLENBQUN1QixPQUFMLENBQWEsS0FBS1gsZUFBbEIsQ0FBbEI7QUFDQWIsTUFBQUEsRUFBRSxDQUFDeUIsU0FBSCxDQUFhRixTQUFiO0FBQ0F2QixNQUFBQSxFQUFFLENBQUNzQixTQUFILENBQWFDLFNBQWIsRUFBd0IsS0FBeEI7QUFDQXZCLE1BQUFBLEVBQUUsQ0FBQ3FCLGFBQUgsQ0FBaUIsS0FBS1IsZUFBdEIsRUFBdUNDLElBQXZDO0FBQ0FkLE1BQUFBLEVBQUUsQ0FBQ3NCLFNBQUgsQ0FBYSxLQUFLVCxlQUFsQixFQUFtQyxLQUFuQztBQUNEO0FBQ0Y7O0FBMUI0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEJhc2VSZWdpc3RyeSB9IGZyb20gJy4vYmFzZSc7XG5cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdENvbmZpZ0ZpbGVQYXRoKCkge1xuICBjb25zdCBob21lRGlyID1cbiAgICBwcm9jZXNzLmVudltwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gJ1VTRVJQUk9GSUxFJyA6ICdIT01FJ107XG4gIGlmICghaG9tZURpcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdjYW5ub3QgZmluZCB1c2VyIGhvbWUgZGlyZWN0b3J5IHRvIHN0b3JlIGNvbmZpZ3VyYXRpb24gZmlsZXMnLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHBhdGguam9pbihob21lRGlyLCAnLmpzZm9yY2UnLCAnY29uZmlnLmpzb24nKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgRmlsZVJlZ2lzdHJ5IGV4dGVuZHMgQmFzZVJlZ2lzdHJ5IHtcbiAgX2NvbmZpZ0ZpbGVQYXRoOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoeyBjb25maWdGaWxlUGF0aCB9OiB7IGNvbmZpZ0ZpbGVQYXRoPzogc3RyaW5nIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2NvbmZpZ0ZpbGVQYXRoID0gY29uZmlnRmlsZVBhdGggfHwgZ2V0RGVmYXVsdENvbmZpZ0ZpbGVQYXRoKCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBkYXRhID0gZnMucmVhZEZpbGVTeW5jKHRoaXMuX2NvbmZpZ0ZpbGVQYXRoLCAndXRmLTgnKTtcbiAgICAgIHRoaXMuX3JlZ2lzdHJ5Q29uZmlnID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvL1xuICAgIH1cbiAgfVxuXG4gIF9zYXZlQ29uZmlnKCkge1xuICAgIGNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh0aGlzLl9yZWdpc3RyeUNvbmZpZywgbnVsbCwgNCk7XG4gICAgdHJ5IHtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmModGhpcy5fY29uZmlnRmlsZVBhdGgsIGRhdGEpO1xuICAgICAgZnMuY2htb2RTeW5jKHRoaXMuX2NvbmZpZ0ZpbGVQYXRoLCAnNjAwJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgY29uZmlnRGlyID0gcGF0aC5kaXJuYW1lKHRoaXMuX2NvbmZpZ0ZpbGVQYXRoKTtcbiAgICAgIGZzLm1rZGlyU3luYyhjb25maWdEaXIpO1xuICAgICAgZnMuY2htb2RTeW5jKGNvbmZpZ0RpciwgJzcwMCcpO1xuICAgICAgZnMud3JpdGVGaWxlU3luYyh0aGlzLl9jb25maWdGaWxlUGF0aCwgZGF0YSk7XG4gICAgICBmcy5jaG1vZFN5bmModGhpcy5fY29uZmlnRmlsZVBhdGgsICc2MDAnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
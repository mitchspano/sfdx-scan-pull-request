import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";

/**
 *
 */
import { Transform } from 'stream';

function parseHeaders(hs) {
  const headers = {};

  for (const line of hs.split(/\n/)) {
    const [name, value] = line.split(/\s*:\s*/);
    headers[name.toLowerCase()] = value;
  }

  return headers;
}

async function processCanvasRequest(params, signedRequest, requestBody) {
  const settings = {
    client: signedRequest.client,
    method: params.method,
    data: requestBody
  };
  const paramHeaders = params.headers;

  if (paramHeaders) {
    settings.headers = {};

    for (const name of _Object$keys(paramHeaders)) {
      if (name.toLowerCase() === 'content-type') {
        settings.contentType = paramHeaders[name];
      } else {
        settings.headers[name] = paramHeaders[name];
      }
    }
  }

  const data = await new _Promise((resolve, reject) => {
    settings.success = resolve;
    settings.failure = reject;
    Sfdc.canvas.client.ajax(params.url, settings);
  });
  const headers = parseHeaders(data.responseHeaders);
  let responseBody = data.payload;

  if (typeof responseBody !== 'string') {
    responseBody = _JSON$stringify(responseBody);
  }

  return {
    statusCode: data.status,
    headers,
    body: responseBody
  };
}

function createRequest(signedRequest) {
  return params => {
    const buf = [];
    const stream = new Transform({
      transform(chunk, encoding, callback) {
        buf.push(typeof chunk === 'string' ? chunk : chunk.toString('utf8'));
        callback();
      },

      flush() {
        (async () => {
          const body = buf.join('');
          const response = await processCanvasRequest(params, signedRequest, body);
          stream.emit('response', response);
          stream.emit('complete', response);
          stream.push(response.body);
          stream.push(null);
        })();
      }

    });

    if (params.body) {
      stream.end(params.body);
    }

    return stream;
  };
}

export default {
  supported: typeof Sfdc === 'object' && typeof Sfdc.canvas !== 'undefined',
  createRequest
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icm93c2VyL2NhbnZhcy50cyJdLCJuYW1lcyI6WyJUcmFuc2Zvcm0iLCJwYXJzZUhlYWRlcnMiLCJocyIsImhlYWRlcnMiLCJsaW5lIiwic3BsaXQiLCJuYW1lIiwidmFsdWUiLCJ0b0xvd2VyQ2FzZSIsInByb2Nlc3NDYW52YXNSZXF1ZXN0IiwicGFyYW1zIiwic2lnbmVkUmVxdWVzdCIsInJlcXVlc3RCb2R5Iiwic2V0dGluZ3MiLCJjbGllbnQiLCJtZXRob2QiLCJkYXRhIiwicGFyYW1IZWFkZXJzIiwiY29udGVudFR5cGUiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3VjY2VzcyIsImZhaWx1cmUiLCJTZmRjIiwiY2FudmFzIiwiYWpheCIsInVybCIsInJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlQm9keSIsInBheWxvYWQiLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwiYm9keSIsImNyZWF0ZVJlcXVlc3QiLCJidWYiLCJzdHJlYW0iLCJ0cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJwdXNoIiwidG9TdHJpbmciLCJmbHVzaCIsImpvaW4iLCJyZXNwb25zZSIsImVtaXQiLCJlbmQiLCJzdXBwb3J0ZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFNBQVQsUUFBMEIsUUFBMUI7O0FBV0EsU0FBU0MsWUFBVCxDQUFzQkMsRUFBdEIsRUFBa0M7QUFDaEMsUUFBTUMsT0FBK0IsR0FBRyxFQUF4Qzs7QUFDQSxPQUFLLE1BQU1DLElBQVgsSUFBbUJGLEVBQUUsQ0FBQ0csS0FBSCxDQUFTLElBQVQsQ0FBbkIsRUFBbUM7QUFDakMsVUFBTSxDQUFDQyxJQUFELEVBQU9DLEtBQVAsSUFBZ0JILElBQUksQ0FBQ0MsS0FBTCxDQUFXLFNBQVgsQ0FBdEI7QUFDQUYsSUFBQUEsT0FBTyxDQUFDRyxJQUFJLENBQUNFLFdBQUwsRUFBRCxDQUFQLEdBQThCRCxLQUE5QjtBQUNEOztBQUNELFNB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O0FBWUQ7O0FBbEIwQixLQUFkLENBQWY7O0FBb0JBLFFBQUk5QixNQUFNLENBQUNzQixJQUFYLEVBQWlCO0FBQ2ZHLE1BQUFBLE1BQU0sQ0FBQ1csR0FBUCxDQUFXcEMsTUFBTSxDQUFDc0IsSUFBbEI7QUFDRDs7QUFDRCxXQUFPRyxNQUFQO0FBQ0QsR0ExQkQ7QUEyQkQ7O0FBRUQsZUFBZTtBQUNiWSxFQUFBQSxTQUFTLEVBQUUsT0FBT3hCLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEIsT0FBT0EsSUFBSSxDQUFDQyxNQUFaLEtBQXVCLFdBRGpEO0FBRWJTLEVBQUFBO0FBRmEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqL1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBTaWduZWRSZXF1ZXN0T2JqZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5kZWNsYXJlIHZhciBTZmRjOiBhbnk7XG5cbnR5cGUgQ2FudmFzUmVzcG9uc2UgPSB7XG4gIHN0YXR1czogc3RyaW5nO1xuICByZXNwb25zZUhlYWRlcnM6IHN0cmluZztcbiAgcGF5bG9hZDogYW55O1xufTtcblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhzOiBzdHJpbmcpIHtcbiAgY29uc3QgaGVhZGVyczogSHR0cFJlcXVlc3RbJ2hlYWRlcnMnXSA9IHt9O1xuICBmb3IgKGNvbnN0IGxpbmUgb2YgaHMuc3BsaXQoL1xcbi8pKSB7XG4gICAgY29uc3QgW25hbWUsIHZhbHVlXSA9IGxpbmUuc3BsaXQoL1xccyo6XFxzKi8pO1xuICAgIGhlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBoZWFkZXJzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwcm9jZXNzQ2FudmFzUmVxdWVzdChcbiAgcGFyYW1zOiBIdHRwUmVxdWVzdCxcbiAgc2lnbmVkUmVxdWVzdDogU2lnbmVkUmVxdWVzdE9iamVjdCxcbiAgcmVxdWVzdEJvZHk6IHN0cmluZyxcbikge1xuICBjb25zdCBzZXR0aW5nczogYW55ID0ge1xuICAgIGNsaWVudDogc2lnbmVkUmVxdWVzdC5jbGllbnQsXG4gICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kLFxuICAgIGRhdGE6IHJlcXVlc3RCb2R5LFxuICB9O1xuICBjb25zdCBwYXJhbUhlYWRlcnMgPSBwYXJhbXMuaGVhZGVycztcbiAgaWYgKHBhcmFtSGVhZGVycykge1xuICAgIHNldHRpbmdzLmhlYWRlcnMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMocGFyYW1IZWFkZXJzKSkge1xuICAgICAgaWYgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgc2V0dGluZ3MuY29udGVudFR5cGUgPSBwYXJhbUhlYWRlcnNbbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXR0aW5ncy5oZWFkZXJzW25hbWVdID0gcGFyYW1IZWFkZXJzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBkYXRhID0gYXdhaXQgbmV3IFByb21pc2U8Q2FudmFzUmVzcG9uc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzZXR0aW5ncy5zdWNjZXNzID0gcmVzb2x2ZTtcbiAgICBzZXR0aW5ncy5mYWlsdXJlID0gcmVqZWN0O1xuICAgIFNmZGMuY2FudmFzLmNsaWVudC5hamF4KHBhcmFtcy51cmwsIHNldHRpbmdzKTtcbiAgfSk7XG4gIGNvbnN0IGhlYWRlcnMgPSBwYXJzZUhlYWRlcnMoZGF0YS5yZXNwb25zZUhlYWRlcnMpO1xuICBsZXQgcmVzcG9uc2VCb2R5ID0gZGF0YS5wYXlsb2FkO1xuICBpZiAodHlwZW9mIHJlc3BvbnNlQm9keSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXNwb25zZUJvZHkgPSBKU09OLnN0cmluZ2lmeShyZXNwb25zZUJvZHkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhdHVzQ29kZTogZGF0YS5zdGF0dXMsXG4gICAgaGVhZGVycyxcbiAgICBib2R5OiByZXNwb25zZUJvZHkgYXMgc3RyaW5nLFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0KHNpZ25lZFJlcXVlc3Q6IFNpZ25lZFJlcXVlc3RPYmplY3QpIHtcbiAgcmV0dXJuIChwYXJhbXM6IEh0dHBSZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgYnVmOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBUcmFuc2Zvcm0oe1xuICAgICAgdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgYnVmLnB1c2godHlwZW9mIGNodW5rID09PSAnc3RyaW5nJyA/IGNodW5rIDogY2h1bmsudG9TdHJpbmcoJ3V0ZjgnKSk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9LFxuICAgICAgZmx1c2goKSB7XG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgYm9keSA9IGJ1Zi5qb2luKCcnKTtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHByb2Nlc3NDYW52YXNSZXF1ZXN0KFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgc2lnbmVkUmVxdWVzdCxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgncmVzcG9uc2UnLCByZXNwb25zZSk7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ2NvbXBsZXRlJywgcmVzcG9uc2UpO1xuICAgICAgICAgIHN0cmVhbS5wdXNoKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgIHN0cmVhbS5wdXNoKG51bGwpO1xuICAgICAgICB9KSgpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBpZiAocGFyYW1zLmJvZHkpIHtcbiAgICAgIHN0cmVhbS5lbmQocGFyYW1zLmJvZHkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyZWFtO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN1cHBvcnRlZDogdHlwZW9mIFNmZGMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBTZmRjLmNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcsXG4gIGNyZWF0ZVJlcXVlc3QsXG59O1xuIl19
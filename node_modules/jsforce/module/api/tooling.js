import "core-js/modules/es.array.iterator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import Connection from '../connection';
import Cache from '../cache';

/**
 *
 */
const {
  query,
  queryMore,
  create,
  _createSingle,
  _createMany,
  _createParallel,
  retrieve,
  _retrieveSingle,
  _retrieveParallel,
  _retrieveMany,
  update,
  _updateSingle,
  _updateParallel,
  _updateMany,
  upsert,
  destroy,
  _destroySingle,
  _destroyParallel,
  _destroyMany,
  describe,
  describeGlobal,
  sobject
} = Connection.prototype;

const describeCacheKey = type => type ? `describe.${type}` : 'describe';
/**
 * API class for Tooling API call
 */


export class Tooling {
  /**
   * Execute query by using SOQL
   */

  /**
   * Query next record set by using query locator
   */

  /**
   * Create records
   */

  /**
   * Synonym of Tooling#create()
   */

  /**
   * Retrieve specified records
   */

  /**
   * Update records
   */

  /**
   * Upsert records
   */

  /**
   * Delete records
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Describe SObject metadata
   */

  /**
   * Synonym of Tooling#describe()
   */

  /**
   * Describe global SObjects
   */

  /**
   * Get SObject instance
   */

  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "query", query);

    _defineProperty(this, "queryMore", queryMore);

    _defineProperty(this, "create", create);

    _defineProperty(this, "_createSingle", _createSingle);

    _defineProperty(this, "_createParallel", _createParallel);

    _defineProperty(this, "_createMany", _createMany);

    _defineProperty(this, "insert", create);

    _defineProperty(this, "retrieve", retrieve);

    _defineProperty(this, "_retrieveSingle", _retrieveSingle);

    _defineProperty(this, "_retrieveParallel", _retrieveParallel);

    _defineProperty(this, "_retrieveMany", _retrieveMany);

    _defineProperty(this, "update", update);

    _defineProperty(this, "_updateSingle", _updateSingle);

    _defineProperty(this, "_updateParallel", _updateParallel);

    _defineProperty(this, "_updateMany", _updateMany);

    _defineProperty(this, "upsert", upsert);

    _defineProperty(this, "destroy", destroy);

    _defineProperty(this, "_destroySingle", _destroySingle);

    _defineProperty(this, "_destroyParallel", _destroyParallel);

    _defineProperty(this, "_destroyMany", _destroyMany);

    _defineProperty(this, "delete", destroy);

    _defineProperty(this, "del", destroy);

    _defineProperty(this, "cache", new Cache());

    _defineProperty(this, "describe", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    }));

    _defineProperty(this, "describe$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    }));

    _defineProperty(this, "describe$$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    }));

    _defineProperty(this, "describeSObject", this.describe);

    _defineProperty(this, "describeSObject$", this.describe$);

    _defineProperty(this, "describeSObject$$", this.describe$$);

    _defineProperty(this, "describeGlobal", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    }));

    _defineProperty(this, "describeGlobal$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    }));

    _defineProperty(this, "describeGlobal$$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    }));

    _defineProperty(this, "sobject", sobject);

    _defineProperty(this, "sobjects", {});

    this._conn = conn;
  }
  /**
   * @private
   */


  _establish() {
    this.sobjects = {};
    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on('value', res => {
      if (res.result) {
        for (const {
          name: type
        } of res.result.sobjects) {
          this.sobject(type);
        }
      }
    });
  }
  /**
   * @private
   */


  _baseUrl() {
    return this._conn._baseUrl() + '/tooling';
  }
  /**
   * @private
   */


  _supports(feature) {
    return this._conn._supports(feature);
  }
  /**
   *
   */


  request(request, options) {
    return this._conn.request(request, options);
  }
  /**
   * Executes Apex code anonymously
   */


  executeAnonymous(body) {
    const url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
    return this.request(url);
  }
  /**
   * Executes Apex tests asynchronously
   */


  runTestsAsynchronous(req) {
    const url = this._baseUrl() + '/runTestsAsynchronous/';
    return this._conn.requestPost(url, req);
  }
  /**
   * Executes Apex tests synchronously
   */


  runTestsSynchronous(req) {
    const url = this._baseUrl() + '/runTestsSynchronous/';
    return this._conn.requestPost(url, req);
  }
  /**
   * Retrieves available code completions of the referenced type
   */


  completions(type = 'apex') {
    const url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
    return this.request({
      method: 'GET',
      url,
      headers: {
        Accept: 'application/json'
      }
    });
  }

}
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */

registerModule('tooling', conn => new Tooling(conn));
export default Tooling;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
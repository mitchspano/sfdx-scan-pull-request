import "core-js/modules/es.array.iterator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

/**
 *
 */
export const LogLevels = {
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  FATAL: 5,
  NONE: 6
};
const LogLevelLabels = ['', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL', 'NONE'];

const globalLogLevelConfig = (() => {
  const globalLogLevelStr = process.env.JSFORCE_LOG_LEVEL || global.__JSFORCE_LOG_LEVEL__ || 'NONE';

  if (/^(DEBUG|INFO|WARN|ERROR|FATAL|NONE)$/i.test(globalLogLevelStr)) {
    return {
      '*': globalLogLevelStr
    };
  }

  try {
    return JSON.parse(globalLogLevelStr);
  } catch (e) {
    return {
      '*': 'NONE'
    };
  }
})();

function getModuleLogLevel(logLevelConfig, moduleName) {
  const logLevel = logLevelConfig[moduleName] || logLevelConfig['*'];
  return typeof logLevel === 'number' ? logLevel : LogLevels[logLevel] || LogLevels.NONE;
}
/**
 *
 */


export class Logger {
  constructor(moduleName, logLevelConfig = globalLogLevelConfig) {
    _defineProperty(this, "_moduleName", void 0);

    _defineProperty(this, "_logLevel", void 0);

    this._moduleName = moduleName;
    this._logLevel = typeof logLevelConfig === 'number' ? logLevelConfig : typeof logLevelConfig === 'string' ? LogLevels[logLevelConfig] || LogLevels.NONE : getModuleLogLevel(logLevelConfig, moduleName);
  }

  createInstance(logLevelConfig = this._logLevel) {
    return new Logger(this._moduleName, logLevelConfig);
  }

  setLogLevel(logLevel) {
    if (typeof logLevel === 'string') {
      this._logLevel = LogLevels[logLevel] || LogLevels.NONE;
    } else {
      this._logLevel = logLevel;
    }
  }

  log(logLevel, ...messages) {
    if (this._logLevel <= logLevel) {
      const msgs = [`${LogLevelLabels[logLevel]}\t[${this._moduleName}] `, ...messages];

      if (logLevel < LogLevels.ERROR) {
        console.log(...msgs); // eslint-disable-line no-console
      } else {
        console.error(...msgs); // eslint-disable-line no-console
      }
    }
  }

  debug(...messages) {
    this.log(LogLevels.DEBUG, ...messages);
  }

  info(...messages) {
    this.log(LogLevels.INFO, ...messages);
  }

  warn(...messages) {
    this.log(LogLevels.WARN, ...messages);
  }

  error(...messages) {
    this.log(LogLevels.ERROR, ...messages);
  }

  fatal(...messages) {
    this.log(LogLevels.FATAL, ...messages);
  }

}
const loggers = {};
/**
 *
 */

export function getLogger(moduleName) {
  const logger = loggers[moduleName] || new Logger(moduleName);
  loggers[moduleName] = logger;
  return logger;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
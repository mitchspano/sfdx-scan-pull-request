import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.iterator";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";

var _ref, _process$env$HTTPS_PR;

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 *
 */
import request, { setDefaults } from './request';
import { StreamPromise } from './util/promise';
import jsonp from './browser/jsonp';
import canvas from './browser/canvas';
/**
 * Normarize Salesforce API host name
 * @private
 */

function normalizeApiHost(apiHost) {
  const m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);

  if (m) {
    return `${m[1]}.salesforce.com`;
  }

  return apiHost;
}

setDefaults({
  httpProxy: (_ref = (_process$env$HTTPS_PR = process.env.HTTPS_PROXY) !== null && _process$env$HTTPS_PR !== void 0 ? _process$env$HTTPS_PR : process.env.HTTP_PROXY) !== null && _ref !== void 0 ? _ref : undefined,
  timeout: process.env.HTTP_TIMEOUT ? _parseInt(process.env.HTTP_TIMEOUT, 10) : undefined
});
const baseUrl = typeof window !== 'undefined' && window.location && window.location.host ? `https://${normalizeApiHost(window.location.host)}` : process.env.LOCATION_BASE_URL || '';
/**
 * Class for HTTP request transport
 *
 * @class
 * @protected
 */

export class Transport {
  /**
   */
  httpRequest(req, options = {}) {
    return StreamPromise.create(() => {
      const createStream = this.getRequestStreamCreator();
      const stream = createStream(req, options);
      const promise = new _Promise((resolve, reject) => {
        stream.on('complete', res => resolve(res)).on('error', reject);
      });
      return {
        stream,
        promise
      };
    });
  }
  /**
   * @protected
   */


  getRequestStreamCreator() {
    return request;
  }

}
/**
 * Class for JSONP request transport
 */

export class JsonpTransport extends Transport {
  constructor(jsonpParam) {
    super();

    _defineProperty(this, "_jsonpParam", void 0);

    this._jsonpParam = jsonpParam;
  }

  getRequestStreamCreator() {
    const jsonpRequest = jsonp.createRequest(this._jsonpParam);
    return params => jsonpRequest(params);
  }

}
/**
 * Class for Sfdc Canvas request transport
 */

_defineProperty(JsonpTransport, "supprted", jsonp.supported);

export class CanvasTransport extends Transport {
  constructor(signedRequest) {
    super();

    _defineProperty(this, "_signedRequest", void 0);

    this._signedRequest = signedRequest;
  }

  getRequestStreamCreator() {
    const canvasRequest = canvas.createRequest(this._signedRequest);
    return params => canvasRequest(params);
  }

}
/* @private */

_defineProperty(CanvasTransport, "supported", canvas.supported);

function createXdProxyRequest(req, proxyUrl) {
  const headers = {
    'salesforceproxy-endpoint': req.url
  };

  if (req.headers) {
    for (const name of _Object$keys(req.headers)) {
      headers[name] = req.headers[name];
    }
  }

  const nocache = `${_Date$now()}.${String(Math.random()).substring(2)}`;
  return _objectSpread({
    method: req.method,
    url: `${proxyUrl}?${nocache}`,
    headers
  }, req.body != null ? {
    body: req.body
  } : {});
}
/**
 * Class for HTTP request transport using cross-domain AJAX proxy service
 */


export class XdProxyTransport extends Transport {
  constructor(xdProxyUrl) {
    super();

    _defineProperty(this, "_xdProxyUrl", void 0);

    this._xdProxyUrl = xdProxyUrl;
  }
  /**
   * Make HTTP request via AJAX proxy
   */


  httpRequest(req, _options = {}) {
    const xdProxyUrl = this._xdProxyUrl;

    const {
      url,
      body
    } = req,
          rreq = _objectWithoutProperties(req, ["url", "body"]);

    const canonicalUrl = _indexOfInstanceProperty(url).call(url, '/') === 0 ? baseUrl + url : url;
    const xdProxyReq = createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
      url: canonicalUrl,
      body
    }), xdProxyUrl);
    return super.httpRequest(xdProxyReq, {
      followRedirect: redirectUrl => createXdProxyRequest(_objectSpread(_objectSpread({}, rreq), {}, {
        method: 'GET',
        url: redirectUrl
      }), xdProxyUrl)
    });
  }

}
/**
 * Class for HTTP request transport using a proxy server
 */

export class HttpProxyTransport extends Transport {
  constructor(httpProxy) {
    super();

    _defineProperty(this, "_httpProxy", void 0);

    this._httpProxy = httpProxy;
  }
  /**
   * Make HTTP request via proxy server
   */


  httpRequest(req, options_ = {}) {
    const options = _objectSpread(_objectSpread({}, options_), {}, {
      httpProxy: this._httpProxy
    });

    return super.httpRequest(req, options);
  }

}
export default Transport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
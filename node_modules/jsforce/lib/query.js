"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _Object$defineProperties = require("@babel/runtime-corejs3/core-js-stable/object/define-properties");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors");

var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/for-each");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor");

var _filterInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/filter");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols");

var _Object$keys2 = require("@babel/runtime-corejs3/core-js-stable/object/keys");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.sort");

require("core-js/modules/es.promise");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.SubQuery = exports.Query = exports.ResponseTargets = void 0;

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/entries"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/objectWithoutProperties"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _sort = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/sort"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _events = require("events");

var _logger = require("./util/logger");

var _recordStream = _interopRequireWildcard(require("./record-stream"));

var _soqlBuilder = require("./soql-builder");

function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context13; _forEachInstanceProperty(_context13 = ownKeys(Object(source), true)).call(_context13, function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context14; _forEachInstanceProperty(_context14 = ownKeys(Object(source))).call(_context14, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

const ResponseTargetValues = ['QueryResult', 'Records', 'SingleRecord', 'Count'];
const ResponseTargets = (0, _reduce.default)(ResponseTargetValues).call(ResponseTargetValues, (values, target) => _objectSpread(_objectSpread({}, values), {}, {
  [target]: target
}), {});
exports.ResponseTargets = ResponseTargets;

/**
 *
 */
const DEFAULT_BULK_THRESHOLD = 200;
/**
 * Query
 */

class Query extends _events.EventEmitter {
  /**
   *
   */
  constructor(conn, config, options) {
    super();
    (0, _defineProperty2.default)(this, "_conn", void 0);
    (0, _defineProperty2.default)(this, "_logger", void 0);
    (0, _defineProperty2.default)(this, "_soql", void 0);
    (0, _defineProperty2.default)(this, "_locator", void 0);
    (0, _defineProperty2.default)(this, "_config", {});
    (0, _defineProperty2.default)(this, "_children", []);
    (0, _defineProperty2.default)(this, "_options", void 0);
    (0, _defineProperty2.default)(this, "_executed", false);
    (0, _defineProperty2.default)(this, "_finished", false);
    (0, _defineProperty2.default)(this, "_chaining", false);
    (0, _defineProperty2.default)(this, "_promise", void 0);
    (0, _defineProperty2.default)(this, "_stream", void 0);
    (0, _defineProperty2.default)(this, "totalSize", 0);
    (0, _defineProperty2.default)(this, "totalFetched", 0);
    (0, _defineProperty2.default)(this, "records", []);
    (0, _defineProperty2.default)(this, "offset", this.skip);
    (0, _defineProperty2.default)(this, "orderby", (0, _sort.default)(this));
    (0, _defineProperty2.default)(this, "exec", this.execute);
    (0, _defineProperty2.default)(this, "run", this.execute);
    (0, _defineProperty2.default)(this, "delete", this.destroy);
    (0, _defineProperty2.default)(this, "del", this.destroy);
    this._conn = conn;
    this._logger = conn._logLevel ? Query._logger.createInstance(conn._logLevel) : Query._logger;

    if (typeof config === 'string') {
      this._soql = config;

      this._logger.debug(`config is soql: ${config}`);
    } else if (typeof config.locator === 'string') {
      const locator = config.locator;

      this._logger.debug(`config is locator: ${locator}`);

      this._locator = (0, _includes.default)(locator).call(locator, '/') ? this.urlToLocator(locator) : locator;
    } else {
      this._logger.debug(`config is QueryConfig: ${config}`);

      const _ref = config,
            {
        fields,
        includes,
        sort
      } = _ref,
            _config = (0, _objectWithoutProperties2.default)(_ref, ["fields", "includes", "sort"]);

      this._config = _config;
      this.select(fields);

      if (includes) {
        this.includeChildren(includes);
      }

      if (sort) {
        var _context;

        (0, _sort.default)(_context = this).call(_context, sort);
      }
    }

    this._options = _objectSpread({
      headers: {},
      maxFetch: 10000,
      autoFetch: false,
      scanAll: false,
      responseTarget: 'QueryResult'
    }, options || {}); // promise instance

    this._promise = new _promise.default((resolve, reject) => {
      this.on('response', resolve);
      this.on('error', reject);
    });
    this._stream = new _recordStream.Serializable();
    this.on('record', record => this._stream.push(record));
    this.on('end', () => this._stream.push(null));
    this.on('error', err => {
      try {
        this._stream.emit('error', err);
      } catch (e) {// eslint-disable-line no-empty
      }
    });
  }
  /**
   * Select fields to include in the returning result
   */


  select(fields = '*') {
    if (this._soql) {
      throw Error('Cannot set select fields for the query which has already built SOQL.');
    }

    function toFieldArray(fields) {
      var _context2, _context3, _context4, _context5;

      return typeof fields === 'string' ? fields.split(/\s*,\s*/) : (0, _isArray.default)(fields) ? (0, _reduce.default)(_context2 = (0, _map.default)(_context3 = fields).call(_context3, toFieldArray)).call(_context2, (fs, f) => [...fs, ...f], []) : (0, _reduce.default)(_context4 = (0, _map.default)(_context5 = (0, _entries.default)(fields)).call(_context5, ([f, v]) => {
        if (typeof v === 'number' || typeof v === 'boolean') {
          return v ? [f] : [];
        } else {
          var _context6;

          return (0, _map.default)(_context6 = toFieldArray(v)).call(_context6, p => `${f}.${p}`);
        }
      })).call(_context4, (fs, f) => [...fs, ...f], []);
    }

    if (fields) {
      this._config.fields = toFieldArray(fields);
    } // force convert query record type without changing instance;


    return this;
  }
  /**
   * Set query conditions to filter the result records
   */


  where(conditions) {
    if (this._soql) {
      throw Error('Cannot set where conditions for the query which has already built SOQL.');
    }

    this._config.conditions = conditions;
    return this;
  }
  /**
   * Limit the returning result
   */


  limit(limit) {
    if (this._soql) {
      throw Error('Cannot set limit for the query which has already built SOQL.');
    }

    this._config.limit = limit;
    return this;
  }
  /**
   * Skip records
   */


  skip(offset) {
    if (this._soql) {
      throw Error('Cannot set skip/offset for the query which has already built SOQL.');
    }

    this._config.offset = offset;
    return this;
  }
  /**
   * Synonym of Query#skip()
   */


  sort(sort, dir) {
    if (this._soql) {
      throw Error('Cannot set sort for the query which has already built SOQL.');
    }

    if (typeof sort === 'string' && typeof dir !== 'undefined') {
      this._config.sort = [[sort, dir]];
    } else {
      this._config.sort = sort;
    }

    return this;
  }
  /**
   * Synonym of Query#sort()
   */


  include(childRelName, conditions, fields, options = {}) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }

    const childConfig = {
      fields: fields === null ? undefined : fields,
      table: childRelName,
      conditions: conditions === null ? undefined : conditions,
      limit: options.limit,
      offset: options.offset,
      sort: (0, _sort.default)(options)
    }; // eslint-disable-next-line no-use-before-define

    const childQuery = new SubQuery(this._conn, childRelName, childConfig, this);

    this._children.push(childQuery);

    return childQuery;
  }
  /**
   * Include child relationship queries, but not moving down to the children context
   */


  includeChildren(includes) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }

    for (const crname of (0, _keys.default)(includes)) {
      const _ref2 = includes[crname],
            {
        conditions,
        fields
      } = _ref2,
            options = (0, _objectWithoutProperties2.default)(_ref2, ["conditions", "fields"]);
      this.include(crname, conditions, fields, options);
    }

    return this;
  }
  /**
   * Setting maxFetch query option
   */


  maxFetch(maxFetch) {
    this._options.maxFetch = maxFetch;
    return this;
  }
  /**
   * Switching auto fetch mode
   */


  autoFetch(autoFetch) {
    this._options.autoFetch = autoFetch;
    return this;
  }
  /**
   * Set flag to scan all records including deleted and archived.
   */


  scanAll(scanAll) {
    this._options.scanAll = scanAll;
    return this;
  }
  /**
   *
   */


  setResponseTarget(responseTarget) {
    if (responseTarget in ResponseTargets) {
      this._options.responseTarget = responseTarget;
    } // force change query response target without changing instance


    return this;
  }
  /**
   * Execute query and fetch records from server.
   */


  execute(options_ = {}) {
    if (this._executed) {
      throw new Error('re-executing already executed query');
    }

    if (this._finished) {
      throw new Error('executing already closed query');
    }

    const options = {
      headers: options_.headers || this._options.headers,
      responseTarget: options_.responseTarget || this._options.responseTarget,
      autoFetch: options_.autoFetch || this._options.autoFetch,
      maxFetch: options_.maxFetch || this._options.maxFetch,
      scanAll: options_.scanAll || this._options.scanAll
    }; // collect fetched records in array
    // only when response target is Records and
    // either callback or chaining promises are available to this query.

    this.once('fetch', () => {
      if (options.responseTarget === ResponseTargets.Records && this._chaining) {
        this._logger.debug('--- collecting all fetched records ---');

        const records = [];

        const onRecord = record => records.push(record);

        this.on('record', onRecord);
        this.once('end', () => {
          this.removeListener('record', onRecord);
          this.emit('response', records, this);
        });
      }
    }); // flag to prevent re-execution

    this._executed = true;

    (async () => {
      // start actual query
      this._logger.debug('>>> Query start >>>');

      try {
        await this._execute(options);

        this._logger.debug('*** Query finished ***');
      } catch (error) {
        this._logger.debug('--- Query error ---', error);

        this.emit('error', error);
      }
    })(); // return Query instance for chaining


    return this;
  }
  /**
   * Synonym of Query#execute()
   */


  locatorToUrl() {
    return this._locator ? [this._conn._baseUrl(), '/query/', this._locator].join('') : '';
  }

  urlToLocator(url) {
    return url.split('/').pop();
  }

  constructResponse(rawDone, responseTarget) {
    var _this$records$, _this$records;

    switch (responseTarget) {
      case 'Count':
        return this.totalSize;

      case 'SingleRecord':
        return (_this$records$ = (_this$records = this.records) === null || _this$records === void 0 ? void 0 : _this$records[0]) !== null && _this$records$ !== void 0 ? _this$records$ : null;

      case 'Records':
        return this.records;
      // QueryResult is default response target

      default:
        return _objectSpread(_objectSpread({}, {
          records: this.records,
          totalSize: this.totalSize,
          done: rawDone !== null && rawDone !== void 0 ? rawDone : true // when no records, done is omitted

        }), this._locator ? {
          nextRecordsUrl: this.locatorToUrl()
        } : {});
    }
  }
  /**
   * @private
   */


  async _execute(options) {
    var _this$records2, _context7, _data$records$length, _data$records;

    const {
      headers,
      responseTarget,
      autoFetch,
      maxFetch,
      scanAll
    } = options;

    this._logger.debug('execute with options', options);

    let url;

    if (this._locator) {
      url = this.locatorToUrl();
    } else {
      const soql = await this.toSOQL();

      this._logger.debug(`SOQL = ${soql}`);

      url = [this._conn._baseUrl(), '/', scanAll ? 'queryAll' : 'query', '?q=', encodeURIComponent(soql)].join('');
    }

    const data = await this._conn.request({
      method: 'GET',
      url,
      headers
    });
    this.emit('fetch');
    this.totalSize = data.totalSize;
    this.records = (_this$records2 = this.records) === null || _this$records2 === void 0 ? void 0 : (0, _concat.default)(_this$records2).call(_this$records2, maxFetch - this.records.length > data.records.length ? data.records : (0, _slice.default)(_context7 = data.records).call(_context7, 0, maxFetch - this.records.length));
    this._locator = data.nextRecordsUrl ? this.urlToLocator(data.nextRecordsUrl) : undefined;
    this._finished = this._finished || data.done || !autoFetch || // this is what the response looks like when there are no results
    data.records.length === 0 && data.done === undefined; // streaming record instances

    const numRecords = (_data$records$length = (_data$records = data.records) === null || _data$records === void 0 ? void 0 : _data$records.length) !== null && _data$records$length !== void 0 ? _data$records$length : 0;
    let totalFetched = this.totalFetched;

    for (let i = 0; i < numRecords; i++) {
      if (totalFetched >= maxFetch) {
        this._finished = true;
        break;
      }

      const record = data.records[i];
      this.emit('record', record, totalFetched, this);
      totalFetched += 1;
    }

    this.totalFetched = totalFetched;

    if (this._finished) {
      const response = this.constructResponse(data.done, responseTarget); // only fire response event when it should be notified per fetch

      if (responseTarget !== ResponseTargets.Records) {
        this.emit('response', response, this);
      }

      this.emit('end');
      return response;
    } else {
      return this._execute(options);
    }
  }
  /**
   * Obtain readable stream instance
   */


  stream(type = 'csv') {
    if (!this._finished && !this._executed) {
      this.execute({
        autoFetch: true
      });
    }

    return type === 'record' ? this._stream : this._stream.stream(type);
  }
  /**
   * Pipe the queried records to another stream
   * This is for backward compatibility; Query is not a record stream instance anymore in 2.0.
   * If you want a record stream instance, use `Query#stream('record')`.
   */


  pipe(stream) {
    return this.stream('record').pipe(stream);
  }
  /**
   * @protected
   */


  async _expandFields(sobject_) {
    var _context8, _context9, _context10;

    if (this._soql) {
      throw new Error('Cannot expand fields for the query which has already built SOQL.');
    }

    const {
      fields = [],
      table = ''
    } = this._config;
    const sobject = sobject_ || table;

    this._logger.debug(`_expandFields: sobject = ${sobject}, fields = ${fields.join(', ')}`);

    const [efields] = await _promise.default.all([this._expandAsteriskFields(sobject, fields), ...(0, _map.default)(_context8 = this._children).call(_context8, async childQuery => {
      await childQuery._expandFields();
      return [];
    })]);
    this._config.fields = efields;
    this._config.includes = (0, _reduce.default)(_context9 = (0, _map.default)(_context10 = this._children).call(_context10, cquery => {
      const cconfig = cquery._query._config;
      return [cconfig.table, cconfig];
    })).call(_context9, (includes, [ctable, cconfig]) => _objectSpread(_objectSpread({}, includes), {}, {
      [ctable]: cconfig
    }), {});
  }
  /**
   *
   */


  async _findRelationObject(relName) {
    const table = this._config.table;

    if (!table) {
      throw new Error('No table information provided in the query');
    }

    this._logger.debug(`finding table for relation "${relName}" in "${table}"...`);

    const sobject = await this._conn.describe$(table);
    const upperRname = relName.toUpperCase();

    for (const cr of sobject.childRelationships) {
      if ((cr.relationshipName || '').toUpperCase() === upperRname && cr.childSObject) {
        return cr.childSObject;
      }
    }

    throw new Error(`No child relationship found: ${relName}`);
  }
  /**
   *
   */


  async _expandAsteriskFields(sobject, fields) {
    const expandedFields = await _promise.default.all((0, _map.default)(fields).call(fields, async field => this._expandAsteriskField(sobject, field)));
    return (0, _reduce.default)(expandedFields).call(expandedFields, (eflds, flds) => [...eflds, ...flds], []);
  }
  /**
   *
   */


  async _expandAsteriskField(sobject, field) {
    this._logger.debug(`expanding field "${field}" in "${sobject}"...`);

    const fpath = field.split('.');

    if (fpath[fpath.length - 1] === '*') {
      var _context11;

      const so = await this._conn.describe$(sobject);

      this._logger.debug(`table ${sobject} has been described`);

      if (fpath.length > 1) {
        const rname = fpath.shift();

        for (const f of so.fields) {
          if (f.relationshipName && rname && f.relationshipName.toUpperCase() === rname.toUpperCase()) {
            const rfield = f;
            const referenceTo = rfield.referenceTo || [];
            const rtable = referenceTo.length === 1 ? referenceTo[0] : 'Name';
            const fpaths = await this._expandAsteriskField(rtable, fpath.join('.'));
            return (0, _map.default)(fpaths).call(fpaths, fp => `${rname}.${fp}`);
          }
        }

        return [];
      }

      return (0, _map.default)(_context11 = so.fields).call(_context11, f => f.name);
    }

    return [field];
  }
  /**
   * Explain plan for executing query
   */


  async explain() {
    const soql = await this.toSOQL();

    this._logger.debug(`SOQL = ${soql}`);

    const url = `/query/?explain=${encodeURIComponent(soql)}`;
    return this._conn.request(url);
  }
  /**
   * Return SOQL expression for the query
   */


  async toSOQL() {
    if (this._soql) {
      return this._soql;
    }

    await this._expandFields();
    return (0, _soqlBuilder.createSOQL)(this._config);
  }
  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for query result
   */


  then(onResolve, onReject) {
    this._chaining = true;

    if (!this._finished && !this._executed) {
      this.execute();
    }

    if (!this._promise) {
      throw new Error('invalid state: promise is not set after query execution');
    }

    return this._promise.then(onResolve, onReject);
  }

  catch(onReject) {
    return this.then(null, onReject);
  }

  promise() {
    return _promise.default.resolve(this);
  }
  /**
   * Bulk delete queried records
   */


  destroy(type, options) {
    if (typeof type === 'object' && type !== null) {
      options = type;
      type = undefined;
    }

    options = options || {};
    const type_ = type || this._config.table;

    if (!type_) {
      throw new Error('SOQL based query needs SObject type information to bulk delete.');
    } // Set the threshold number to pass to bulk API


    const thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold : // determine threshold if the connection version supports SObject collection API or not
    this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
    return new _promise.default((resolve, reject) => {
      const createBatch = () => this._conn.sobject(type_).deleteBulk().on('response', resolve).on('error', reject);

      let records = [];
      let batch = null;

      const handleRecord = rec => {
        if (!rec.Id) {
          const err = new Error('Queried record does not include Salesforce record ID.');
          this.emit('error', err);
          return;
        }

        const record = {
          Id: rec.Id
        };

        if (batch) {
          batch.write(record);
        } else {
          records.push(record);

          if (thresholdNum >= 0 && records.length > thresholdNum) {
            // Use bulk delete instead of SObject REST API
            batch = createBatch();

            for (const record of records) {
              batch.write(record);
            }

            records = [];
          }
        }
      };

      const handleEnd = () => {
        if (batch) {
          batch.end();
        } else {
          const ids = (0, _map.default)(records).call(records, record => record.Id);

          this._conn.sobject(type_).destroy(ids, {
            allowRecursive: true
          }).then(resolve, reject);
        }
      };

      this.stream('record').on('data', handleRecord).on('end', handleEnd).on('error', reject);
    });
  }
  /**
   * Synonym of Query#destroy()
   */


  update(mapping, type, options) {
    if (typeof type === 'object' && type !== null) {
      options = type;
      type = undefined;
    }

    options = options || {};
    const type_ = type || this._config && this._config.table;

    if (!type_) {
      throw new Error('SOQL based query needs SObject type information to bulk update.');
    }

    const updateStream = typeof mapping === 'function' ? (0, _map.default)(_recordStream.default).call(_recordStream.default, mapping) : _recordStream.default.recordMapStream(mapping); // Set the threshold number to pass to bulk API

    const thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold : // determine threshold if the connection version supports SObject collection API or not
    this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
    return new _promise.default((resolve, reject) => {
      const createBatch = () => this._conn.sobject(type_).updateBulk().on('response', resolve).on('error', reject);

      let records = [];
      let batch = null;

      const handleRecord = record => {
        if (batch) {
          batch.write(record);
        } else {
          records.push(record);
        }

        if (thresholdNum >= 0 && records.length > thresholdNum) {
          // Use bulk update instead of SObject REST API
          batch = createBatch();

          for (const record of records) {
            batch.write(record);
          }

          records = [];
        }
      };

      const handleEnd = () => {
        if (batch) {
          batch.end();
        } else {
          this._conn.sobject(type_).update(records, {
            allowRecursive: true
          }).then(resolve, reject);
        }
      };

      this.stream('record').on('error', reject).pipe(updateStream).on('data', handleRecord).on('end', handleEnd).on('error', reject);
    });
  }

}
/*--------------------------------------------*/

/**
 * SubQuery object for representing child relationship query
 */


exports.Query = Query;
(0, _defineProperty2.default)(Query, "_logger", (0, _logger.getLogger)('query'));

class SubQuery {
  /**
   *
   */
  constructor(conn, relName, config, parent) {
    (0, _defineProperty2.default)(this, "_relName", void 0);
    (0, _defineProperty2.default)(this, "_query", void 0);
    (0, _defineProperty2.default)(this, "_parent", void 0);
    (0, _defineProperty2.default)(this, "offset", this.skip);
    (0, _defineProperty2.default)(this, "orderby", (0, _sort.default)(this));
    this._relName = relName;
    this._query = new Query(conn, config);
    this._parent = parent;
  }
  /**
   *
   */


  select(fields) {
    // force convert query record type without changing instance
    this._query = this._query.select(fields);
    return this;
  }
  /**
   *
   */


  where(conditions) {
    this._query = this._query.where(conditions);
    return this;
  }
  /**
   * Limit the returning result
   */


  limit(limit) {
    this._query = this._query.limit(limit);
    return this;
  }
  /**
   * Skip records
   */


  skip(offset) {
    this._query = this._query.skip(offset);
    return this;
  }
  /**
   * Synonym of SubQuery#skip()
   */


  sort(sort, dir) {
    var _context12;

    this._query = (0, _sort.default)(_context12 = this._query).call(_context12, sort, dir);
    return this;
  }
  /**
   * Synonym of SubQuery#sort()
   */


  /**
   *
   */
  async _expandFields() {
    const sobject = await this._parent._findRelationObject(this._relName);
    return this._query._expandFields(sobject);
  }
  /**
   * Back the context to parent query object
   */


  end() {
    return this._parent;
  }

}

exports.SubQuery = SubQuery;
var _default = Query;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
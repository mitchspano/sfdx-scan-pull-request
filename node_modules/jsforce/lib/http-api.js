"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.HttpApi = void 0;

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/date/now"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _events = require("events");

var _xml2js = _interopRequireDefault(require("xml2js"));

var _logger = require("./util/logger");

var _promise = require("./util/promise");

var _csv = require("./csv");

var _stream = require("./util/stream");

/**
 *
 */

/** @private */
function parseJSON(str) {
  return JSON.parse(str);
}
/** @private */


async function parseXML(str) {
  return _xml2js.default.parseStringPromise(str, {
    explicitArray: false
  });
}
/** @private */


function parseText(str) {
  return str;
}
/**
 * HTTP based API class with authorization hook
 */


class HttpApi extends _events.EventEmitter {
  constructor(conn, options) {
    super();
    (0, _defineProperty2.default)(this, "_conn", void 0);
    (0, _defineProperty2.default)(this, "_logger", void 0);
    (0, _defineProperty2.default)(this, "_transport", void 0);
    (0, _defineProperty2.default)(this, "_responseType", void 0);
    (0, _defineProperty2.default)(this, "_noContentResponse", void 0);
    this._conn = conn;
    this._logger = conn._logLevel ? HttpApi._logger.createInstance(conn._logLevel) : HttpApi._logger;
    this._responseType = options.responseType;
    this._transport = options.transport || conn._transport;
    this._noContentResponse = options.noContentResponse;
  }
  /**
   * Callout to API endpoint using http
   */


  request(request) {
    return _promise.StreamPromise.create(() => {
      const {
        stream,
        setStream
      } = (0, _stream.createLazyStream)();

      const promise = (async () => {
        const refreshDelegate = this.getRefreshDelegate();
        /* TODO decide remove or not this section */

        /*
        // remember previous instance url in case it changes after a refresh
        const lastInstanceUrl = conn.instanceUrl;
         // check to see if the token refresh has changed the instance url
        if(lastInstanceUrl !== conn.instanceUrl){
          // if the instance url has changed
          // then replace the current request urls instance url fragment
          // with the updated instance url
          request.url = request.url.replace(lastInstanceUrl,conn.instanceUrl);
        }
        */

        if (refreshDelegate && refreshDelegate.isRefreshing()) {
          await refreshDelegate.waitRefresh();
          const bodyPromise = this.request(request);
          setStream(bodyPromise.stream());
          const body = await bodyPromise;
          return body;
        } // hook before sending


        this.beforeSend(request);
        this.emit('request', request);

        this._logger.debug(`<request> method=${request.method}, url=${request.url}`);

        const requestTime = (0, _now.default)();

        const requestPromise = this._transport.httpRequest(request);

        setStream(requestPromise.stream());
        let response;

        try {
          response = await requestPromise;
        } catch (err) {
          this._logger.error(err);

          throw err;
        } finally {
          const responseTime = (0, _now.default)();

          this._logger.debug(`elapsed time: ${responseTime - requestTime} msec`);
        }

        if (!response) {
          return;
        }

        this._logger.debug(`<response> status=${String(response.statusCode)}, url=${request.url}`);

        this.emit('response', response); // Refresh token if session has been expired and requires authentication
        // when session refresh delegate is available

        if (this.isSessionExpired(response) && refreshDelegate) {
          await refreshDelegate.refresh(requestTime);
          return this.request(request);
        }

        if (this.isErrorResponse(response)) {
          const err = await this.getError(response);
          throw err;
        }

        const body = await this.getResponseBody(response);
        return body;
      })();

      return {
        stream,
        promise
      };
    });
  }
  /**
   * @protected
   */


  getRefreshDelegate() {
    return this._conn._refreshDelegate;
  }
  /**
   * @protected
   */


  beforeSend(request) {
    /* eslint-disable no-param-reassign */
    const headers = request.headers || {};

    if (this._conn.accessToken) {
      headers.Authorization = `Bearer ${this._conn.accessToken}`;
    }

    if (this._conn._callOptions) {
      const callOptions = [];

      for (const name of (0, _keys.default)(this._conn._callOptions)) {
        callOptions.push(`${name}=${this._conn._callOptions[name]}`);
      }

      headers['Sforce-Call-Options'] = callOptions.join(', ');
    }

    request.headers = headers;
  }
  /**
   * Detect response content mime-type
   * @protected
   */


  getResponseContentType(response) {
    return this._responseType || response.headers && response.headers['content-type'];
  }
  /**
   * @private
   */


  async parseResponseBody(response) {
    const contentType = this.getResponseContentType(response) || '';
    const parseBody = /^(text|application)\/xml(;|$)/.test(contentType) ? parseXML : /^application\/json(;|$)/.test(contentType) ? parseJSON : /^text\/csv(;|$)/.test(contentType) ? _csv.parseCSV : parseText;

    try {
      return parseBody(response.body);
    } catch (e) {
      return response.body;
    }
  }
  /**
   * Get response body
   * @protected
   */


  async getResponseBody(response) {
    if (response.statusCode === 204) {
      // No Content
      return this._noContentResponse;
    }

    const body = await this.parseResponseBody(response);
    let err;

    if (this.hasErrorInResponseBody(body)) {
      err = await this.getError(response, body);
      throw err;
    }

    if (response.statusCode === 300) {
      // Multiple Choices
      throw new HttpApiError('Multiple records found', 'MULTIPLE_CHOICES', body);
    }

    return body;
  }
  /**
   * Detect session expiry
   * @protected
   */


  isSessionExpired(response) {
    return response.statusCode === 401;
  }
  /**
   * Detect error response
   * @protected
   */


  isErrorResponse(response) {
    return response.statusCode >= 400;
  }
  /**
   * Detect error in response body
   * @protected
   */


  hasErrorInResponseBody(_body) {
    return false;
  }
  /**
   * Parsing error message in response
   * @protected
   */


  parseError(body) {
    const errors = body;
    return (0, _isArray.default)(errors) ? errors[0] : errors;
  }
  /**
   * Get error message in response
   * @protected
   */


  async getError(response, body) {
    let error;

    try {
      error = this.parseError(body || (await this.parseResponseBody(response)));
    } catch (e) {// eslint-disable no-empty
    }

    error = typeof error === 'object' && error !== null && typeof error.message === 'string' ? error : {
      errorCode: `ERROR_HTTP_${response.statusCode}`,
      message: response.body
    };
    return new HttpApiError(error.message, error.errorCode);
  }

}
/**
 *
 */


exports.HttpApi = HttpApi;
(0, _defineProperty2.default)(HttpApi, "_logger", (0, _logger.getLogger)('http-api'));

class HttpApiError extends Error {
  constructor(message, errorCode, content) {
    super(message);
    (0, _defineProperty2.default)(this, "errorCode", void 0);
    (0, _defineProperty2.default)(this, "content", void 0);
    this.name = errorCode || this.name;
    this.errorCode = this.name;
    this.content = content;
  }

}

var _default = HttpApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.replace");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = exports.Repl = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _getPrototypeOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-prototype-of"));

var _getOwnPropertyNames = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-names"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _events = require("events");

var _repl = require("repl");

var _stream = require("stream");

var _ = _interopRequireDefault(require(".."));

var _function = require("../util/function");

/**
 * @file Creates REPL interface with built in Salesforce API objects and automatically resolves promise object
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 * @private
 */

/**
 * Intercept the evaled value returned from repl evaluator, convert and send back to output.
 * @private
 */
function injectBefore(replServer, method, beforeFn) {
  const _orig = replServer[method];

  replServer[method] = (...args) => {
    const callback = args.pop();
    beforeFn.apply(null, (0, _concat.default)(args).call(args, (err, res) => {
      if (err || res) {
        callback(err, res);
      } else {
        _orig.apply(replServer, (0, _concat.default)(args).call(args, callback));
      }
    }));
  };

  return replServer;
}
/**
 * @private
 */


function injectAfter(replServer, method, afterFn) {
  const _orig = replServer[method];

  replServer[method] = (...args) => {
    const callback = args.pop();

    _orig.apply(replServer, (0, _concat.default)(args).call(args, (...args) => {
      try {
        afterFn.apply(null, (0, _concat.default)(args).call(args, callback));
      } catch (e) {
        callback(e);
      }
    }));
  };

  return replServer;
}
/**
 * When the result was "promise", resolve its value
 * @private
 */


function promisify(err, value, callback) {
  // callback immediately if no value passed
  if (!callback && (0, _function.isFunction)(value)) {
    callback = value;
    return callback();
  }

  if (err) {
    throw err;
  }

  if ((0, _function.isPromiseLike)(value)) {
    value.then(v => {
      callback(null, v);
    }, err => {
      callback(err);
    });
  } else {
    callback(null, value);
  }
}
/**
 * Output object to stdout in JSON representation
 * @private
 */


function outputToStdout(prettyPrint) {
  if (prettyPrint && !(0, _function.isNumber)(prettyPrint)) {
    prettyPrint = 4;
  }

  return (err, value, callback) => {
    if (err) {
      console.error(err);
    } else {
      const str = (0, _stringify.default)(value, null, prettyPrint);
      console.log(str);
    }

    callback(err, value);
  };
}
/**
 * define get accessor using Object.defineProperty
 * @private
 */


function defineProp(obj, prop, getter) {
  if (_defineProperty3.default) {
    (0, _defineProperty3.default)(obj, prop, {
      get: getter
    });
  }
}
/**
 *
 */


class Repl {
  constructor(cli) {
    (0, _defineProperty2.default)(this, "_cli", void 0);
    (0, _defineProperty2.default)(this, "_in", void 0);
    (0, _defineProperty2.default)(this, "_out", void 0);
    (0, _defineProperty2.default)(this, "_interactive", true);
    (0, _defineProperty2.default)(this, "_paused", false);
    (0, _defineProperty2.default)(this, "_replServer", undefined);
    this._cli = cli;
    this._in = new _stream.Transform();
    this._out = new _stream.Transform();

    this._in._transform = (chunk, encoding, callback) => {
      if (!this._paused) {
        this._in.push(chunk);
      }

      callback();
    };

    this._out._transform = (chunk, encoding, callback) => {
      if (!this._paused && this._interactive !== false) {
        this._out.push(chunk);
      }

      callback();
    };
  }
  /**
   *
   */


  start(options = {}) {
    this._interactive = options.interactive !== false;
    process.stdin.resume();

    if (process.stdin.setRawMode) {
      process.stdin.setRawMode(true);
    }

    process.stdin.pipe(this._in);

    this._out.pipe(process.stdout);

    defineProp(this._out, 'columns', () => process.stdout.columns);
    this._replServer = (0, _repl.start)({
      input: this._in,
      output: this._out,
      terminal: true
    });

    this._defineAdditionalCommands();

    this._replServer = injectBefore(this._replServer, 'completer', (line, callback) => {
      this.complete(line).then(rets => {
        callback(null, rets);
      }).catch(err => {
        callback(err);
      });
    });
    this._replServer = injectAfter(this._replServer, 'eval', promisify);

    if (options.interactive === false) {
      this._replServer = injectAfter(this._replServer, 'eval', outputToStdout(options.prettyPrint));
      this._replServer = injectAfter(this._replServer, 'eval', function () {
        process.exit();
      });
    }

    this._replServer.on('exit', () => process.exit());

    this._defineBuiltinVars(this._replServer.context);

    if (options.evalScript) {
      this._in.write(options.evalScript + '\n', 'utf-8');
    }

    return this;
  }
  /**
   *
   */


  _defineAdditionalCommands() {
    const cli = this._cli;
    const replServer = this._replServer;

    if (!replServer) {
      return;
    }

    replServer.defineCommand('connections', {
      help: 'List currenty registered Salesforce connections',
      action: async () => {
        await cli.listConnections();
        replServer.displayPrompt();
      }
    });
    replServer.defineCommand('connect', {
      help: 'Connect to Salesforce instance',
      action: async (...args) => {
        const [name, password] = args;
        const params = password ? {
          connection: name,
          username: name,
          password: password
        } : {
          connection: name,
          username: name
        };

        try {
          await cli.connect(params);
        } catch (err) {
          if (err instanceof Error) {
            console.error(err.message);
          }
        }

        replServer.displayPrompt();
      }
    });
    replServer.defineCommand('disconnect', {
      help: 'Disconnect connection and erase it from registry',
      action: name => {
        cli.disconnect(name);
        replServer.displayPrompt();
      }
    });
    replServer.defineCommand('use', {
      help: 'Specify login server to establish connection',
      action: loginServer => {
        cli.setLoginServer(loginServer);
        replServer.displayPrompt();
      }
    });
    replServer.defineCommand('authorize', {
      help: 'Connect to Salesforce using OAuth2 authorization flow',
      action: async clientName => {
        try {
          await cli.authorize(clientName);
        } catch (err) {
          if (err instanceof Error) {
            console.error(err.message);
          }
        }

        replServer.displayPrompt();
      }
    });
    replServer.defineCommand('register', {
      help: 'Register OAuth2 client information',
      action: async (...args) => {
        const [clientName, clientId, clientSecret, redirectUri, loginUrl] = args;
        const config = {
          clientId,
          clientSecret,
          redirectUri,
          loginUrl
        };

        try {
          await cli.register(clientName, config);
        } catch (err) {
          if (err instanceof Error) {
            console.error(err.message);
          }
        }

        replServer.displayPrompt();
      }
    });
    replServer.defineCommand('open', {
      help: 'Open Salesforce web page using established connection',
      action: url => {
        cli.openUrlUsingSession(url);
        replServer.displayPrompt();
      }
    });
  }
  /**
   *
   */


  pause() {
    this._paused = true;

    if (process.stdin.setRawMode) {
      process.stdin.setRawMode(false);
    }
  }
  /**
   *
   */


  resume() {
    this._paused = false;
    process.stdin.resume();

    if (process.stdin.setRawMode) {
      process.stdin.setRawMode(true);
    }
  }
  /**
   *
   */


  async complete(line) {
    const tokens = line.replace(/^\s+/, '').split(/\s+/);
    const [command, keyword = ''] = tokens;

    if (command[0] === '.' && tokens.length === 2) {
      let candidates = [];

      if (command === '.connect' || command === '.disconnect') {
        candidates = await this._cli.getConnectionNames();
      } else if (command === '.authorize') {
        candidates = await this._cli.getClientNames();
      } else if (command === '.use') {
        candidates = ['production', 'sandbox'];
      }

      candidates = (0, _filter.default)(candidates).call(candidates, name => (0, _indexOf.default)(name).call(name, keyword) === 0);
      return [candidates, keyword];
    }
  }
  /**
   * Map all jsforce object to REPL context
   * @private
   */


  _defineBuiltinVars(context) {
    const cli = this._cli; // define salesforce package root objects

    for (const key in _.default) {
      if (Object.prototype.hasOwnProperty.call(_.default, key) && !global[key]) {
        context[key] = _.default[key];
      }
    } // expose jsforce package root object in context.


    context.jsforce = _.default;

    function createProxyFunc(prop) {
      return (...args) => {
        const conn = cli.getCurrentConnection();
        return conn[prop](...args);
      };
    }

    function createProxyAccessor(prop) {
      return () => {
        const conn = cli.getCurrentConnection();
        return conn[prop];
      };
    }

    const conn = cli.getCurrentConnection(); // list all props in connection instance, other than EventEmitter or object built-in methods

    const props = {};
    let o = conn;

    while (o && o !== _events.EventEmitter.prototype && o !== Object.prototype) {
      for (const p of (0, _getOwnPropertyNames.default)(o)) {
        if (p !== 'constructor') {
          props[p] = true;
        }
      }

      o = (0, _getPrototypeOf.default)(o);
    }

    for (const prop of (0, _keys.default)(props)) {
      if (typeof global[prop] !== 'undefined') {
        // avoid global override
        continue;
      }

      if ((0, _indexOf.default)(prop).call(prop, '_') === 0) {
        // ignore private
        continue;
      }

      if ((0, _function.isFunction)(conn[prop])) {
        context[prop] = createProxyFunc(prop);
      } else if ((0, _function.isObject)(conn[prop])) {
        defineProp(context, prop, createProxyAccessor(prop));
      }
    } // expose default connection as "$conn"


    defineProp(context, '$conn', () => {
      return cli.getCurrentConnection();
    });
  }

}

exports.Repl = Repl;
var _default = Repl;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
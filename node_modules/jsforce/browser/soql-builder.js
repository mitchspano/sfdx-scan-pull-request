import "core-js/modules/es.array.join";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.split";
import _sortInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/sort";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _Object$values from "@babel/runtime-corejs3/core-js-stable/object/values";

/**
 * @file Create and build SOQL string from configuration
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import SfDate from './date';

/** @private **/
function escapeSOQLString(str) {
  return String(str || '').replace(/'/g, "\\'");
}
/** @private **/


function createFieldsClause(fields) {
  var _context;

  var childQueries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var cqueries = _Object$values(childQueries); // eslint-disable-next-line no-use-before-define


  return _concatInstanceProperty(_context = []).call(_context, _toConsumableArray(fields || ['Id']), _toConsumableArray(_mapInstanceProperty(cqueries).call(cqueries, function (cquery) {
    return "(".concat(createSOQL(cquery), ")");
  }))).join(', ');
}
/** @private **/


function createValueExpression(value) {
  if (_Array$isArray(value)) {
    return value.length > 0 ? "(".concat(_mapInstanceProperty(value).call(value, createValueExpression).join(', '), ")") : undefined;
  }

  if (value instanceof SfDate) {
    return value.toString();
  }

  if (typeof value === 'string') {
    return "'".concat(escapeSOQLString(value), "'");
  }

  if (typeof value === 'number') {
    return value.toString();
  }

  if (value === null) {
    return 'null';
  }

  return value;
}

var opMap = {
  '=': '=',
  $eq: '=',
  '!=': '!=',
  $ne: '!=',
  '>': '>',
  $gt: '>',
  '<': '<',
  $lt: '<',
  '>=': '>=',
  $gte: '>=',
  '<=': '<=',
  $lte: '<=',
  $like: 'LIKE',
  $nlike: 'NOT LIKE',
  $in: 'IN',
  $nin: 'NOT IN',
  $includes: 'INCLUDES',
  $excludes: 'EXCLUDES',
  $exists: 'EXISTS'
};
/** @private **/

function createFieldExpression(field, value) {
  var op = '$eq';
  var _value = value; // Assume the `$in` operator if value is an array and none was supplied.

  if (_Array$isArray(value)) {
    op = '$in';
  } else if (_typeof(value) === 'object' && value !== null) {
    // Otherwise, if an object was passed then process the supplied ops.
    for (var _i = 0, _Object$keys = _Object$keys2(value); _i < _Object$keys.length; _i++) {
      var k = _Object$keys[_i];

      if (k[0] === '$') {
        op = k;
        _value = value[k];
        break;
      }
    }
  }

  var sfop = opMap[op];

  if (!sfop || typeof _value === 'undefined') {
    return null;
  }

  var valueExpr = createValueExpression(_value);

  if (typeof valueExpr === 'undefined') {
    return null;
  }

  switch (sfop) {
    case 'NOT LIKE':
      return "(".concat(['NOT', field, 'LIKE', valueExpr].join(' '), ")");

    case 'EXISTS':
      return [field, _value ? '!=' : '=', 'null'].join(' ');

    default:
      return [field, sfop, valueExpr].join(' ');
  }
}
/** @private **/


function createOrderByClause() {
  var sort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _sort = [];

  if (typeof sort === 'string') {
    var _context2;

    if (/,|\s+(asc|desc)\s*$/.test(sort)) {
      // must be specified in pure "order by" clause. Return raw config.
      return sort;
    } // sort order in mongoose-style expression.
    // e.g. "FieldA -FieldB" => "ORDER BY FieldA ASC, FieldB DESC"


    _sort = _mapInstanceProperty(_context2 = sort.split(/\s+/)).call(_context2, function (field) {
      var dir = 'ASC'; // ascending

      var flag = field[0];

      if (flag === '-') {
        dir = 'DESC';
        field = field.substring(1); // eslint-disable-line no-param-reassign
      } else if (flag === '+') {
        field = field.substring(1); // eslint-disable-line no-param-reassign
      }

      return [field, dir];
    });
  } else if (_Array$isArray(sort)) {
    _sort = sort;
  } else {
    var _context3;

    _sort = _mapInstanceProperty(_context3 = _Object$entries(sort)).call(_context3, function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          field = _ref2[0],
          dir = _ref2[1];

      return [field, dir];
    });
  }

  return _mapInstanceProperty(_sort).call(_sort, function (_ref3) {
    var _context4;

    var _ref4 = _slicedToArray(_ref3, 2),
        field = _ref4[0],
        dir = _ref4[1];

    /* eslint-disable no-param-reassign */
    switch (String(dir)) {
      case 'DESC':
      case 'desc':
      case 'descending':
      case '-':
      case '-1':
        dir = 'DESC';
        break;

      default:
        dir = 'ASC';
    }

    return _concatInstanceProperty(_context4 = "".concat(field, " ")).call(_context4, dir);
  }).join(', ');
}

/** @private **/
function createConditionClause() {
  var _context7;

  var conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var operator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'AND';
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (typeof conditions === 'string') {
    return conditions;
  }

  var conditionList = [];

  if (!_Array$isArray(conditions)) {
    var _context5;

    // if passed in hash object
    var conditionsMap = conditions;
    conditionList = _mapInstanceProperty(_context5 = _Object$keys2(conditionsMap)).call(_context5, function (key) {
      return {
        key: key,
        value: conditionsMap[key]
      };
    });
  } else {
    conditionList = _mapInstanceProperty(conditions).call(conditions, function (cond) {
      var _context6;

      var conds = _mapInstanceProperty(_context6 = _Object$keys2(cond)).call(_context6, function (key) {
        return {
          key: key,
          value: cond[key]
        };
      });

      return conds.length > 1 ? {
        key: '$and',
        value: _mapInstanceProperty(conds).call(conds, function (c) {
          return _defineProperty({}, c.key, c.value);
        })
      } : conds[0];
    });
  }

  var conditionClauses = _filterInstanceProperty(_context7 = _mapInstanceProperty(conditionList).call(conditionList, function (cond) {
    var d = depth + 1;
    var op;

    switch (cond.key) {
      case '$or':
      case '$and':
      case '$not':
        if (operator !== 'NOT' && conditionList.length === 1) {
          d = depth; // not change tree depth
        }

        op = cond.key === '$or' ? 'OR' : cond.key === '$and' ? 'AND' : 'NOT';
        return createConditionClause(cond.value, op, d);

      default:
        return createFieldExpression(cond.key, cond.value);
    }
  })).call(_context7, function (expr) {
    return expr;
  });

  var hasParen;

  if (operator === 'NOT') {
    var _context8, _context9;

    hasParen = depth > 0;
    return _concatInstanceProperty(_context8 = _concatInstanceProperty(_context9 = "".concat(hasParen ? '(' : '', "NOT ")).call(_context9, conditionClauses[0])).call(_context8, hasParen ? ')' : '');
  }

  hasParen = depth > 0 && conditionClauses.length > 1;
  return (hasParen ? '(' : '') + conditionClauses.join(" ".concat(operator, " ")) + (hasParen ? ')' : '');
}
/**
 * Create SOQL
 * @private
 */


export function createSOQL(query) {
  var soql = ['SELECT ', createFieldsClause(query.fields, _includesInstanceProperty(query)), ' FROM ', query.table].join('');
  var cond = createConditionClause(query.conditions);

  if (cond) {
    soql += " WHERE ".concat(cond);
  }

  var orderby = createOrderByClause(_sortInstanceProperty(query));

  if (orderby) {
    soql += " ORDER BY ".concat(orderby);
  }

  if (query.limit) {
    soql += " LIMIT ".concat(query.limit);
  }

  if (query.offset) {
    soql += " OFFSET ".concat(query.offset);
  }

  return soql;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
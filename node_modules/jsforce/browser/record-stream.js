import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.replace";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _get from "@babel/runtime-corejs3/helpers/get";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context8; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context8 = Object.prototype.toString.call(o)).call(_context8, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source), true)).call(_context6, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context7; _forEachInstanceProperty(_context7 = ownKeys(Object(source))).call(_context7, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Represents stream that handles Salesforce record as stream data
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { Transform, PassThrough } from 'stream';
import { serializeCSVStream, parseCSVStream } from './csv';
import { concatStreamsAsDuplex } from './util/stream';
/**
 * type defs
 */

/**
 * @private
 */
function evalMapping(value, mapping) {
  if (typeof value === 'string') {
    var m = /^\$\{(\w+)\}$/.exec(value);

    if (m) {
      return mapping[m[1]];
    }

    return value.replace(/\$\{(\w+)\}/g, function ($0, prop) {
      var v = mapping[prop];
      return typeof v === 'undefined' || v === null ? '' : String(v);
    });
  }

  return value;
}
/**
 * @private
 */


function convertRecordForSerialization(record) {
  var _context;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _reduceInstanceProperty(_context = _Object$keys(record)).call(_context, function (rec, key) {
    var value = rec[key];
    var urec;

    if (key === 'attributes') {
      // 'attributes' prop will be ignored
      urec = _objectSpread({}, rec);
      delete urec[key];
      return urec;
    } else if (options.nullValue && value === null) {
      return _objectSpread(_objectSpread({}, rec), {}, _defineProperty({}, key, options.nullValue));
    } else if (value !== null && _typeof(value) === 'object') {
      var _context2;

      var precord = convertRecordForSerialization(value, options);
      return _reduceInstanceProperty(_context2 = _Object$keys(precord)).call(_context2, function (prec, pkey) {
        var _context3;

        prec[_concatInstanceProperty(_context3 = "".concat(key, ".")).call(_context3, pkey)] = precord[pkey]; // eslint-disable-line no-param-reassign

        return prec;
      }, _objectSpread({}, rec));
    }

    return rec;
  }, record);
}
/**
 * @private
 */


function createPipelineStream(s1, s2) {
  s1.pipe(s2);
  return concatStreamsAsDuplex(s1, s2, {
    writableObjectMode: true
  });
}

/**
 * @private
 */
var CSVStreamConverter = {
  serialize: function serialize() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var nullValue = options.nullValue,
        csvOpts = _objectWithoutProperties(options, ["nullValue"]);

    return createPipelineStream( // eslint-disable-next-line no-use-before-define
    _mapInstanceProperty(RecordStream).call(RecordStream, function (record) {
      return convertRecordForSerialization(record, options);
    }), serializeCSVStream(csvOpts));
  },
  parse: function parse() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return parseCSVStream(options);
  }
};
/**
 * @private
 */

var DataStreamConverters = {
  csv: CSVStreamConverter
};
/**
 * Class for Record Stream
 *
 * @class
 * @constructor
 * @extends stream.Transform
 */

export var RecordStream = /*#__PURE__*/function (_PassThrough) {
  _inherits(RecordStream, _PassThrough);

  var _super = _createSuper(RecordStream);

  /**
   *
   */
  function RecordStream() {
    var _this;

    _classCallCheck(this, RecordStream);

    _this = _super.call(this, {
      objectMode: true
    });

    _defineProperty(_assertThisInitialized(_this), "addListener", _this.on);

    return _this;
  }
  /**
   * Get record stream of queried records applying the given mapping function
   */


  _createClass(RecordStream, [{
    key: "map",
    value: function map(fn) {
      return this.pipe(_mapInstanceProperty(RecordStream).call(RecordStream, fn));
    }
    /**
     * Get record stream of queried records, applying the given filter function
     */

  }, {
    key: "filter",
    value: function filter(fn) {
      return this.pipe(_filterInstanceProperty(RecordStream).call(RecordStream, fn));
    }
    /* @override */

  }, {
    key: "on",
    value: function on(ev, fn) {
      return _get(_getPrototypeOf(RecordStream.prototype), "on", this).call(this, ev === 'record' ? 'data' : ev, fn);
    }
    /* @override */

  }], [{
    key: "map",

    /* --------------------------------------------------- */

    /**
     * Create a record stream which maps records and pass them to downstream
     */
    value: function map(fn) {
      var mapStream = new Transform({
        objectMode: true,
        transform: function transform(record, enc, callback) {
          var rec = fn(record) || record; // if not returned record, use same record

          mapStream.push(rec);
          callback();
        }
      });
      return mapStream;
    }
    /**
     * Create mapping stream using given record template
     */

  }, {
    key: "recordMapStream",
    value: function recordMapStream(record, noeval) {
      return _mapInstanceProperty(RecordStream).call(RecordStream, function (rec) {
        var mapped = {
          Id: rec.Id
        };

        for (var _i = 0, _Object$keys2 = _Object$keys(record); _i < _Object$keys2.length; _i++) {
          var _prop = _Object$keys2[_i];
          mapped[_prop] = noeval ? record[_prop] : evalMapping(record[_prop], rec);
        }

        return mapped;
      });
    }
    /**
     * Create a record stream which filters records and pass them to downstream
     *
     * @param {RecordFilterFunction} fn - Record filtering function
     * @returns {RecordStream.Serializable}
     */

  }, {
    key: "filter",
    value: function filter(fn) {
      var filterStream = new Transform({
        objectMode: true,
        transform: function transform(record, enc, callback) {
          if (fn(record)) {
            filterStream.push(record);
          }

          callback();
        }
      });
      return filterStream;
    }
  }]);

  return RecordStream;
}(PassThrough);
/**
 * @class RecordStream.Serializable
 * @extends {RecordStream}
 */

export var Serializable = /*#__PURE__*/function (_RecordStream) {
  _inherits(Serializable, _RecordStream);

  var _super2 = _createSuper(Serializable);

  function Serializable() {
    var _context4;

    var _this2;

    _classCallCheck(this, Serializable);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this2 = _super2.call.apply(_super2, _concatInstanceProperty(_context4 = [this]).call(_context4, args));

    _defineProperty(_assertThisInitialized(_this2), "_dataStreams", {});

    return _this2;
  }

  _createClass(Serializable, [{
    key: "stream",

    /**
     * Get readable data stream which emits serialized record data
     */
    value: function stream() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this._dataStreams[type]) {
        return this._dataStreams[type];
      }

      var converter = DataStreamConverters[type];

      if (!converter) {
        throw new Error("Converting [".concat(type, "] data stream is not supported."));
      }

      var dataStream = new PassThrough();
      this.pipe(converter.serialize(options)).pipe(dataStream);
      this._dataStreams[type] = dataStream;
      return dataStream;
    }
  }]);

  return Serializable;
}(RecordStream);
/**
 * @class RecordStream.Parsable
 * @extends {RecordStream}
 */

export var Parsable = /*#__PURE__*/function (_RecordStream2) {
  _inherits(Parsable, _RecordStream2);

  var _super3 = _createSuper(Parsable);

  function Parsable() {
    var _context5;

    var _this3;

    _classCallCheck(this, Parsable);

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    _this3 = _super3.call.apply(_super3, _concatInstanceProperty(_context5 = [this]).call(_context5, args));

    _defineProperty(_assertThisInitialized(_this3), "_dataStreams", {});

    _defineProperty(_assertThisInitialized(_this3), "_execParse", false);

    _defineProperty(_assertThisInitialized(_this3), "_incomings", []);

    _defineProperty(_assertThisInitialized(_this3), "addListener", _this3.on);

    return _this3;
  }

  _createClass(Parsable, [{
    key: "stream",

    /**
     * Get writable data stream which accepts serialized record data
     */
    value: function stream() {
      var _this4 = this;

      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this._dataStreams[type]) {
        return this._dataStreams[type];
      }

      var converter = DataStreamConverters[type];

      if (!converter) {
        throw new Error("Converting [".concat(type, "] data stream is not supported."));
      }

      var dataStream = new PassThrough();
      var parserStream = converter.parse(options);
      parserStream.on('error', function (err) {
        return _this4.emit('error', err);
      });
      parserStream.pipe(this).pipe(new PassThrough({
        objectMode: true,
        highWaterMark: 500 * 1000
      }));

      if (this._execParse) {
        dataStream.pipe(parserStream);
      } else {
        this._incomings.push([dataStream, parserStream]);
      }

      this._dataStreams[type] = dataStream;
      return dataStream;
    }
    /* @override */

  }, {
    key: "on",
    value: function on(ev, fn) {
      if (ev === 'readable' || ev === 'record') {
        if (!this._execParse) {
          this._execParse = true;

          var _iterator = _createForOfIteratorHelper(this._incomings),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _step$value = _slicedToArray(_step.value, 2),
                  dataStream = _step$value[0],
                  parserStream = _step$value[1];

              dataStream.pipe(parserStream);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }

      return _get(_getPrototypeOf(Parsable.prototype), "on", this).call(this, ev, fn);
    }
    /* @override */

  }]);

  return Parsable;
}(RecordStream);
export default RecordStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
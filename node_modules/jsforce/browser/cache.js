import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.array.join";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @file Manages asynchronous method response cache
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
/**
 * type def
 */

/**
 * Class for managing cache entry
 *
 * @private
 * @class
 * @constructor
 * @template T
 */
var CacheEntry = /*#__PURE__*/function (_EventEmitter) {
  _inherits(CacheEntry, _EventEmitter);

  var _super = _createSuper(CacheEntry);

  function CacheEntry() {
    var _context;

    var _this;

    _classCallCheck(this, CacheEntry);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, _concatInstanceProperty(_context = [this]).call(_context, args));

    _defineProperty(_assertThisInitialized(_this), "_fetching", false);

    _defineProperty(_assertThisInitialized(_this), "_value", undefined);

    return _this;
  }

  _createClass(CacheEntry, [{
    key: "get",

    /**
     * Get value in the cache entry
     *
     * @param {() => Promise<T>} [callback] - Callback function callbacked the cache entry updated
     * @returns {T|undefined}
     */
    value: function get(callback) {
      if (callback) {
        var cb = callback;
        this.once('value', function (v) {
          return cb(v);
        });

        if (typeof this._value !== 'undefined') {
          this.emit('value', this._value);
        }
      }

      return this._value;
    }
    /**
     * Set value in the cache entry
     */

  }, {
    key: "set",
    value: function set(value) {
      this._value = value;
      this.emit('value', this._value);
    }
    /**
     * Clear cached value
     */

  }, {
    key: "clear",
    value: function clear() {
      this._fetching = false;
      this._value = undefined;
    }
  }]);

  return CacheEntry;
}(EventEmitter);
/**
 * create and return cache key from namespace and serialized arguments.
 * @private
 */


function createCacheKey(namespace, args) {
  var _context2, _context3;

  return _concatInstanceProperty(_context2 = "".concat(namespace || '', "(")).call(_context2, _mapInstanceProperty(_context3 = _toConsumableArray(args)).call(_context3, function (a) {
    return _JSON$stringify(a);
  }).join(','), ")");
}

function generateKeyString(options, scope, args) {
  return typeof options.key === 'string' ? options.key : typeof options.key === 'function' ? options.key.apply(scope, args) : createCacheKey(options.namespace, args);
}
/**
 * Caching manager for async methods
 *
 * @class
 * @constructor
 */


export var Cache = /*#__PURE__*/function () {
  function Cache() {
    _classCallCheck(this, Cache);

    _defineProperty(this, "_entries", {});
  }

  _createClass(Cache, [{
    key: "get",

    /**
     * retrive cache entry, or create if not exists.
     *
     * @param {String} [key] - Key of cache entry
     * @returns {CacheEntry}
     */
    value: function get(key) {
      if (this._entries[key]) {
        return this._entries[key];
      }

      var entry = new CacheEntry();
      this._entries[key] = entry;
      return entry;
    }
    /**
     * clear cache entries prefix matching given key
     */

  }, {
    key: "clear",
    value: function clear(key) {
      for (var _i = 0, _Object$keys = _Object$keys2(this._entries); _i < _Object$keys.length; _i++) {
        var k = _Object$keys[_i];

        if (!key || _indexOfInstanceProperty(k).call(k, key) === 0) {
          this._entries[k].clear();
        }
      }
    }
    /**
     * Enable caching for async call fn to lookup the response cache first,
     * then invoke original if no cached value.
     */

  }, {
    key: "createCachedFunction",
    value: function createCachedFunction(fn, scope) {
      var _this2 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        strategy: 'NOCACHE'
      };
      var strategy = options.strategy;

      var $fn = function $fn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var key = generateKeyString(options, scope, args);

        var entry = _this2.get(key);

        var executeFetch = /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
            var result;
            return _regeneratorRuntime.wrap(function _callee$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    entry._fetching = true;
                    _context4.prev = 1;
                    _context4.next = 4;
                    return fn.apply(scope || _this2, args);

                  case 4:
                    result = _context4.sent;
                    entry.set({
                      error: undefined,
                      result: result
                    });
                    return _context4.abrupt("return", result);

                  case 9:
                    _context4.prev = 9;
                    _context4.t0 = _context4["catch"](1);
                    entry.set({
                      error: _context4.t0,
                      result: undefined
                    });
                    throw _context4.t0;

                  case 13:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee, null, [[1, 9]]);
          }));

          return function executeFetch() {
            return _ref.apply(this, arguments);
          };
        }();

        var value;

        switch (strategy) {
          case 'IMMEDIATE':
            value = entry.get();

            if (!value) {
              throw new Error('Function call result is not cached yet.');
            }

            if (value.error) {
              throw value.error;
            }

            return value.result;

          case 'HIT':
            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
              return _regeneratorRuntime.wrap(function _callee2$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      if (entry._fetching) {
                        _context5.next = 3;
                        break;
                      }

                      _context5.next = 3;
                      return executeFetch();

                    case 3:
                      return _context5.abrupt("return", new _Promise(function (resolve, reject) {
                        entry.get(function (_ref3) {
                          var error = _ref3.error,
                              result = _ref3.result;
                          if (error) reject(error);else resolve(result);
                        });
                      }));

                    case 4:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee2);
            }))();

          case 'NOCACHE':
          default:
            return executeFetch();
        }
      };

      $fn.clear = function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var key = generateKeyString(options, scope, args);

        _this2.clear(key);
      };

      return $fn;
    }
  }]);

  return Cache;
}();
export default Cache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
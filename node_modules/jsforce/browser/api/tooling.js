import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import "core-js/modules/es.function.name";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import Connection from '../connection';
import Cache from '../cache';

/**
 *
 */
var _Connection$prototype = Connection.prototype,
    query = _Connection$prototype.query,
    queryMore = _Connection$prototype.queryMore,
    create = _Connection$prototype.create,
    _createSingle = _Connection$prototype._createSingle,
    _createMany = _Connection$prototype._createMany,
    _createParallel = _Connection$prototype._createParallel,
    retrieve = _Connection$prototype.retrieve,
    _retrieveSingle = _Connection$prototype._retrieveSingle,
    _retrieveParallel = _Connection$prototype._retrieveParallel,
    _retrieveMany = _Connection$prototype._retrieveMany,
    update = _Connection$prototype.update,
    _updateSingle = _Connection$prototype._updateSingle,
    _updateParallel = _Connection$prototype._updateParallel,
    _updateMany = _Connection$prototype._updateMany,
    upsert = _Connection$prototype.upsert,
    destroy = _Connection$prototype.destroy,
    _destroySingle = _Connection$prototype._destroySingle,
    _destroyParallel = _Connection$prototype._destroyParallel,
    _destroyMany = _Connection$prototype._destroyMany,
    describe = _Connection$prototype.describe,
    describeGlobal = _Connection$prototype.describeGlobal,
    sobject = _Connection$prototype.sobject;

var describeCacheKey = function describeCacheKey(type) {
  return type ? "describe.".concat(type) : 'describe';
};
/**
 * API class for Tooling API call
 */


export var Tooling = /*#__PURE__*/function () {
  /**
   * Execute query by using SOQL
   */

  /**
   * Query next record set by using query locator
   */

  /**
   * Create records
   */

  /**
   * Synonym of Tooling#create()
   */

  /**
   * Retrieve specified records
   */

  /**
   * Update records
   */

  /**
   * Upsert records
   */

  /**
   * Delete records
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Describe SObject metadata
   */

  /**
   * Synonym of Tooling#describe()
   */

  /**
   * Describe global SObjects
   */

  /**
   * Get SObject instance
   */

  /**
   *
   */
  function Tooling(conn) {
    _classCallCheck(this, Tooling);

    _defineProperty(this, "_conn", void 0);

    _defineProperty(this, "query", query);

    _defineProperty(this, "queryMore", queryMore);

    _defineProperty(this, "create", create);

    _defineProperty(this, "_createSingle", _createSingle);

    _defineProperty(this, "_createParallel", _createParallel);

    _defineProperty(this, "_createMany", _createMany);

    _defineProperty(this, "insert", create);

    _defineProperty(this, "retrieve", retrieve);

    _defineProperty(this, "_retrieveSingle", _retrieveSingle);

    _defineProperty(this, "_retrieveParallel", _retrieveParallel);

    _defineProperty(this, "_retrieveMany", _retrieveMany);

    _defineProperty(this, "update", update);

    _defineProperty(this, "_updateSingle", _updateSingle);

    _defineProperty(this, "_updateParallel", _updateParallel);

    _defineProperty(this, "_updateMany", _updateMany);

    _defineProperty(this, "upsert", upsert);

    _defineProperty(this, "destroy", destroy);

    _defineProperty(this, "_destroySingle", _destroySingle);

    _defineProperty(this, "_destroyParallel", _destroyParallel);

    _defineProperty(this, "_destroyMany", _destroyMany);

    _defineProperty(this, "delete", destroy);

    _defineProperty(this, "del", destroy);

    _defineProperty(this, "cache", new Cache());

    _defineProperty(this, "describe", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    }));

    _defineProperty(this, "describe$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    }));

    _defineProperty(this, "describe$$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    }));

    _defineProperty(this, "describeSObject", this.describe);

    _defineProperty(this, "describeSObject$", this.describe$);

    _defineProperty(this, "describeSObject$$", this.describe$$);

    _defineProperty(this, "describeGlobal", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    }));

    _defineProperty(this, "describeGlobal$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    }));

    _defineProperty(this, "describeGlobal$$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    }));

    _defineProperty(this, "sobject", sobject);

    _defineProperty(this, "sobjects", {});

    this._conn = conn;
  }
  /**
   * @private
   */


  _createClass(Tooling, [{
    key: "_establish",
    value: function _establish() {
      var _this = this;

      this.sobjects = {};
      this.cache.clear();
      this.cache.get('describeGlobal').removeAllListeners('value');
      this.cache.get('describeGlobal').on('value', function (res) {
        if (res.result) {
          var _iterator = _createForOfIteratorHelper(res.result.sobjects),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var type = _step.value.name;

              _this.sobject(type);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      });
    }
    /**
     * @private
     */

  }, {
    key: "_baseUrl",
    value: function _baseUrl() {
      return this._conn._baseUrl() + '/tooling';
    }
    /**
     * @private
     */

  }, {
    key: "_supports",
    value: function _supports(feature) {
      return this._conn._supports(feature);
    }
    /**
     *
     */

  }, {
    key: "request",
    value: function request(_request, options) {
      return this._conn.request(_request, options);
    }
    /**
     * Executes Apex code anonymously
     */

  }, {
    key: "executeAnonymous",
    value: function executeAnonymous(body) {
      var url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
      return this.request(url);
    }
    /**
     * Executes Apex tests asynchronously
     */

  }, {
    key: "runTestsAsynchronous",
    value: function runTestsAsynchronous(req) {
      var url = this._baseUrl() + '/runTestsAsynchronous/';
      return this._conn.requestPost(url, req);
    }
    /**
     * Executes Apex tests synchronously
     */

  }, {
    key: "runTestsSynchronous",
    value: function runTestsSynchronous(req) {
      var url = this._baseUrl() + '/runTestsSynchronous/';
      return this._conn.requestPost(url, req);
    }
    /**
     * Retrieves available code completions of the referenced type
     */

  }, {
    key: "completions",
    value: function completions() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'apex';
      var url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
      return this.request({
        method: 'GET',
        url: url,
        headers: {
          Accept: 'application/json'
        }
      });
    }
  }]);

  return Tooling;
}();
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */

registerModule('tooling', function (conn) {
  return new Tooling(conn);
});
export default Tooling;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
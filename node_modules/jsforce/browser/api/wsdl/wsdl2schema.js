import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import "core-js/modules/es.function.name";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.replace";
import "core-js/modules/es.string.split";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context6; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context6 = Object.prototype.toString.call(o)).call(_context6, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import fs from 'fs-extra';
import xml2js from 'xml2js';
import { castTypeUsingSchema } from '../../soap';
import { isMapObject } from '../../util/function';
/**
 *
 */

var WSDLRestrictionSchema = {
  $: {
    base: 'string'
  },
  enumeration: [{
    $: {
      value: 'string'
    }
  }],
  'xsd:enumeration': [{
    $: {
      value: 'string'
    }
  }]
};
var WSDLSimpleTypeSchema = {
  $: {
    name: 'string'
  },
  restriction: WSDLRestrictionSchema,
  'xsd:restriction': WSDLRestrictionSchema
};
var WSDLElementSchema = {
  $: {
    name: 'string',
    type: 'string',
    minOccurs: '?number',
    maxOccurs: '?string',
    nillable: '?boolean'
  }
};
var WSDLSequenceSchema = {
  element: ['?', WSDLElementSchema],
  'xsd:element': ['?', WSDLElementSchema]
};
var WSDLExtensionSchema = {
  $: {
    base: 'string'
  },
  sequence: {
    '?': WSDLSequenceSchema
  },
  'xsd:sequence': {
    '?': WSDLSequenceSchema
  }
};
var WSDLComplexContentSchema = {
  extension: {
    '?': WSDLExtensionSchema
  },
  'xsd:extension': {
    '?': WSDLExtensionSchema
  }
};
var WSDLComplexTypeSchema = {
  $: {
    name: 'string'
  },
  sequence: {
    '?': WSDLSequenceSchema
  },
  'xsd:sequence': {
    '?': WSDLSequenceSchema
  },
  complexContent: {
    '?': WSDLComplexContentSchema
  },
  'xsd:complexContent': {
    '?': WSDLComplexContentSchema
  }
};
var WSDLSchemaSchema = {
  $: 'any',
  complexType: ['?', 'any'],
  simpleType: ['?', 'any'],
  'xsd:complexType': ['?', 'any'],
  'xsd:simpleType': ['?', 'any']
};
var WSDLSchema = {
  definitions: {
    $: 'any',
    types: {
      schema: ['?', WSDLSchemaSchema],
      'xsd:schema': ['?', WSDLSchemaSchema]
    },
    message: ['any'],
    portType: {
      $: 'any',
      operation: ['any']
    },
    binding: {
      $: 'any',
      operation: ['any']
    },
    service: {
      $: 'any',
      documentation: 'string',
      operation: ['any']
    }
  }
};
/**
 *
 */

/**
 *
 */
function toJsType(xsdType, simpleTypes) {
  switch (xsdType) {
    case 'xsd:boolean':
      return 'boolean';

    case 'xsd:string':
    case 'xsd:date':
    case 'xsd:dateTime':
    case 'xsd:time':
    case 'xsd:base64Binary':
      return 'string';

    case 'xsd:int':
    case 'xsd:long':
    case 'xsd:double':
      return 'number';

    case 'xsd:anyType':
      return 'any';

    default:
      {
        var _xsdType$split = xsdType.split(':'),
            _xsdType$split2 = _slicedToArray(_xsdType$split, 2),
            ns = _xsdType$split2[0],
            _type = _xsdType$split2[1];

        if (simpleTypes[_type]) {
          return simpleTypes[_type];
        }

        if (ns) {
          return _type;
        }

        return xsdType;
      }
  }
}
/**
 *
 */


function readWSDLFile(_x) {
  return _readWSDLFile.apply(this, arguments);
}
/**
 *
 */


function _readWSDLFile() {
  _readWSDLFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filePath) {
    var xmlData, json;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fs.readFile(filePath, 'utf8');

          case 2:
            xmlData = _context.sent;
            _context.next = 5;
            return xml2js.parseStringPromise(xmlData, {
              explicitArray: false
            });

          case 5:
            json = _context.sent;
            return _context.abrupt("return", castTypeUsingSchema(json, WSDLSchema));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _readWSDLFile.apply(this, arguments);
}

function getTypeInfo(el, simpleTypes) {
  var type = toJsType(el.$.type, simpleTypes);
  var isArray = el.$.maxOccurs === 'unbounded';
  var nillable = !isArray && el.$.minOccurs === 0 || el.$.nillable;
  return isArray ? nillable ? ['?', type] : [type] : nillable ? "?".concat(type) : type;
}
/**
 *
 */


function extractComplexTypes(wsdl) {
  var _ref, _types$schema, _ref3, _types$schema2;

  console.log(wsdl.definitions.types['xsd:schema']);
  var schemas = {};
  var simpleTypes = {};
  var types = wsdl.definitions.types;

  var _iterator = _createForOfIteratorHelper((_ref = (_types$schema = types.schema) !== null && _types$schema !== void 0 ? _types$schema : types['xsd:schema']) !== null && _ref !== void 0 ? _ref : []),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ref2, _sc$simpleType;

      var sc = _step.value;

      var _iterator3 = _createForOfIteratorHelper((_ref2 = (_sc$simpleType = sc.simpleType) !== null && _sc$simpleType !== void 0 ? _sc$simpleType : sc['xsd:simpleType']) !== null && _ref2 !== void 0 ? _ref2 : []),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _simpleType$restricti;

          var st = _step3.value;
          var simpleType = castTypeUsingSchema(st, WSDLSimpleTypeSchema);
          var rs = (_simpleType$restricti = simpleType.restriction) !== null && _simpleType$restricti !== void 0 ? _simpleType$restricti : simpleType['xsd:restriction'];
          var base = rs.$.base.split(':')[1];
          simpleTypes[simpleType.$.name] = base;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  console.log({
    simpleTypes: simpleTypes
  });

  var _iterator2 = _createForOfIteratorHelper((_ref3 = (_types$schema2 = types.schema) !== null && _types$schema2 !== void 0 ? _types$schema2 : types['xsd:schema']) !== null && _ref3 !== void 0 ? _ref3 : []),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _ref4, _sc$complexType;

      var _sc = _step2.value;

      var _iterator4 = _createForOfIteratorHelper((_ref4 = (_sc$complexType = _sc.complexType) !== null && _sc$complexType !== void 0 ? _sc$complexType : _sc['xsd:complexType']) !== null && _ref4 !== void 0 ? _ref4 : []),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _complexType$sequence, _seq$element, _complexType$complexC;

          var ct = _step4.value;
          var complexType = castTypeUsingSchema(ct, WSDLComplexTypeSchema);
          var schema = {
            type: complexType.$.name,
            props: {}
          };
          var seq = (_complexType$sequence = complexType.sequence) !== null && _complexType$sequence !== void 0 ? _complexType$sequence : complexType['xsd:sequence'];
          var els = (_seq$element = seq === null || seq === void 0 ? void 0 : seq.element) !== null && _seq$element !== void 0 ? _seq$element : seq === null || seq === void 0 ? void 0 : seq['xsd:element'];

          var _iterator5 = _createForOfIteratorHelper(els !== null && els !== void 0 ? els : []),
              _step5;

          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _el = _step5.value;
              schema.props[_el.$.name] = getTypeInfo(_el, simpleTypes);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }

          var cc = (_complexType$complexC = complexType.complexContent) !== null && _complexType$complexC !== void 0 ? _complexType$complexC : complexType['xsd:complexContent'];

          if (cc) {
            var _cc$extension;

            var extension = (_cc$extension = cc.extension) !== null && _cc$extension !== void 0 ? _cc$extension : cc['xsd:extension'];

            if (extension) {
              var _extension$sequence, _seq$element2;

              schema.extends = extension.$.base.split(':')[1];

              var _seq = (_extension$sequence = extension.sequence) !== null && _extension$sequence !== void 0 ? _extension$sequence : extension['xsd:sequence'];

              var _els = (_seq$element2 = _seq === null || _seq === void 0 ? void 0 : _seq.element) !== null && _seq$element2 !== void 0 ? _seq$element2 : _seq === null || _seq === void 0 ? void 0 : _seq['xsd:element'];

              var _iterator6 = _createForOfIteratorHelper(_els !== null && _els !== void 0 ? _els : []),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var el = _step6.value;
                  schema.props[el.$.name] = getTypeInfo(el, simpleTypes);
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
            }
          }

          schemas[complexType.$.name] = schema;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return schemas;
}
/**
 *
 */


var GENERATED_MESSAGE_COMMENT = "/**\n * This file is generated from WSDL file by wsdl2schema.ts.\n * Do not modify directly.\n * To generate the file, run \"ts-node path/to/wsdl2schema.ts path/to/wsdl.xml path/to/schema.ts\"\n */\n";
/**
 *
 */

function dumpSchema(_x2, _x3) {
  return _dumpSchema.apply(this, arguments);
}
/**
 *
 */


function _dumpSchema() {
  _dumpSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(schemas, outFile) {
    var out, print, println, writeSchema, writeTypeDef, writeTypeDefs;
    return _regeneratorRuntime.wrap(function _callee2$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            writeTypeDefs = function _writeTypeDefs(schemas) {
              for (var _i2 = 0, _Object$keys3 = _Object$keys(schemas); _i2 < _Object$keys3.length; _i2++) {
                var _name2 = _Object$keys3[_i2];
                var schema = schemas[_name2];
                print("export type ".concat(_name2, " = "));
                writeTypeDef(schema, schemas);
                println(';');
                println();
              }

              println('export type ApiSchemaTypes = {');

              for (var _i3 = 0, _Object$keys4 = _Object$keys(schemas); _i3 < _Object$keys4.length; _i3++) {
                var _context3;

                var _name3 = _Object$keys4[_i3];
                println(_concatInstanceProperty(_context3 = "".concat(_name3, ": ")).call(_context3, _name3, ";"), 2);
              }

              println('};');
            };

            writeTypeDef = function _writeTypeDef(o, schemas) {
              var indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

              if (typeof o === 'string') {
                print(o);
              } else if (isMapObject(o)) {
                if ('type' in o && 'props' in o) {
                  if ('extends' in o && typeof o.extends === 'string') {
                    print("".concat(o.extends, " & "));
                  }

                  writeTypeDef(o.props, schemas, indent);
                  return;
                }

                var keys = _Object$keys(o);

                if (keys.length > 0) {
                  println('{');

                  for (var _i = 0, _Object$keys2 = _Object$keys(o); _i < _Object$keys2.length; _i++) {
                    var _context2;

                    var prop = _Object$keys2[_i];
                    var value = o[prop];
                    var nillable = false;
                    var isArray = false;

                    if (_Array$isArray(value)) {
                      isArray = true;
                      var len = value.length;

                      if (len === 2 && value[0] === '?') {
                        nillable = true;
                        value = value[1];
                      } else {
                        value = value[0];
                      }
                    } else if (isMapObject(value)) {
                      if ('?' in value) {
                        nillable = true;
                        value = value['?'];
                      }
                    }

                    if (typeof value === 'string' && value[0] === '?') {
                      nillable = true;
                      value = value.substring(1);
                    }

                    print(_concatInstanceProperty(_context2 = "".concat(prop)).call(_context2, nillable ? '?' : '', ": "), indent + 2);
                    writeTypeDef(value, schemas, indent + 2);

                    if (isArray) {
                      print('[]');
                    }

                    if (nillable) {
                      print(' | null | undefined');
                    }

                    println(';');
                  }

                  print('}', indent);
                } else {
                  print('{}');
                }
              }
            };

            writeSchema = function _writeSchema(o) {
              var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

              if (indent > 20) {
                print("'any'");
                return;
              }

              if (_Array$isArray(o)) {
                print('[');
                var i = 0;

                var _iterator7 = _createForOfIteratorHelper(o),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var co = _step7.value;

                    if (i > 0) {
                      print(', ');
                    }

                    writeSchema(co, indent);
                    i++;
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }

                print(']');
              } else if (isMapObject(o)) {
                var keys = _Object$keys(o);

                if (keys.length > 0) {
                  println('{');

                  var _iterator8 = _createForOfIteratorHelper(keys),
                      _step8;

                  try {
                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                      var _name = _step8.value;
                      var _co = o[_name];
                      var nameId = /^[\w_$]+$/.test(_name) ? _name : "'".concat(_name, "'");
                      print("".concat(nameId, ": "), indent + 2);
                      writeSchema(_co, indent + 2);
                      println(',');
                    }
                  } catch (err) {
                    _iterator8.e(err);
                  } finally {
                    _iterator8.f();
                  }

                  print('}', indent);
                } else {
                  print('{}');
                }
              } else {
                print(_JSON$stringify(o).replace(/"/g, "'"));
              }
            };

            out = fs.createWriteStream(outFile, 'utf8');

            print = function print(str) {
              var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

              for (var i = 0; i < indent; i++) {
                out.write(' ');
              }

              out.write(str);
            };

            println = function println() {
              var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
              var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              print(str + '\n', indent);
            };

            return _context4.abrupt("return", new _Promise(function (resolve, reject) {
              out.on('error', reject);
              out.on('finish', function () {
                return resolve();
              });
              println(GENERATED_MESSAGE_COMMENT);
              print('export const ApiSchemas = ');
              writeSchema(schemas);
              println(' as const;');
              println();
              writeTypeDefs(schemas);
              out.end();
            }));

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee2);
  }));
  return _dumpSchema.apply(this, arguments);
}

function main() {
  return _main.apply(this, arguments);
}

function _main() {
  _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var wsdlFilePath, outFilePath, wsdl, schemas;
    return _regeneratorRuntime.wrap(function _callee3$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            wsdlFilePath = process.argv[2];

            if (wsdlFilePath) {
              _context5.next = 4;
              break;
            }

            console.error('No input WSDL file is specified.');
            return _context5.abrupt("return");

          case 4:
            outFilePath = process.argv[3];

            if (wsdlFilePath) {
              _context5.next = 8;
              break;
            }

            console.error('No output typescript schema file is specified.');
            return _context5.abrupt("return");

          case 8:
            _context5.next = 10;
            return readWSDLFile(wsdlFilePath);

          case 10:
            wsdl = _context5.sent;
            schemas = extractComplexTypes(wsdl);
            dumpSchema(schemas, outFilePath);

          case 13:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee3);
  }));
  return _main.apply(this, arguments);
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.array.join";
import "core-js/modules/es.number.constructor";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.constructor";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.match";
import "core-js/modules/es.string.search";
import "core-js/modules/es.string.split";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _reverseInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reverse";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _setInterval from "@babel/runtime-corejs3/core-js-stable/set-interval";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @file Browser client connection management class
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import qs from 'querystring';
import Connection from '../connection';
import OAuth2 from '../oauth2';
/**
 * @private
 */

function popupWin(url, w, h) {
  var _context, _context2, _context3;

  var left = screen.width / 2 - w / 2;
  var top = screen.height / 2 - h / 2;
  return window.open(url, undefined, _concatInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = "location=yes,toolbar=no,status=no,menubar=no,width=".concat(w, ",height=")).call(_context3, h, ",top=")).call(_context2, top, ",left=")).call(_context, left));
}
/**
 * @private
 */


function handleCallbackResponse() {
  var res = checkCallbackResponse();
  var state = localStorage.getItem('jsforce_state');

  if (res && state && res.body.state === state) {
    localStorage.removeItem('jsforce_state');

    var _state$split = state.split('.'),
        _state$split2 = _slicedToArray(_state$split, 2),
        prefix = _state$split2[0],
        promptType = _state$split2[1];

    var cli = new BrowserClient(prefix);

    if (res.success) {
      cli._storeTokens(res.body);

      location.hash = '';
    } else {
      cli._storeError(res.body);
    }

    if (promptType === 'popup') {
      window.close();
    }

    return true;
  }
}
/**
 * @private
 */


function checkCallbackResponse() {
  var params;

  if (window.location.hash) {
    params = qs.parse(window.location.hash.substring(1));

    if (params.access_token) {
      return {
        success: true,
        body: params
      };
    }
  } else if (window.location.search) {
    params = qs.parse(window.location.search.substring(1));

    if (params.error) {
      return {
        success: false,
        body: params
      };
    }
  }
}
/**
 *
 */


/**
 *
 */
var DEFAULT_POPUP_WIN_WIDTH = 912;
var DEFAULT_POPUP_WIN_HEIGHT = 513;
/** @private **/

var clientIdx = 0;
/**
 *
 */

export var BrowserClient = /*#__PURE__*/function (_EventEmitter) {
  _inherits(BrowserClient, _EventEmitter);

  var _super = _createSuper(BrowserClient);

  /**
   *
   */
  function BrowserClient(prefix) {
    var _this;

    _classCallCheck(this, BrowserClient);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "_prefix", void 0);

    _defineProperty(_assertThisInitialized(_this), "_config", void 0);

    _defineProperty(_assertThisInitialized(_this), "_connection", void 0);

    _this._prefix = prefix || 'jsforce' + clientIdx++;
    return _this;
  }

  _createClass(BrowserClient, [{
    key: "init",

    /**
     *
     */
    value: function init(config) {
      var _this2 = this;

      if (handleCallbackResponse()) {
        return;
      }

      this._config = config;

      var tokens = this._getTokens();

      if (tokens) {
        this.connection._establish(tokens);

        _setTimeout(function () {
          _this2.emit('connect', _this2.connection);
        }, 10);
      }
    }
    /**
     *
     */

  }, {
    key: "login",
    value: function login() {
      var _this$_config,
          _size$width,
          _size$height,
          _this3 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var scope = options.scope,
          size = options.size;
      var oauth2 = new OAuth2((_this$_config = this._config) !== null && _this$_config !== void 0 ? _this$_config : {});
      var rand = Math.random().toString(36).substring(2);
      var state = [this._prefix, 'popup', rand].join('.');
      localStorage.setItem('jsforce_state', state);
      var authzUrl = oauth2.getAuthorizationUrl(_objectSpread({
        response_type: 'token',
        state: state
      }, scope ? {
        scope: scope
      } : {}));
      var pw = popupWin(authzUrl, (_size$width = size === null || size === void 0 ? void 0 : size.width) !== null && _size$width !== void 0 ? _size$width : DEFAULT_POPUP_WIN_WIDTH, (_size$height = size === null || size === void 0 ? void 0 : size.height) !== null && _size$height !== void 0 ? _size$height : DEFAULT_POPUP_WIN_HEIGHT);
      return new _Promise(function (resolve, reject) {
        if (!pw) {
          var _state = [_this3._prefix, 'redirect', rand].join('.');

          localStorage.setItem('jsforce_state', _state);

          var _authzUrl = oauth2.getAuthorizationUrl(_objectSpread({
            response_type: 'token',
            state: _state
          }, scope ? {
            scope: scope
          } : {}));

          location.href = _authzUrl;
          return;
        }

        _this3._removeTokens();

        var pid = _setInterval(function () {
          try {
            if (!pw || pw.closed) {
              clearInterval(pid);

              var tokens = _this3._getTokens();

              if (tokens) {
                _this3.connection._establish(tokens);

                _this3.emit('connect', _this3.connection);

                resolve({
                  status: 'connect'
                });
              } else {
                var err = _this3._getError();

                if (err) {
                  reject(new Error(err.error + ': ' + err.error_description));
                } else {
                  resolve({
                    status: 'cancel'
                  });
                }
              }
            }
          } catch (e) {//
          }
        }, 1000);
      });
    }
    /**
     *
     */

  }, {
    key: "isLoggedIn",
    value: function isLoggedIn() {
      return !!this.connection.accessToken;
    }
    /**
     *
     */

  }, {
    key: "logout",
    value: function logout() {
      this.connection.logout();

      this._removeTokens();

      this.emit('disconnect');
    }
    /**
     * @private
     */

  }, {
    key: "_getTokens",
    value: function _getTokens() {
      var regexp = new RegExp('(^|;\\s*)' + this._prefix + '_loggedin=true(;|$)');

      if (document.cookie.match(regexp)) {
        var issuedAt = Number(localStorage.getItem(this._prefix + '_issued_at')); // 2 hours

        if (_Date$now() < issuedAt + 2 * 60 * 60 * 1000) {
          var userInfo;
          var idUrl = localStorage.getItem(this._prefix + '_id');

          if (idUrl) {
            var _context4;

            var _idUrl$split$reverse = _reverseInstanceProperty(_context4 = idUrl.split('/')).call(_context4),
                _idUrl$split$reverse2 = _slicedToArray(_idUrl$split$reverse, 2),
                id = _idUrl$split$reverse2[0],
                organizationId = _idUrl$split$reverse2[1];

            userInfo = {
              id: id,
              organizationId: organizationId,
              url: idUrl
            };
          }

          return {
            accessToken: localStorage.getItem(this._prefix + '_access_token'),
            instanceUrl: localStorage.getItem(this._prefix + '_instance_url'),
            userInfo: userInfo
          };
        }
      }

      return null;
    }
    /**
     * @private
     */

  }, {
    key: "_storeTokens",
    value: function _storeTokens(params) {
      localStorage.setItem(this._prefix + '_access_token', params.access_token);
      localStorage.setItem(this._prefix + '_instance_url', params.instance_url);
      localStorage.setItem(this._prefix + '_issued_at', params.issued_at);
      localStorage.setItem(this._prefix + '_id', params.id);
      document.cookie = this._prefix + '_loggedin=true;';
    }
    /**
     * @private
     */

  }, {
    key: "_removeTokens",
    value: function _removeTokens() {
      localStorage.removeItem(this._prefix + '_access_token');
      localStorage.removeItem(this._prefix + '_instance_url');
      localStorage.removeItem(this._prefix + '_issued_at');
      localStorage.removeItem(this._prefix + '_id');
      document.cookie = this._prefix + '_loggedin=';
    }
    /**
     * @private
     */

  }, {
    key: "_getError",
    value: function _getError() {
      try {
        var _localStorage$getItem;

        var err = JSON.parse((_localStorage$getItem = localStorage.getItem(this._prefix + '_error')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '');
        localStorage.removeItem(this._prefix + '_error');
        return err;
      } catch (e) {//
      }
    }
    /**
     * @private
     */

  }, {
    key: "_storeError",
    value: function _storeError(err) {
      localStorage.setItem(this._prefix + '_error', _JSON$stringify(err));
    }
  }, {
    key: "connection",
    get: function get() {
      if (!this._connection) {
        this._connection = new Connection(this._config);
      }

      return this._connection;
    }
  }]);

  return BrowserClient;
}(EventEmitter);
/**
 *
 */

var client = new BrowserClient();
export default client;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
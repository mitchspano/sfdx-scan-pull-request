module.exports = {
  description: 'deploy source to an org',
  longDescription: 'Deploys metadata in source format to an org.',
  help: `Use this command to deploy source (metadata that’s in source format) to an org.
To take advantage of change tracking with scratch orgs, use "sfdx force:source:legacy:push".
To deploy metadata that’s in metadata format, use "sfdx force:mdapi:legacy:deploy".

The source you deploy overwrites the corresponding metadata in your org. This command does not attempt to merge your source with the versions in your org.

To run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI.
To check the status of the job, use force:source:deploy:report.

If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose the entire list in one set of double quotes.

Examples:

To deploy the source files in a directory:
   $ sfdx force:source:deploy -p path/to/source
To deploy a specific Apex class and the objects whose source is in a directory:
   $ sfdx force:source:deploy -p "path/to/apex/classes/MyClass.cls,path/to/source/objects"
To deploy source files in a comma-separated list that contains spaces:
   $ sfdx force:source:deploy -p "path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes"

To deploy all Apex classes:
   $ sfdx force:source:deploy -m ApexClass
To deploy a specific Apex class:
   $ sfdx force:source:deploy -m ApexClass:MyApexClass
To deploy all custom objects and Apex classes:
   $ sfdx force:source:deploy -m "CustomObject,ApexClass"
To deploy all Apex classes and two specific profiles (one of which has a space in its name):
   $ sfdx force:source:deploy -m "ApexClass, Profile:My Profile, Profile: AnotherProfile"

To deploy all components listed in a manifest:
   $ sfdx force:source:deploy -x path/to/package.xml

To run the tests that aren’t in any managed packages as part of a deployment:
   $ sfdx force:source:deploy -m ApexClass -l RunLocalTests

To check whether a deployment would succeed (to prepare for Quick Deploy):
   $ sfdx force:source:deploy -m ApexClass -l RunAllTestsInOrg -c

To deploy an already validated deployment (Quick Deploy):
    $ sfdx force:source:deploy -q 0Af9A00000FTM6pSAH`,
  sourcePathDescription: 'comma-separated list of paths to the local source files to deploy',
  sourcePathLongDescription:
    'A comma-separated list of paths to the local source files to deploy. ' +
    'The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder ' +
    '(in which case the operation is applied to all metadata types in the directory and its sub-directories).' +
    '\nIf you specify this parameter, don’t specify --manifest or --metadata.',
  manifestDescription: 'file path for manifest (package.xml) of components to deploy',
  manifestLongDescription:
    'The complete path for the manifest (package.xml) file that specifies the components to deploy. All child components are included.' +
    '\nIf you specify this parameter, don’t specify --metadata or --sourcepath.',
  metadataParamDescription: 'comma-separated list of metadata component names',
  metadataParamLongDescription: 'A comma-separated list of names of metadata components to deploy to the org.',
  SourceElementDoesNotExist: 'The %s named %s was not found in the workspace.',
  sourcedeployFailed: 'Deploy failed.',
  sourceDeployCheckOnlySuccess: '\nSuccessfully validated the deployment',
};

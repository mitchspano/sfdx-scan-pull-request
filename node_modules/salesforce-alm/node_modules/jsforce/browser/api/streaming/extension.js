import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

/**
 * Faye Client extensions: https://faye.jcoglan.com/browser/extensions.html
 *
 * For use with Streaming.prototype.createClient()
 **/

/*-------------------------------------------*/

/**
 * Constructor for an auth failure detector extension
 *
 * Based on new feature released with Salesforce Spring '18:
 * https://releasenotes.docs.salesforce.com/en-us/spring18/release-notes/rn_messaging_cometd_auth_validation.htm?edition=&impact=
 *
 * Example triggering error message:
 *
 * ```
 * {
 *   "ext":{
 *     "sfdc":{"failureReason":"401::Authentication invalid"},
 *     "replay":true},
 *   "advice":{"reconnect":"none"},
 *   "channel":"/meta/handshake",
 *   "error":"403::Handshake denied",
 *   "successful":false
 * }
 * ```
 *
 * Example usage:
 *
 * ```javascript
 * const jsforce = require('jsforce');
 * const { StreamingExtension } = require('jsforce/api/streaming');
 *
 * const conn = new jsforce.Connection({ … });
 *
 * const channel = "/event/My_Event__e";
 *
 * // Exit the Node process when auth fails
 * const exitCallback = () => process.exit(1);
 * const authFailureExt = new StreamingExtension.AuthFailure(exitCallback);
 *
 * const fayeClient = conn.streaming.createClient([ authFailureExt ]);
 *
 * const subscription = fayeClient.subscribe(channel, data => {
 *   console.log('topic received data', data);
 * });
 *
 * subscription.cancel();
 * ```
 *
 * @param {Function} failureCallback - Invoked when authentication becomes invalid
 */
export var AuthFailure = /*#__PURE__*/function () {
  function AuthFailure(failureCallback) {
    _classCallCheck(this, AuthFailure);

    _defineProperty(this, "_failureCallback", void 0);

    this._failureCallback = failureCallback;
  }

  _createClass(AuthFailure, [{
    key: "incoming",
    value: function incoming(message, callback) {
      if ((message.channel === '/meta/connect' || message.channel === '/meta/handshake') && message.advice && message.advice.reconnect == 'none') {
        this._failureCallback(message);
      } else {
        callback(message);
      }
    }
  }]);

  return AuthFailure;
}();
/*-------------------------------------------*/

var REPLAY_FROM_KEY = 'replay';
/**
 * Constructor for a durable streaming replay extension
 *
 * Modified from original Salesforce demo source code:
 * https://github.com/developerforce/SalesforceDurableStreamingDemo/blob/3d4a56eac956f744ad6c22e6a8141b6feb57abb9/staticresources/cometdReplayExtension.resource
 *
 * Example usage:
 *
 * ```javascript
 * const jsforce = require('jsforce');
 * const { StreamingExtension } = require('jsforce/api/streaming');
 
 * const conn = new jsforce.Connection({ … });
 *
 * const channel = "/event/My_Event__e";
 * const replayId = -2; // -2 is all retained events
 *
 * const replayExt = new StreamingExtension.Replay(channel, replayId);
 *
 * const fayeClient = conn.streaming.createClient([ replayExt ]);
 *
 * const subscription = fayeClient.subscribe(channel, data => {
 *   console.log('topic received data', data);
 * });
 *
 * subscription.cancel();
 * ```
 */

export var Replay = /*#__PURE__*/function () {
  function Replay(channel, replayId) {
    _classCallCheck(this, Replay);

    _defineProperty(this, "_extensionEnabled", void 0);

    _defineProperty(this, "_replay", void 0);

    _defineProperty(this, "_channel", void 0);

    this._extensionEnabled = replayId != null;
    this._channel = channel;
    this._replay = replayId;
  }

  _createClass(Replay, [{
    key: "setExtensionEnabled",
    value: function setExtensionEnabled(extensionEnabled) {
      this._extensionEnabled = extensionEnabled;
    }
  }, {
    key: "setReplay",
    value: function setReplay(replay) {
      this._replay = _parseInt(replay, 10);
    }
  }, {
    key: "setChannel",
    value: function setChannel(channel) {
      this._channel = channel;
    }
  }, {
    key: "incoming",
    value: function incoming(message, callback) {
      if (message.channel === '/meta/handshake') {
        if (message.ext && message.ext[REPLAY_FROM_KEY] == true) {
          this._extensionEnabled = true;
        }
      } else if (message.channel === this._channel && message.data && message.data.event && message.data.event.replayId) {
        this._replay = message.data.event.replayId;
      }

      callback(message);
    }
  }, {
    key: "outgoing",
    value: function outgoing(message, callback) {
      if (message.channel === '/meta/subscribe') {
        if (this._extensionEnabled) {
          if (!message.ext) {
            message.ext = {};
          }

          var replayFromMap = _defineProperty({}, this._channel, this._replay); // add "ext : { "replay" : { CHANNEL : REPLAY_VALUE }}" to subscribe message


          message.ext[REPLAY_FROM_KEY] = replayFromMap;
        }
      }

      callback(message);
    }
  }]);

  return Replay;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
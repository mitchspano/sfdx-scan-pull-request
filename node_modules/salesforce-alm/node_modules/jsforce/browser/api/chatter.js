import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.join";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages Salesforce Chatter REST API calls
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import { isObject } from '../util/function';
/**
 *
 */

/*--------------------------------------------*/

/**
 * A class representing chatter API request
 */
var Request = /*#__PURE__*/function () {
  function Request(chatter, request) {
    _classCallCheck(this, Request);

    _defineProperty(this, "_chatter", void 0);

    _defineProperty(this, "_request", void 0);

    _defineProperty(this, "_promise", void 0);

    this._chatter = chatter;
    this._request = request;
  }
  /**
   * Retrieve parameters in batch request form
   */


  _createClass(Request, [{
    key: "batchParams",
    value: function batchParams() {
      var _this$_request = this._request,
          method = _this$_request.method,
          url = _this$_request.url,
          body = _this$_request.body;
      return _objectSpread({
        method: method,
        url: this._chatter._normalizeUrl(url)
      }, typeof body !== 'undefined' ? {
        richInput: body
      } : {});
    }
    /**
     * Retrieve parameters in batch request form
     *
     * @method Chatter~Request#promise
     * @returns {Promise.<Chatter~RequestResult>}
     */

  }, {
    key: "promise",
    value: function promise() {
      return this._promise || (this._promise = this._chatter._request(this._request));
    }
    /**
     * Returns Node.js Stream object for request
     *
     * @method Chatter~Request#stream
     * @returns {stream.Stream}
     */

  }, {
    key: "stream",
    value: function stream() {
      return this._chatter._request(this._request).stream();
    }
    /**
     * Promise/A+ interface
     * http://promises-aplus.github.io/promises-spec/
     *
     * Delegate to deferred promise, return promise instance for batch result
     */

  }, {
    key: "then",
    value: function then(onResolve, onReject) {
      return this.promise().then(onResolve, onReject);
    }
  }]);

  return Request;
}();

function apppendQueryParamsToUrl(url, queryParams) {
  if (queryParams) {
    var _context;

    var qstring = _mapInstanceProperty(_context = _Object$keys(queryParams)).call(_context, function (name) {
      var _context2, _queryParams$name;

      return _concatInstanceProperty(_context2 = "".concat(name, "=")).call(_context2, encodeURIComponent(String((_queryParams$name = queryParams[name]) !== null && _queryParams$name !== void 0 ? _queryParams$name : '')));
    }).join('&');

    url += (_indexOfInstanceProperty(url).call(url, '?') > 0 ? '&' : '?') + qstring;
  }

  return url;
}
/*------------------------------*/


export var Resource = /*#__PURE__*/function (_Request) {
  _inherits(Resource, _Request);

  var _super = _createSuper(Resource);

  /**
   *
   */
  function Resource(chatter, url, queryParams) {
    var _this;

    _classCallCheck(this, Resource);

    _this = _super.call(this, chatter, {
      method: 'GET',
      url: apppendQueryParamsToUrl(url, queryParams)
    });

    _defineProperty(_assertThisInitialized(_this), "_url", void 0);

    _defineProperty(_assertThisInitialized(_this), "delete", _this.destroy);

    _defineProperty(_assertThisInitialized(_this), "del", _this.destroy);

    _this._url = _this._request.url;
    return _this;
  }
  /**
   * Create a new resource
   */


  _createClass(Resource, [{
    key: "create",
    value: function create(data) {
      return this._chatter.request({
        method: 'POST',
        url: this._url,
        body: data
      });
    }
    /**
     * Retrieve resource content
     */

  }, {
    key: "retrieve",
    value: function retrieve() {
      return this._chatter.request({
        method: 'GET',
        url: this._url
      });
    }
    /**
     * Update specified resource
     */

  }, {
    key: "update",
    value: function update(data) {
      return this._chatter.request({
        method: 'POST',
        url: this._url,
        body: data
      });
    }
    /**
     * Delete specified resource
     */

  }, {
    key: "destroy",
    value: function destroy() {
      return this._chatter.request({
        method: 'DELETE',
        url: this._url
      });
    }
    /**
     * Synonym of Resource#destroy()
     */

  }]);

  return Resource;
}(Request);
/*------------------------------*/

/**
 * API class for Chatter REST API call
 */

export var Chatter = /*#__PURE__*/function () {
  /**
   *
   */
  function Chatter(conn) {
    _classCallCheck(this, Chatter);

    _defineProperty(this, "_conn", void 0);

    this._conn = conn;
  }
  /**
   * Sending request to API endpoint
   * @private
   */


  _createClass(Chatter, [{
    key: "_request",
    value: function _request(req_) {
      var method = req_.method,
          url_ = req_.url,
          headers_ = req_.headers,
          body_ = req_.body;
      var headers = headers_ !== null && headers_ !== void 0 ? headers_ : {};
      var body;

      if (/^(put|post|patch)$/i.test(method)) {
        if (isObject(body_)) {
          headers = _objectSpread(_objectSpread({}, headers_), {}, {
            'Content-Type': 'application/json'
          });
          body = _JSON$stringify(body_);
        } else {
          body = body_;
        }
      }

      var url = this._normalizeUrl(url_);

      return this._conn.request({
        method: method,
        url: url,
        headers: headers,
        body: body
      });
    }
    /**
     * Convert path to site root relative url
     * @private
     */

  }, {
    key: "_normalizeUrl",
    value: function _normalizeUrl(url) {
      if (_indexOfInstanceProperty(url).call(url, '/chatter/') === 0 || _indexOfInstanceProperty(url).call(url, '/connect/') === 0) {
        return '/services/data/v' + this._conn.version + url;
      } else if (/^\/v[\d]+\.[\d]+\//.test(url)) {
        return '/services/data' + url;
      } else if (_indexOfInstanceProperty(url).call(url, '/services/') !== 0 && url[0] === '/') {
        return '/services/data/v' + this._conn.version + '/chatter' + url;
      } else {
        return url;
      }
    }
    /**
     * Make a request for chatter API resource
     */

  }, {
    key: "request",
    value: function request(req) {
      return new Request(this, req);
    }
    /**
     * Make a resource request to chatter API
     */

  }, {
    key: "resource",
    value: function resource(url, queryParams) {
      return new Resource(this, url, queryParams);
    }
    /**
     * Make a batch request to chatter API
     */

  }, {
    key: "batch",
    value: function () {
      var _batch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requests) {
        var _context3;

        var deferreds, res;
        return _regeneratorRuntime.wrap(function _callee$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                deferreds = _mapInstanceProperty(requests).call(requests, function (request) {
                  var deferred = defer();
                  request._promise = deferred.promise;
                  return deferred;
                });
                _context4.next = 3;
                return this.request({
                  method: 'POST',
                  url: this._normalizeUrl('/connect/batch'),
                  body: {
                    batchRequests: _mapInstanceProperty(requests).call(requests, function (request) {
                      return request.batchParams();
                    })
                  }
                });

              case 3:
                res = _context4.sent;

                _forEachInstanceProperty(_context3 = res.results).call(_context3, function (result, i) {
                  var deferred = deferreds[i];

                  if (result.statusCode >= 400) {
                    deferred.reject(result.result);
                  } else {
                    deferred.resolve(result.result);
                  }
                });

                return _context4.abrupt("return", res);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee, this);
      }));

      function batch(_x) {
        return _batch.apply(this, arguments);
      }

      return batch;
    }()
  }]);

  return Chatter;
}();

function defer() {
  var resolve_ = function resolve_() {};

  var reject_ = function reject_() {};

  var promise = new _Promise(function (resolve, reject) {
    resolve_ = resolve;
    reject_ = reject;
  });
  return {
    promise: promise,
    resolve: resolve_,
    reject: reject_
  };
}
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */


registerModule('chatter', function (conn) {
  return new Chatter(conn);
});
export default Chatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
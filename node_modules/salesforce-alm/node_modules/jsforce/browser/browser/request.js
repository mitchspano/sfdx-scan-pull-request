import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.split";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context9; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context7; _forEachInstanceProperty(_context7 = ownKeys(Object(source), true)).call(_context7, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context8; _forEachInstanceProperty(_context8 = ownKeys(Object(source))).call(_context8, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { createHttpRequestHandlerStreams, executeWithTimeout, isRedirect, performRedirectRequest } from '../request-helper';
import { readAll } from '../util/stream';

/**
 * As the request streming is not yet supported on major browsers,
 * it is set to false for now.
 */
var supportsReadableStream = false;
/*
(async () => {
  try {
    if (
      typeof fetch === 'function' &&
      typeof Request === 'function' &&
      typeof ReadableStream === 'function'
    ) {
      // this feature detection requires dummy POST request
      const req = new Request('data:text/plain,', {
        method: 'POST',
        body: new ReadableStream(),
      });
      // if it has content-type header it doesn't regard body as stream
      if (req.headers.has('Content-Type')) {
        return false;
      }
      await (await fetch(req)).text();
      return true;
    }
  } catch (e) {
    // error might occur in env with CSP without connect-src data:
    return false;
  }
  return false;
})();
*/

/**
 *
 */

function toWhatwgReadableStream(ins) {
  return new ReadableStream({
    start: function start(controller) {
      ins.on('data', function (chunk) {
        return controller.enqueue(chunk);
      });
      ins.on('end', function () {
        return controller.close();
      });
    }
  });
}
/**
 *
 */


function readWhatwgReadableStream(_x, _x2) {
  return _readWhatwgReadableStream.apply(this, arguments);
}
/**
 *
 */


function _readWhatwgReadableStream() {
  _readWhatwgReadableStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(rs, outs) {
    var reader, readAndWrite, _readAndWrite;

    return _regeneratorRuntime.wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _readAndWrite = function _readAndWrite3() {
              _readAndWrite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                var _yield$reader$read, done, value;

                return _regeneratorRuntime.wrap(function _callee$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return reader.read();

                      case 2:
                        _yield$reader$read = _context2.sent;
                        done = _yield$reader$read.done;
                        value = _yield$reader$read.value;

                        if (!done) {
                          _context2.next = 8;
                          break;
                        }

                        outs.end();
                        return _context2.abrupt("return", false);

                      case 8:
                        outs.write(value);
                        return _context2.abrupt("return", true);

                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee);
              }));
              return _readAndWrite.apply(this, arguments);
            };

            readAndWrite = function _readAndWrite2() {
              return _readAndWrite.apply(this, arguments);
            };

            reader = rs.getReader();

          case 3:
            _context3.next = 5;
            return readAndWrite();

          case 5:
            if (!_context3.sent) {
              _context3.next = 9;
              break;
            }

            ;
            _context3.next = 3;
            break;

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee2);
  }));
  return _readWhatwgReadableStream.apply(this, arguments);
}

function startFetchRequest(_x3, _x4, _x5, _x6, _x7) {
  return _startFetchRequest.apply(this, arguments);
}
/**
 *
 */


function _startFetchRequest() {
  _startFetchRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request, options, input, output, emitter) {
    var _context4;

    var counter,
        followRedirect,
        url,
        reqBody,
        rreq,
        body,
        controller,
        res,
        headers,
        _iterator,
        _step,
        headerName,
        response,
        _args3 = arguments;

    return _regeneratorRuntime.wrap(function _callee3$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            counter = _args3.length > 5 && _args3[5] !== undefined ? _args3[5] : 0;
            followRedirect = options.followRedirect;
            url = request.url, reqBody = request.body, rreq = _objectWithoutProperties(request, ["url", "body"]);

            if (!(input && /^(post|put|patch)$/i.test(request.method))) {
              _context5.next = 14;
              break;
            }

            if (!supportsReadableStream) {
              _context5.next = 8;
              break;
            }

            _context5.t1 = toWhatwgReadableStream(input);
            _context5.next = 11;
            break;

          case 8:
            _context5.next = 10;
            return readAll(input);

          case 10:
            _context5.t1 = _context5.sent;

          case 11:
            _context5.t0 = _context5.t1;
            _context5.next = 15;
            break;

          case 14:
            _context5.t0 = undefined;

          case 15:
            body = _context5.t0;
            controller = typeof AbortController !== 'undefined' ? new AbortController() : undefined;
            _context5.next = 19;
            return executeWithTimeout(function () {
              return fetch(url, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rreq), body ? {
                body: body
              } : {}), {}, {
                redirect: 'manual'
              }, controller ? {
                signal: controller.signal
              } : {}), {
                allowHTTP1ForStreamingUpload: true
              }));
            }, options.timeout, function () {
              return controller === null || controller === void 0 ? void 0 : controller.abort();
            });

          case 19:
            res = _context5.sent;
            headers = {};
            _iterator = _createForOfIteratorHelper(_keysInstanceProperty(_context4 = res.headers).call(_context4));

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                headerName = _step.value;
                headers[headerName.toLowerCase()] = res.headers.get(headerName);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            response = {
              statusCode: res.status,
              headers: headers
            };

            if (!(followRedirect && isRedirect(response.statusCode))) {
              _context5.next = 27;
              break;
            }

            try {
              performRedirectRequest(request, response, followRedirect, counter, function (req) {
                return startFetchRequest(req, options, undefined, output, emitter, counter + 1);
              });
            } catch (err) {
              emitter.emit('error', err);
            }

            return _context5.abrupt("return");

          case 27:
            emitter.emit('response', response);

            if (res.body) {
              readWhatwgReadableStream(res.body, output);
            } else {
              output.end();
            }

          case 29:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee3);
  }));
  return _startFetchRequest.apply(this, arguments);
}

function getResponseHeaderNames(xhr) {
  var _context;

  var headerLines = _filterInstanceProperty(_context = (xhr.getAllResponseHeaders() || '').split(/[\r\n]+/)).call(_context, function (l) {
    return _trimInstanceProperty(l).call(l) !== '';
  });

  return _mapInstanceProperty(headerLines).call(headerLines, function (headerLine) {
    return headerLine.split(/\s*:/)[0].toLowerCase();
  });
}
/**
 *
 */


function startXmlHttpRequest(_x8, _x9, _x10, _x11, _x12) {
  return _startXmlHttpRequest.apply(this, arguments);
}
/**
 *
 */


function _startXmlHttpRequest() {
  _startXmlHttpRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, options, input, output, emitter) {
    var counter,
        method,
        url,
        reqHeaders,
        followRedirect,
        reqBody,
        xhr,
        headerNames,
        headers,
        response,
        body,
        _args4 = arguments;
    return _regeneratorRuntime.wrap(function _callee4$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            counter = _args4.length > 5 && _args4[5] !== undefined ? _args4[5] : 0;
            method = request.method, url = request.url, reqHeaders = request.headers;
            followRedirect = options.followRedirect;

            if (!(input && /^(post|put|patch)$/i.test(method))) {
              _context6.next = 9;
              break;
            }

            _context6.next = 6;
            return readAll(input);

          case 6:
            _context6.t0 = _context6.sent;
            _context6.next = 10;
            break;

          case 9:
            _context6.t0 = null;

          case 10:
            reqBody = _context6.t0;
            xhr = new XMLHttpRequest();
            _context6.next = 14;
            return executeWithTimeout(function () {
              xhr.open(method, url);

              if (reqHeaders) {
                for (var header in reqHeaders) {
                  xhr.setRequestHeader(header, reqHeaders[header]);
                }
              }

              if (options.timeout) {
                xhr.timeout = options.timeout;
              }

              xhr.responseType = 'arraybuffer';
              xhr.send(reqBody);
              return new _Promise(function (resolve, reject) {
                xhr.onload = function () {
                  return resolve();
                };

                xhr.onerror = reject;
                xhr.ontimeout = reject;
                xhr.onabort = reject;
              });
            }, options.timeout, function () {
              return xhr.abort();
            });

          case 14:
            headerNames = getResponseHeaderNames(xhr);
            headers = _reduceInstanceProperty(headerNames).call(headerNames, function (headers, headerName) {
              return _objectSpread(_objectSpread({}, headers), {}, _defineProperty({}, headerName, xhr.getResponseHeader(headerName) || ''));
            }, {});
            response = {
              statusCode: xhr.status,
              headers: headers
            };

            if (!(followRedirect && isRedirect(response.statusCode))) {
              _context6.next = 20;
              break;
            }

            try {
              performRedirectRequest(request, response, followRedirect, counter, function (req) {
                return startXmlHttpRequest(req, options, undefined, output, emitter, counter + 1);
              });
            } catch (err) {
              emitter.emit('error', err);
            }

            return _context6.abrupt("return");

          case 20:
            if (!response.statusCode) {
              response.statusCode = 400;
              body = Buffer.from('Access Declined');
            } else {
              body = Buffer.from(xhr.response);
            }

            emitter.emit('response', response);
            output.write(body);
            output.end();

          case 24:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee4);
  }));
  return _startXmlHttpRequest.apply(this, arguments);
}

var defaults = {};
/**
 *
 */

export function setDefaults(defaults_) {
  defaults = defaults_;
}
/**
 *
 */

export default function request(req) {
  var options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = _objectSpread(_objectSpread({}, defaults), options_);

  var _createHttpRequestHan = createHttpRequestHandlerStreams(req),
      input = _createHttpRequestHan.input,
      output = _createHttpRequestHan.output,
      stream = _createHttpRequestHan.stream;

  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {
    startFetchRequest(req, options, input, output, stream);
  } else {
    startXmlHttpRequest(req, options, input, output, stream);
  }

  return stream;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
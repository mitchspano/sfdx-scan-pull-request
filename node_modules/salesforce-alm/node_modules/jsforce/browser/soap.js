import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.join";
import "core-js/modules/es.number.constructor";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.string.replace";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _get from "@babel/runtime-corejs3/helpers/get";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages method call to SOAP endpoint
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import HttpApi from './http-api';
import { isMapObject, isObject } from './util/function';
/**
 *
 */

function getPropsSchema(schema, schemaDict) {
  if (schema.extends && schemaDict[schema.extends]) {
    var extendSchema = schemaDict[schema.extends];
    return _objectSpread(_objectSpread({}, getPropsSchema(extendSchema, schemaDict)), schema.props);
  }

  return schema.props;
}

function isNillValue(value) {
  return value == null || isMapObject(value) && isMapObject(value.$) && value.$['xsi:nil'] === 'true';
}
/**
 *
 */


export function castTypeUsingSchema(value, schema) {
  var schemaDict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (_Array$isArray(schema)) {
    var _context;

    var nillable = schema.length === 2 && schema[0] === '?';
    var schema_ = nillable ? schema[1] : schema[0];

    if (value == null) {
      return nillable ? null : [];
    }

    return _mapInstanceProperty(_context = _Array$isArray(value) ? value : [value]).call(_context, function (v) {
      return castTypeUsingSchema(v, schema_, schemaDict);
    });
  } else if (isMapObject(schema)) {
    var _context2;

    // if schema is Schema Definition, not schema element
    if ('type' in schema && 'props' in schema && isMapObject(schema.props)) {
      var props = getPropsSchema(schema, schemaDict);
      return castTypeUsingSchema(value, props, schemaDict);
    }

    var _nillable = ('?' in schema);

    var _schema_ = '?' in schema ? schema['?'] : schema;

    if (_nillable && isNillValue(value)) {
      return null;
    }

    var obj = isMapObject(value) ? value : {};
    return _reduceInstanceProperty(_context2 = _Object$keys(_schema_)).call(_context2, function (o, k) {
      var s = _schema_[k];
      var v = obj[k];
      var nillable = _Array$isArray(s) && s.length === 2 && s[0] === '?' || isMapObject(s) && '?' in s || typeof s === 'string' && s[0] === '?';

      if (typeof v === 'undefined' && nillable) {
        return o;
      }

      return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, k, castTypeUsingSchema(v, s, schemaDict)));
    }, obj);
  } else {
    var _nillable2 = typeof schema === 'string' && schema[0] === '?';

    var type = typeof schema === 'string' ? _nillable2 ? schema.substring(1) : schema : 'any';

    switch (type) {
      case 'string':
        return isNillValue(value) ? _nillable2 ? null : '' : String(value);

      case 'number':
        return isNillValue(value) ? _nillable2 ? null : 0 : Number(value);

      case 'boolean':
        return isNillValue(value) ? _nillable2 ? null : false : value === 'true';

      case 'null':
        return null;

      default:
        {
          if (schemaDict[type]) {
            var cvalue = castTypeUsingSchema(value, schemaDict[type], schemaDict);
            var isEmpty = isMapObject(cvalue) && _Object$keys(cvalue).length === 0;
            return isEmpty && _nillable2 ? null : cvalue;
          }

          return value;
        }
    }
  }
}
/**
 * @private
 */

function lookupValue(obj, propRegExps) {
  var regexp = propRegExps.shift();

  if (!regexp) {
    return obj;
  }

  if (isMapObject(obj)) {
    for (var _i = 0, _Object$keys2 = _Object$keys(obj); _i < _Object$keys2.length; _i++) {
      var prop = _Object$keys2[_i];

      if (regexp.test(prop)) {
        return lookupValue(obj[prop], propRegExps);
      }
    }

    return null;
  }
}
/**
 * @private
 */


function toXML(name, value) {
  if (isObject(name)) {
    value = name;
    name = null;
  }

  if (_Array$isArray(value)) {
    return _mapInstanceProperty(value).call(value, function (v) {
      return toXML(name, v);
    }).join('');
  } else {
    var attrs = [];
    var elems = [];

    if (isMapObject(value)) {
      for (var _i2 = 0, _Object$keys3 = _Object$keys(value); _i2 < _Object$keys3.length; _i2++) {
        var k = _Object$keys3[_i2];
        var v = value[k];

        if (k[0] === '@') {
          var kk = k.substring(1);
          attrs.push(kk + '="' + v + '"');
        } else {
          elems.push(toXML(k, v));
        }
      }

      value = elems.join('');
    } else {
      value = String(value).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    }

    var startTag = name ? '<' + name + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' : '';
    var endTag = name ? '</' + name + '>' : '';
    return startTag + value + endTag;
  }
}
/**
 *
 */


/**
 * Class for SOAP endpoint of Salesforce
 *
 * @protected
 * @class
 * @constructor
 * @param {Connection} conn - Connection instance
 * @param {Object} options - SOAP endpoint setting options
 * @param {String} options.endpointUrl - SOAP endpoint URL
 * @param {String} [options.xmlns] - XML namespace for method call (default is "urn:partner.soap.sforce.com")
 */
export var SOAP = /*#__PURE__*/function (_HttpApi) {
  _inherits(SOAP, _HttpApi);

  var _super = _createSuper(SOAP);

  function SOAP(conn, options) {
    var _this;

    _classCallCheck(this, SOAP);

    _this = _super.call(this, conn, options);

    _defineProperty(_assertThisInitialized(_this), "_endpointUrl", void 0);

    _defineProperty(_assertThisInitialized(_this), "_xmlns", void 0);

    _this._endpointUrl = options.endpointUrl;
    _this._xmlns = options.xmlns || 'urn:partner.soap.sforce.com';
    return _this;
  }
  /**
   * Invoke SOAP call using method and arguments
   */


  _createClass(SOAP, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, args, schema, schemaDict) {
        var res;
        return _regeneratorRuntime.wrap(function _callee$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.request({
                  method: 'POST',
                  url: this._endpointUrl,
                  headers: {
                    'Content-Type': 'text/xml',
                    SOAPAction: '""'
                  },
                  _message: _defineProperty({}, method, args)
                });

              case 2:
                res = _context3.sent;
                return _context3.abrupt("return", schema ? castTypeUsingSchema(res, schema, schemaDict) : res);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x, _x2, _x3, _x4) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
    /** @override */

  }, {
    key: "beforeSend",
    value: function beforeSend(request) {
      request.body = this._createEnvelope(request._message);
    }
    /** @override **/

  }, {
    key: "isSessionExpired",
    value: function isSessionExpired(response) {
      return response.statusCode === 500 && /<faultcode>[a-zA-Z]+:INVALID_SESSION_ID<\/faultcode>/.test(response.body);
    }
    /** @override **/

  }, {
    key: "parseError",
    value: function parseError(body) {
      var error = lookupValue(body, [/:Envelope$/, /:Body$/, /:Fault$/]);
      return {
        errorCode: error.faultcode,
        message: error.faultstring
      };
    }
    /** @override **/

  }, {
    key: "getResponseBody",
    value: function () {
      var _getResponseBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {
        var body;
        return _regeneratorRuntime.wrap(function _callee2$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _get(_getPrototypeOf(SOAP.prototype), "getResponseBody", this).call(this, response);

              case 2:
                body = _context4.sent;
                return _context4.abrupt("return", lookupValue(body, [/:Envelope$/, /:Body$/, /.+/]));

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee2, this);
      }));

      function getResponseBody(_x5) {
        return _getResponseBody.apply(this, arguments);
      }

      return getResponseBody;
    }()
    /**
     * @private
     */

  }, {
    key: "_createEnvelope",
    value: function _createEnvelope(message) {
      var header = {};
      var conn = this._conn;

      if (conn.accessToken) {
        header.SessionHeader = {
          sessionId: conn.accessToken
        };
      }

      if (conn._callOptions) {
        header.CallOptions = conn._callOptions;
      }

      return ['<?xml version="1.0" encoding="UTF-8"?>', '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"', ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"', ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">', '<soapenv:Header xmlns="' + this._xmlns + '">', toXML(header), '</soapenv:Header>', '<soapenv:Body xmlns="' + this._xmlns + '">', toXML(message), '</soapenv:Body>', '</soapenv:Envelope>'].join('');
    }
  }]);

  return SOAP;
}(HttpApi);
export default SOAP;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
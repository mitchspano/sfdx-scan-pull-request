"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.Cache = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _events = require("events");

/**
 * @file Manages asynchronous method response cache
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 * Class for managing cache entry
 *
 * @private
 * @class
 * @constructor
 * @template T
 */
class CacheEntry extends _events.EventEmitter {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_fetching", false);
    (0, _defineProperty2.default)(this, "_value", undefined);
  }

  /**
   * Get value in the cache entry
   *
   * @param {() => Promise<T>} [callback] - Callback function callbacked the cache entry updated
   * @returns {T|undefined}
   */
  get(callback) {
    if (callback) {
      const cb = callback;
      this.once('value', v => cb(v));

      if (typeof this._value !== 'undefined') {
        this.emit('value', this._value);
      }
    }

    return this._value;
  }
  /**
   * Set value in the cache entry
   */


  set(value) {
    this._value = value;
    this.emit('value', this._value);
  }
  /**
   * Clear cached value
   */


  clear() {
    this._fetching = false;
    this._value = undefined;
  }

}
/**
 * create and return cache key from namespace and serialized arguments.
 * @private
 */


function createCacheKey(namespace, args) {
  var _context;

  return `${namespace || ''}(${(0, _map.default)(_context = [...args]).call(_context, a => (0, _stringify.default)(a)).join(',')})`;
}

function generateKeyString(options, scope, args) {
  return typeof options.key === 'string' ? options.key : typeof options.key === 'function' ? options.key.apply(scope, args) : createCacheKey(options.namespace, args);
}
/**
 * Caching manager for async methods
 *
 * @class
 * @constructor
 */


class Cache {
  constructor() {
    (0, _defineProperty2.default)(this, "_entries", {});
  }

  /**
   * retrive cache entry, or create if not exists.
   *
   * @param {String} [key] - Key of cache entry
   * @returns {CacheEntry}
   */
  get(key) {
    if (this._entries[key]) {
      return this._entries[key];
    }

    const entry = new CacheEntry();
    this._entries[key] = entry;
    return entry;
  }
  /**
   * clear cache entries prefix matching given key
   */


  clear(key) {
    for (const k of (0, _keys.default)(this._entries)) {
      if (!key || (0, _indexOf.default)(k).call(k, key) === 0) {
        this._entries[k].clear();
      }
    }
  }
  /**
   * Enable caching for async call fn to lookup the response cache first,
   * then invoke original if no cached value.
   */


  createCachedFunction(fn, scope, options = {
    strategy: 'NOCACHE'
  }) {
    const strategy = options.strategy;

    const $fn = (...args) => {
      const key = generateKeyString(options, scope, args);
      const entry = this.get(key);

      const executeFetch = async () => {
        entry._fetching = true;

        try {
          const result = await fn.apply(scope || this, args);
          entry.set({
            error: undefined,
            result
          });
          return result;
        } catch (error) {
          entry.set({
            error: error,
            result: undefined
          });
          throw error;
        }
      };

      let value;

      switch (strategy) {
        case 'IMMEDIATE':
          value = entry.get();

          if (!value) {
            throw new Error('Function call result is not cached yet.');
          }

          if (value.error) {
            throw value.error;
          }

          return value.result;

        case 'HIT':
          return (async () => {
            if (!entry._fetching) {
              // only when no other client is calling function
              await executeFetch();
            }

            return new _promise.default((resolve, reject) => {
              entry.get(({
                error,
                result
              }) => {
                if (error) reject(error);else resolve(result);
              });
            });
          })();

        case 'NOCACHE':
        default:
          return executeFetch();
      }
    };

    $fn.clear = (...args) => {
      const key = generateKeyString(options, scope, args);
      this.clear(key);
    };

    return $fn;
  }

}

exports.Cache = Cache;
var _default = Cache;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
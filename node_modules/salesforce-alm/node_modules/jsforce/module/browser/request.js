import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { createHttpRequestHandlerStreams, executeWithTimeout, isRedirect, performRedirectRequest } from '../request-helper';
import { readAll } from '../util/stream';

/**
 * As the request streming is not yet supported on major browsers,
 * it is set to false for now.
 */
const supportsReadableStream = false;
/*
(async () => {
  try {
    if (
      typeof fetch === 'function' &&
      typeof Request === 'function' &&
      typeof ReadableStream === 'function'
    ) {
      // this feature detection requires dummy POST request
      const req = new Request('data:text/plain,', {
        method: 'POST',
        body: new ReadableStream(),
      });
      // if it has content-type header it doesn't regard body as stream
      if (req.headers.has('Content-Type')) {
        return false;
      }
      await (await fetch(req)).text();
      return true;
    }
  } catch (e) {
    // error might occur in env with CSP without connect-src data:
    return false;
  }
  return false;
})();
*/

/**
 *
 */

function toWhatwgReadableStream(ins) {
  return new ReadableStream({
    start(controller) {
      ins.on('data', chunk => controller.enqueue(chunk));
      ins.on('end', () => controller.close());
    }

  });
}
/**
 *
 */


async function readWhatwgReadableStream(rs, outs) {
  const reader = rs.getReader();

  async function readAndWrite() {
    const {
      done,
      value
    } = await reader.read();

    if (done) {
      outs.end();
      return false;
    }

    outs.write(value);
    return true;
  }

  while (await readAndWrite());
}
/**
 *
 */


async function startFetchRequest(request, options, input, output, emitter, counter = 0) {
  const {
    followRedirect
  } = options;

  const {
    url,
    body: reqBody
  } = request,
        rreq = _objectWithoutProperties(request, ["url", "body"]);

  const body = input && /^(post|put|patch)$/i.test(request.method) ? supportsReadableStream ? toWhatwgReadableStream(input) : await readAll(input) : undefined;
  const controller = typeof AbortController !== 'undefined' ? new AbortController() : undefined;
  const res = await executeWithTimeout(() => fetch(url, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rreq), body ? {
    body
  } : {}), {}, {
    redirect: 'manual'
  }, controller ? {
    signal: controller.signal
  } : {}), {
    allowHTTP1ForStreamingUpload: true
  })), options.timeout, () => controller === null || controller === void 0 ? void 0 : controller.abort());
  const headers = {};

  for (const headerName of _keysInstanceProperty(_context = res.headers).call(_context)) {
    var _context;

    headers[headerName.toLowerCase()] = res.headers.get(headerName);
  }

  const response = {
    statusCode: res.status,
    headers
  };

  if (followRedirect && isRedirect(response.statusCode)) {
    try {
      performRedirectRequest(request, response, followRedirect, counter, req => startFetchRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }

    return;
  }

  emitter.emit('response', response);

  if (res.body) {
    readWhatwgReadableStream(res.body, output);
  } else {
    output.end();
  }
}
/**
 *
 */


function getResponseHeaderNames(xhr) {
  var _context2;

  const headerLines = _filterInstanceProperty(_context2 = (xhr.getAllResponseHeaders() || '').split(/[\r\n]+/)).call(_context2, l => _trimInstanceProperty(l).call(l) !== '');

  return _mapInstanceProperty(headerLines).call(headerLines, headerLine => headerLine.split(/\s*:/)[0].toLowerCase());
}
/**
 *
 */


async function startXmlHttpRequest(request, options, input, output, emitter, counter = 0) {
  const {
    method,
    url,
    headers: reqHeaders
  } = request;
  const {
    followRedirect
  } = options;
  const reqBody = input && /^(post|put|patch)$/i.test(method) ? await readAll(input) : null;
  const xhr = new XMLHttpRequest();
  await executeWithTimeout(() => {
    xhr.open(method, url);

    if (reqHeaders) {
      for (const header in reqHeaders) {
        xhr.setRequestHeader(header, reqHeaders[header]);
      }
    }

    if (options.timeout) {
      xhr.timeout = options.timeout;
    }

    xhr.responseType = 'arraybuffer';
    xhr.send(reqBody);
    return new _Promise((resolve, reject) => {
      xhr.onload = () => resolve();

      xhr.onerror = reject;
      xhr.ontimeout = reject;
      xhr.onabort = reject;
    });
  }, options.timeout, () => xhr.abort());
  const headerNames = getResponseHeaderNames(xhr);

  const headers = _reduceInstanceProperty(headerNames).call(headerNames, (headers, headerName) => _objectSpread(_objectSpread({}, headers), {}, {
    [headerName]: xhr.getResponseHeader(headerName) || ''
  }), {});

  const response = {
    statusCode: xhr.status,
    headers: headers
  };

  if (followRedirect && isRedirect(response.statusCode)) {
    try {
      performRedirectRequest(request, response, followRedirect, counter, req => startXmlHttpRequest(req, options, undefined, output, emitter, counter + 1));
    } catch (err) {
      emitter.emit('error', err);
    }

    return;
  }

  let body;

  if (!response.statusCode) {
    response.statusCode = 400;
    body = Buffer.from('Access Declined');
  } else {
    body = Buffer.from(xhr.response);
  }

  emitter.emit('response', response);
  output.write(body);
  output.end();
}
/**
 *
 */


let defaults = {};
/**
 *
 */

export function setDefaults(defaults_) {
  defaults = defaults_;
}
/**
 *
 */

export default function request(req, options_ = {}) {
  const options = _objectSpread(_objectSpread({}, defaults), options_);

  const {
    input,
    output,
    stream
  } = createHttpRequestHandlerStreams(req);

  if (typeof window !== 'undefined' && typeof window.fetch === 'function') {
    startFetchRequest(req, options, input, output, stream);
  } else {
    startXmlHttpRequest(req, options, input, output, stream);
  }

  return stream;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
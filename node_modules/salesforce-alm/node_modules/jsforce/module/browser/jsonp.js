import "core-js/modules/es.promise";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";

/**
 *
 */
import { Transform } from 'stream';
let _index = 0;

async function processJsonpRequest(params, jsonpParam, timeout) {
  if (params.method.toUpperCase() !== 'GET') {
    throw new Error('JSONP only supports GET request.');
  }

  _index += 1;
  const cbFuncName = `_jsforce_jsonpCallback_${_index}`;
  const callbacks = window;
  let url = params.url;
  url += _indexOfInstanceProperty(url).call(url, '?') > 0 ? '&' : '?';
  url += `${jsonpParam}=${cbFuncName}`;
  const script = document.createElement('script');
  script.type = 'text/javascript';
  script.src = url;

  if (document.documentElement) {
    document.documentElement.appendChild(script);
  }

  let pid;

  try {
    const res = await new _Promise((resolve, reject) => {
      pid = _setTimeout(() => {
        reject(new Error('JSONP call time out.'));
      }, timeout);
      callbacks[cbFuncName] = resolve;
    });
    return {
      statusCode: 200,
      headers: {
        'content-type': 'application/json'
      },
      body: _JSON$stringify(res)
    };
  } finally {
    clearTimeout(pid);

    if (document.documentElement) {
      document.documentElement.removeChild(script);
    }

    delete callbacks[cbFuncName];
  }
}

function createRequest(jsonpParam = 'callback', timeout = 10000) {
  return params => {
    const stream = new Transform({
      transform(chunk, encoding, callback) {
        callback();
      },

      flush() {
        (async () => {
          const response = await processJsonpRequest(params, jsonpParam, timeout);
          stream.emit('response', response);
          stream.emit('complete', response);
          stream.push(response.body);
          stream.push(null);
        })();
      }

    });
    stream.end();
    return stream;
  };
}

export default {
  supported: typeof window !== 'undefined' && typeof document !== 'undefined',
  createRequest
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icm93c2VyL2pzb25wLnRzIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsIl9pbmRleCIsInByb2Nlc3NKc29ucFJlcXVlc3QiLCJwYXJhbXMiLCJqc29ucFBhcmFtIiwidGltZW91dCIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwiRXJyb3IiLCJjYkZ1bmNOYW1lIiwiY2FsbGJhY2tzIiwid2luZG93IiwidXJsIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsInNyYyIsImRvY3VtZW50RWxlbWVudCIsImFwcGVuZENoaWxkIiwicGlkIiwicmVzIiwicmVzb2x2ZSIsInJlamVjdCIsInN0YXR1c0NvZGUiLCJoZWFkZXJzIiwiYm9keSIsImNsZWFyVGltZW91dCIsInJlbW92ZUNoaWxkIiwiY3JlYXRlUmVxdWVzdCIsInN0cmVhbSIsInRyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsImZsdXNoIiwicmVzcG9uc2UiLCJlbWl0IiwicHVzaCIsImVuZCIsInN1cHBvcnRlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsU0FBVCxRQUEwQixRQUExQjtBQUdBLElBQUlDLE1BQU0sR0FBRyxDQUFiOztBQUVBLGVBQWVDLG1CQUFmLENBQ0VDLE1BREYsRUFFRUMsVUFGRixFQUdFQyxPQUhGLEVBSUU7QUFDQSxNQUFJRixNQUFNLENBQUNHLE1BQVAsQ0FBY0MsV0FBZCxPQUFnQyxLQUFwQyxFQUEyQztBQUN6QyxVQUFNLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0Q7O0FBQ0RQLEVBQUFBLE1BQU0sSUFBSSxDQUFWO0FBQ0EsUUFBTVEsVUFBVSxHQUFJLDBCQUF5QlIsTUFBTyxFQUFwRDtBQUNBLFFBQU1TLFNBQWMsR0FBR0MsTUFBdkI7QUFDQSxNQUFJQyxHQUFHLEdBQUdULE1BQU0sQ0FBQ1MsR0FBakI7QUFDQUEsRUFBQUEsR0FBRyxJQUFJLHlCQUFBQSxHQUFHLE1BQUgsQ0FBQUEsR0FBRyxFQUFTLEdBQVQsQ0FBSCxHQUFtQixDQUFuQixHQUF1QixHQUF2QixHQUE2QixHQUFwQztBQUNBQSxFQUFBQSxHQUFHLElBQUssR0FBRVIsVUFBVyxJQUFHSyxVQUFXLEVBQW5DO0FBQ0EsUUFBTUksTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtBQUNBRixFQUFBQSxNQUFNLENBQUNHLElBQVAsR0FBYyxpQkFBZDtBQUNBSCxFQUFBQSxNQUFNLENBQUNJLEdBQVAsR0FBYUwsR0FBYjs7QUFDQSxNQUFJRSxRQUFRLENBQUNJLGVBQWIsRUFBOEI7QUFDNUJKLElBQUFBLFFBQVEsQ0FBQ0ksZUFBVCxDQUF5QkMsV0FBekIsQ0FBcUNOLE1BQXJDO0FBQ0Q7O0FBQ0QsTUFBSU8sR0FBSjs7QUFDQSxNQUFJO0FBQ0YsVUFBTUMsR0FBRyxHQUFHLE1BQU0sYUFBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDakRILE1BQUFBLEdBQUcsR0FBRyxZQUFXLE1BQU07QUFDckJHLFFBQUFBLE1BQU0sQ0FBQyxJQUFJZixLQUFKLENBQVUsc0JBQVYsQ0FBRCxDQUFOO0FBQ0QsT0FGSyxFQUVISCxPQUZHLENBQU47QUFHQUssTUFBQUEsU0FBUyxDQUFDRCxVQUFELENBQVQsR0FBd0JhLE9BQXhCO0FBQ0QsS0FMaUIsQ0FBbEI7QUFNQSxXQUFPO0FBQ0xFLE1BQUFBLFVBQVUsRUFBRSxHQURQO0FBRUxDLE1BQUFBLE9BQU8sRUFBRTtBQUFFLHdCQUFnQjtBQUFsQixPQUZKO0FBR0xDLE1BQUFBLElBQUksRUFBRSxnQkFBZUwsR0FBZjtBQUhELEtBQVA7QUFLRCxHQVpELFNBWVU7QUFDUk0sSUFBQUEsWUFBWSxDQUFDUCxHQUFELENBQVo7O0FBQ0EsUUFBSU4sUUFBUSxDQUFDSSxlQUFiLEVBQThCO0FBQzVCSixNQUFBQSxRQUFRLENBQUNJLGVBQVQsQ0FBeUJVLFdBQXpCLENBQXFDZixNQUFyQztBQUNEOztBQUNELFdBQU9ILFNBQVMsQ0FBQ0QsVUFBRCxDQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU29CLGFBQVQsQ0FDRXpCLFVBQWtCLEdBQUcsVUFEdkIsRUFFRUMsT0FBZSxHQUFHLEtBRnBCLEVBR0U7QUFDQSxTQUFRRixNQUFELElBQXlCO0FBQzlCLFVBQU0yQixNQUFNLEdBQUcsSUFBSTlCLFNBQUosQ0FBYztBQUMzQitCLE1BQUFBLFNBQVMsQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLEVBQWtCQyxRQUFsQixFQUE0QjtBQUNuQ0EsUUFBQUEsUUFBUTtBQUNULE9BSDBCOztBQUkzQkMsTUFBQUEsS0FBSyxHQUFHO0FBQ04sU0FBQyxZQUFZO0FBQ1gsZ0JBQU1DLFFBQVEsR0FBRyxNQUFNbEMsbUJBQW1CLENBQ3hDQyxNQUR3QyxFQUV4Q0MsVUFGd0MsRUFHeENDLE9BSHdDLENBQTFDO0FBS0F5QixVQUFBQSxNQUFNLENBQUNPLElBQVAsQ0FBWSxVQUFaLEVBQXdCRCxRQUF4QjtBQUNBTixVQUFBQSxNQUFNLENBQUNPLElBQVAsQ0FBWSxVQUFaLEVBQXdCRCxRQUF4QjtBQUNBTixVQUFBQSxNQUFNLENBQUNRLElBQVAsQ0FBWUYsUUFBUSxDQUFDVixJQUFyQjtBQUNBSSxVQUFBQSxNQUFNLENBQUNRLElBQVAsQ0FBWSxJQUFaO0FBQ0QsU0FWRDtBQVdEOztBQWhCMEIsS0FBZCxDQUFmO0FBa0JBUixJQUFBQSxNQUFNLENBQUNTLEdBQVA7QUFDQSxXQUFPVCxNQUFQO0FBQ0QsR0FyQkQ7QUFzQkQ7O0FBRUQsZUFBZTtBQUNiVSxFQUFBQSxTQUFTLEVBQUUsT0FBTzdCLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUMsT0FBT0csUUFBUCxLQUFvQixXQURuRDtBQUViZSxFQUFBQTtBQUZhLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKi9cbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gJy4uL3R5cGVzJztcblxubGV0IF9pbmRleCA9IDA7XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NKc29ucFJlcXVlc3QoXG4gIHBhcmFtczogSHR0cFJlcXVlc3QsXG4gIGpzb25wUGFyYW06IHN0cmluZyxcbiAgdGltZW91dDogbnVtYmVyLFxuKSB7XG4gIGlmIChwYXJhbXMubWV0aG9kLnRvVXBwZXJDYXNlKCkgIT09ICdHRVQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBvbmx5IHN1cHBvcnRzIEdFVCByZXF1ZXN0LicpO1xuICB9XG4gIF9pbmRleCArPSAxO1xuICBjb25zdCBjYkZ1bmNOYW1lID0gYF9qc2ZvcmNlX2pzb25wQ2FsbGJhY2tfJHtfaW5kZXh9YDtcbiAgY29uc3QgY2FsbGJhY2tzOiBhbnkgPSB3aW5kb3c7XG4gIGxldCB1cmwgPSBwYXJhbXMudXJsO1xuICB1cmwgKz0gdXJsLmluZGV4T2YoJz8nKSA+IDAgPyAnJicgOiAnPyc7XG4gIHVybCArPSBgJHtqc29ucFBhcmFtfT0ke2NiRnVuY05hbWV9YDtcbiAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gIHNjcmlwdC5zcmMgPSB1cmw7XG4gIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICBsZXQgcGlkO1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHBpZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKCdKU09OUCBjYWxsIHRpbWUgb3V0LicpKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgY2FsbGJhY2tzW2NiRnVuY05hbWVdID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXMpLFxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgY2xlYXJUaW1lb3V0KHBpZCk7XG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgfVxuICAgIGRlbGV0ZSBjYWxsYmFja3NbY2JGdW5jTmFtZV07XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChcbiAganNvbnBQYXJhbTogc3RyaW5nID0gJ2NhbGxiYWNrJyxcbiAgdGltZW91dDogbnVtYmVyID0gMTAwMDAsXG4pIHtcbiAgcmV0dXJuIChwYXJhbXM6IEh0dHBSZXF1ZXN0KSA9PiB7XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IFRyYW5zZm9ybSh7XG4gICAgICB0cmFuc2Zvcm0oY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSxcbiAgICAgIGZsdXNoKCkge1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvY2Vzc0pzb25wUmVxdWVzdChcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgIGpzb25wUGFyYW0sXG4gICAgICAgICAgICB0aW1lb3V0LFxuICAgICAgICAgICk7XG4gICAgICAgICAgc3RyZWFtLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UpO1xuICAgICAgICAgIHN0cmVhbS5lbWl0KCdjb21wbGV0ZScsIHJlc3BvbnNlKTtcbiAgICAgICAgICBzdHJlYW0ucHVzaChyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICBzdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgfSkoKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc3RyZWFtLmVuZCgpO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3VwcG9ydGVkOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLFxuICBjcmVhdGVSZXF1ZXN0LFxufTtcbiJdfQ==
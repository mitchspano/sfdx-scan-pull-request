import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.promise";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @file Manages Salesforce Chatter REST API calls
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import { isObject } from '../util/function';
/**
 *
 */

/*--------------------------------------------*/

/**
 * A class representing chatter API request
 */
class Request {
  constructor(chatter, request) {
    _defineProperty(this, "_chatter", void 0);

    _defineProperty(this, "_request", void 0);

    _defineProperty(this, "_promise", void 0);

    this._chatter = chatter;
    this._request = request;
  }
  /**
   * Retrieve parameters in batch request form
   */


  batchParams() {
    const {
      method,
      url,
      body
    } = this._request;
    return _objectSpread({
      method,
      url: this._chatter._normalizeUrl(url)
    }, typeof body !== 'undefined' ? {
      richInput: body
    } : {});
  }
  /**
   * Retrieve parameters in batch request form
   *
   * @method Chatter~Request#promise
   * @returns {Promise.<Chatter~RequestResult>}
   */


  promise() {
    return this._promise || (this._promise = this._chatter._request(this._request));
  }
  /**
   * Returns Node.js Stream object for request
   *
   * @method Chatter~Request#stream
   * @returns {stream.Stream}
   */


  stream() {
    return this._chatter._request(this._request).stream();
  }
  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for batch result
   */


  then(onResolve, onReject) {
    return this.promise().then(onResolve, onReject);
  }

}

function apppendQueryParamsToUrl(url, queryParams) {
  if (queryParams) {
    var _context;

    const qstring = _mapInstanceProperty(_context = _Object$keys(queryParams)).call(_context, name => {
      var _queryParams$name;

      return `${name}=${encodeURIComponent(String((_queryParams$name = queryParams[name]) !== null && _queryParams$name !== void 0 ? _queryParams$name : ''))}`;
    }).join('&');

    url += (_indexOfInstanceProperty(url).call(url, '?') > 0 ? '&' : '?') + qstring;
  }

  return url;
}
/*------------------------------*/


export class Resource extends Request {
  /**
   *
   */
  constructor(chatter, url, queryParams) {
    super(chatter, {
      method: 'GET',
      url: apppendQueryParamsToUrl(url, queryParams)
    });

    _defineProperty(this, "_url", void 0);

    _defineProperty(this, "delete", this.destroy);

    _defineProperty(this, "del", this.destroy);

    this._url = this._request.url;
  }
  /**
   * Create a new resource
   */


  create(data) {
    return this._chatter.request({
      method: 'POST',
      url: this._url,
      body: data
    });
  }
  /**
   * Retrieve resource content
   */


  retrieve() {
    return this._chatter.request({
      method: 'GET',
      url: this._url
    });
  }
  /**
   * Update specified resource
   */


  update(data) {
    return this._chatter.request({
      method: 'POST',
      url: this._url,
      body: data
    });
  }
  /**
   * Delete specified resource
   */


  destroy() {
    return this._chatter.request({
      method: 'DELETE',
      url: this._url
    });
  }
  /**
   * Synonym of Resource#destroy()
   */


}
/*------------------------------*/

/**
 * API class for Chatter REST API call
 */

export class Chatter {
  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);

    this._conn = conn;
  }
  /**
   * Sending request to API endpoint
   * @private
   */


  _request(req_) {
    const {
      method,
      url: url_,
      headers: headers_,
      body: body_
    } = req_;
    let headers = headers_ !== null && headers_ !== void 0 ? headers_ : {};
    let body;

    if (/^(put|post|patch)$/i.test(method)) {
      if (isObject(body_)) {
        headers = _objectSpread(_objectSpread({}, headers_), {}, {
          'Content-Type': 'application/json'
        });
        body = _JSON$stringify(body_);
      } else {
        body = body_;
      }
    }

    const url = this._normalizeUrl(url_);

    return this._conn.request({
      method,
      url,
      headers,
      body
    });
  }
  /**
   * Convert path to site root relative url
   * @private
   */


  _normalizeUrl(url) {
    if (_indexOfInstanceProperty(url).call(url, '/chatter/') === 0 || _indexOfInstanceProperty(url).call(url, '/connect/') === 0) {
      return '/services/data/v' + this._conn.version + url;
    } else if (/^\/v[\d]+\.[\d]+\//.test(url)) {
      return '/services/data' + url;
    } else if (_indexOfInstanceProperty(url).call(url, '/services/') !== 0 && url[0] === '/') {
      return '/services/data/v' + this._conn.version + '/chatter' + url;
    } else {
      return url;
    }
  }
  /**
   * Make a request for chatter API resource
   */


  request(req) {
    return new Request(this, req);
  }
  /**
   * Make a resource request to chatter API
   */


  resource(url, queryParams) {
    return new Resource(this, url, queryParams);
  }
  /**
   * Make a batch request to chatter API
   */


  async batch(requests) {
    var _context2;

    const deferreds = _mapInstanceProperty(requests).call(requests, request => {
      const deferred = defer();
      request._promise = deferred.promise;
      return deferred;
    });

    const res = await this.request({
      method: 'POST',
      url: this._normalizeUrl('/connect/batch'),
      body: {
        batchRequests: _mapInstanceProperty(requests).call(requests, request => request.batchParams())
      }
    });

    _forEachInstanceProperty(_context2 = res.results).call(_context2, (result, i) => {
      const deferred = deferreds[i];

      if (result.statusCode >= 400) {
        deferred.reject(result.result);
      } else {
        deferred.resolve(result.result);
      }
    });

    return res;
  }

}

function defer() {
  let resolve_ = () => {};

  let reject_ = () => {};

  const promise = new _Promise((resolve, reject) => {
    resolve_ = resolve;
    reject_ = reject;
  });
  return {
    promise,
    resolve: resolve_,
    reject: reject_
  };
}
/*--------------------------------------------*/

/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */


registerModule('chatter', conn => new Chatter(conn));
export default Chatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import { exec } from 'child_process';
import stripAnsi from 'strip-ansi';
import Connection from '../connection';

function isNotNullOrUndefined(v) {
  return v != null;
}
/**
 *
 */


export class SfdxRegistry {
  constructor({
    cliPath
  }) {
    _defineProperty(this, "_cliPath", void 0);

    _defineProperty(this, "_orgList", void 0);

    _defineProperty(this, "_orgInfoMap", {});

    _defineProperty(this, "_defaultOrgInfo", void 0);

    this._cliPath = cliPath;
  }

  _createCommand(command, options = {}, args = []) {
    var _context;

    return `${this._cliPath ? this._cliPath + '/' : ''}sfdx ${command} ${_mapInstanceProperty(_context = _Object$keys(options)).call(_context, option => `${option.length > 1 ? '--' : '-'}${option}${options[option] != null ? ' ' + options[option] : ''}`).join(' ')} --json ${args.join(' ')}`;
  }

  async _execCommand(command, options = {}, args = []) {
    const cmd = this._createCommand(command, options, args);

    const buf = await new _Promise((resolve, reject) => {
      exec(cmd, (err, ret) => {
        if (err && !ret) {
          reject(err);
        } else {
          resolve(ret);
        }
      });
    });
    const body = stripAnsi(buf.toString());
    let ret;

    try {
      ret = JSON.parse(body);
    } catch (e) {
      throw new Error(`Unexpectedd output from Sfdx cli: ${body}`);
    }

    if (ret.status === 0 && ret.result) {
      return ret.result;
    } else {
      const err = new Error(ret.message);
      err.name = ret.name;
      throw err;
    }
  }

  async _getOrgList() {
    if (!this._orgList) {
      this._orgList = this._execCommand('force:org:list');
    }

    return this._orgList;
  }

  async getConnectionNames() {
    var _context2, _context3;

    const {
      nonScratchOrgs,
      scratchOrgs
    } = await this._getOrgList();
    return [..._filterInstanceProperty(_context2 = _mapInstanceProperty(nonScratchOrgs).call(nonScratchOrgs, o => o.alias)).call(_context2, isNotNullOrUndefined), ..._filterInstanceProperty(_context3 = _mapInstanceProperty(scratchOrgs).call(scratchOrgs, o => o.alias)).call(_context3, isNotNullOrUndefined), ..._mapInstanceProperty(nonScratchOrgs).call(nonScratchOrgs, o => o.username), ..._mapInstanceProperty(scratchOrgs).call(scratchOrgs, o => o.username)];
  }

  async getConnection(name) {
    const config = await this.getConnectionConfig(name);
    return config ? new Connection(config) : null;
  }

  async _getOrgInfo(username) {
    const options = username ? {
      u: username
    } : {};

    if (!username || !this._orgInfoMap[username]) {
      const pOrgInfo = this._execCommand('force:org:display', options);

      this._memoOrgInfo(pOrgInfo, username);
    }

    const orgInfo = username ? this._orgInfoMap[username] : this._defaultOrgInfo;

    if (!orgInfo) {
      throw new Error('no orginfo found');
    }

    return orgInfo;
  }

  _memoOrgInfo(pOrgInfo, username) {
    const pOrgInfo_ = pOrgInfo.then(orgInfo => {
      this._orgInfoMap[orgInfo.username] = pOrgInfo_;

      if (orgInfo.alias) {
        this._orgInfoMap[orgInfo.alias] = pOrgInfo_;
      }

      return orgInfo;
    });

    if (username) {
      this._orgInfoMap[username] = pOrgInfo_;
    } else {
      this._defaultOrgInfo = pOrgInfo_;
    }
  }

  async getConnectionConfig(name) {
    const orgInfo = await this._getOrgInfo(name);

    if (!orgInfo) {
      return null;
    }

    const {
      accessToken,
      instanceUrl,
      loginUrl
    } = orgInfo;
    return {
      accessToken,
      instanceUrl,
      loginUrl
    };
  }

  async saveConnectionConfig(_name, _connConfig) {// nothing to do
  }

  async setDefaultConnection(_name) {// nothing to do
  }

  async removeConnectionConfig(name) {
    await this._execCommand('force:org:delete', {
      u: name
    });
  }

  async getClientConfig(_name) {
    return null;
  }

  async getClientNames() {
    return [];
  }

  async registerClientConfig(_name, _clientConfig) {// nothing to do
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import { Duplex, PassThrough, Writable } from 'stream';
export function createLazyStream() {
  const ins = new PassThrough();
  const outs = new PassThrough();
  const stream = concatStreamsAsDuplex(ins, outs);
  let piped = false;

  const setStream = str => {
    if (piped) {
      throw new Error('stream is already piped to actual stream');
    }

    piped = true;
    ins.pipe(str).pipe(outs);
  };

  return {
    stream,
    setStream
  };
}

class MemoryWriteStream extends Writable {
  constructor() {
    super();

    _defineProperty(this, "_buf", void 0);

    this._buf = Buffer.alloc(0);
  }

  _write(chunk, encoding, callback) {
    this._buf = _concatInstanceProperty(Buffer).call(Buffer, [this._buf, chunk]);
    callback();
  }

  _writev(data, callback) {
    this._buf = _concatInstanceProperty(Buffer).call(Buffer, [this._buf, ..._mapInstanceProperty(data).call(data, ({
      chunk
    }) => chunk)]);
    callback();
  }

  toString() {
    return this._buf.toString();
  }

}

export async function readAll(rs) {
  return new _Promise((resolve, reject) => {
    const ws = new MemoryWriteStream();
    rs.on('error', reject).pipe(ws).on('finish', () => resolve(ws.toString()));
  });
}

class DuplexifiedStream extends Duplex {
  constructor(ws, rs, opts = {}) {
    var _opts$writableObjectM, _opts$readableObjectM;

    super({
      writableObjectMode: (_opts$writableObjectM = opts.writableObjectMode) !== null && _opts$writableObjectM !== void 0 ? _opts$writableObjectM : ws.writableObjectMode,
      readableObjectMode: (_opts$readableObjectM = opts.readableObjectMode) !== null && _opts$readableObjectM !== void 0 ? _opts$readableObjectM : rs.readableObjectMode
    });

    _defineProperty(this, "_writable", void 0);

    _defineProperty(this, "_readable", void 0);

    this._writable = ws;
    this._readable = rs;
    ws.once('finish', () => {
      this.end();
    });
    this.once('finish', () => {
      ws.end();
    });
    rs.on('readable', () => {
      this._readStream();
    });
    rs.once('end', () => {
      this.push(null);
    });
    ws.on('error', err => this.emit('error', err));
    rs.on('error', err => this.emit('error', err));
  }

  _write(chunk, encoding, callback) {
    this._writable.write(chunk, encoding, callback);
  }

  _read(n) {
    this._readStream(n);
  }

  _readStream(n) {
    let data;

    while ((data = this._readable.read(n)) !== null) {
      this.push(data);
    }
  }

}

export function concatStreamsAsDuplex(ws, rs, opts) {
  return new DuplexifiedStream(ws, rs, opts);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3N0cmVhbS50cyJdLCJuYW1lcyI6WyJEdXBsZXgiLCJQYXNzVGhyb3VnaCIsIldyaXRhYmxlIiwiY3JlYXRlTGF6eVN0cmVhbSIsImlucyIsIm91dHMiLCJzdHJlYW0iLCJjb25jYXRTdHJlYW1zQXNEdXBsZXgiLCJwaXBlZCIsInNldFN0cmVhbSIsInN0ciIsIkVycm9yIiwicGlwZSIsIk1lbW9yeVdyaXRlU3RyZWFtIiwiY29uc3RydWN0b3IiLCJfYnVmIiwiQnVmZmVyIiwiYWxsb2MiLCJfd3JpdGUiLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJfd3JpdGV2IiwiZGF0YSIsInRvU3RyaW5nIiwicmVhZEFsbCIsInJzIiwicmVzb2x2ZSIsInJlamVjdCIsIndzIiwib24iLCJEdXBsZXhpZmllZFN0cmVhbSIsIm9wdHMiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJfd3JpdGFibGUiLCJfcmVhZGFibGUiLCJvbmNlIiwiZW5kIiwiX3JlYWRTdHJlYW0iLCJwdXNoIiwiZXJyIiwiZW1pdCIsIndyaXRlIiwiX3JlYWQiLCJuIiwicmVhZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsTUFBVCxFQUFpQkMsV0FBakIsRUFBd0NDLFFBQXhDLFFBQXdELFFBQXhEO0FBRUEsT0FBTyxTQUFTQyxnQkFBVCxHQUE0QjtBQUNqQyxRQUFNQyxHQUFHLEdBQUcsSUFBSUgsV0FBSixFQUFaO0FBQ0EsUUFBTUksSUFBSSxHQUFHLElBQUlKLFdBQUosRUFBYjtBQUNBLFFBQU1LLE1BQU0sR0FBR0MscUJBQXFCLENBQUNILEdBQUQsRUFBTUMsSUFBTixDQUFwQztBQUNBLE1BQUlHLEtBQUssR0FBRyxLQUFaOztBQUNBLFFBQU1DLFNBQVMsR0FBSUMsR0FBRCxJQUFpQjtBQUNqQyxRQUFJRixLQUFKLEVBQVc7QUFDVCxZQUFNLElBQUlHLEtBQUosQ0FBVSwwQ0FBVixDQUFOO0FBQ0Q7O0FBQ0RI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QUFDQWYsSUFBQUEsRUFBRSxDQUFDSSxFQUFILENBQU0sT0FBTixFQUFnQlcsR0FBRCxJQUFTLEtBQUtDLElBQUwsQ0FBVSxPQUFWLEVBQW1CRCxHQUFuQixDQUF4QjtBQUNEOztBQUVEdkIsRUFBQUEsTUFBTSxDQUFDQyxLQUFELEVBQWFDLFFBQWIsRUFBNEJDLFFBQTVCLEVBQTJDO0FBQy9DLFNBQUtjLFNBQUwsQ0FBZVEsS0FBZixDQUFxQnhCLEtBQXJCLEVBQTRCQyxRQUE1QixFQUFzQ0MsUUFBdEM7QUFDRDs7QUFFRHVCLEVBQUFBLEtBQUssQ0FBQ0MsQ0FBRCxFQUFZO0FBQ2YsU0FBS04sV0FBTCxDQUFpQk0sQ0FBakI7QUFDRDs7QUFFRE4sRUFBQUEsV0FBVyxDQUFDTSxDQUFELEVBQWE7QUFDdEIsUUFBSXRCLElBQUo7O0FBQ0EsV0FBTyxDQUFDQSxJQUFJLEdBQUcsS0FBS2EsU0FBTCxDQUFlVSxJQUFmLENBQW9CRCxDQUFwQixDQUFSLE1BQW9DLElBQTNDLEVBQWlEO0FBQy9DLFdBQUtMLElBQUwsQ0FBVWpCLElBQVY7QUFDRDtBQUNGOztBQTVDb0M7O0FBK0N2QyxPQUFPLFNBQVNoQixxQkFBVCxDQUNMc0IsRUFESyxFQUVMSCxFQUZLLEVBR0xNLElBSEssRUFJRztBQUNSLFNBQU8sSUFBSUQsaUJBQUosQ0FBc0JGLEVBQXRCLEVBQTBCSCxFQUExQixFQUE4Qk0sSUFBOUIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVwbGV4LCBQYXNzVGhyb3VnaCwgUmVhZGFibGUsIFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxhenlTdHJlYW0oKSB7XG4gIGNvbnN0IGlucyA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICBjb25zdCBvdXRzID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gIGNvbnN0IHN0cmVhbSA9IGNvbmNhdFN0cmVhbXNBc0R1cGxleChpbnMsIG91dHMpO1xuICBsZXQgcGlwZWQgPSBmYWxzZTtcbiAgY29uc3Qgc2V0U3RyZWFtID0gKHN0cjogRHVwbGV4KSA9PiB7XG4gICAgaWYgKHBpcGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0cmVhbSBpcyBhbHJlYWR5IHBpcGVkIHRvIGFjdHVhbCBzdHJlYW0nKTtcbiAgICB9XG4gICAgcGlwZWQgPSB0cnVlO1xuICAgIGlucy5waXBlKHN0cikucGlwZShvdXRzKTtcbiAgfTtcbiAgcmV0dXJuIHsgc3RyZWFtLCBzZXRTdHJlYW0gfTtcbn1cblxuY2xhc3MgTWVtb3J5V3JpdGVTdHJlYW0gZXh0ZW5kcyBXcml0YWJsZSB7XG4gIF9idWY6IEJ1ZmZlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2J1ZiA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgfVxuXG4gIF93cml0ZShjaHVuazogQnVmZmVyLCBlbmNvZGluZzogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICB0aGlzLl9idWYgPSBCdWZmZXIuY29uY2F0KFt0aGlzLl9idWYsIGNodW5rXSk7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIF93cml0ZXYoXG4gICAgZGF0YTogQXJyYXk8eyBjaHVuazogQnVmZmVyOyBlbmNvZGluZzogc3RyaW5nIH0+LFxuICAgIGNhbGxiYWNrOiBGdW5jdGlvbixcbiAgKSB7XG4gICAgdGhpcy5fYnVmID0gQnVmZmVyLmNvbmNhdChbdGhpcy5fYnVmLCAuLi5kYXRhLm1hcCgoeyBjaHVuayB9KSA9PiBjaHVuayldKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1Zi50b1N0cmluZygpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkQWxsKHJzOiBSZWFkYWJsZSkge1xuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgd3MgPSBuZXcgTWVtb3J5V3JpdGVTdHJlYW0oKTtcbiAgICBycy5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAucGlwZSh3cylcbiAgICAgIC5vbignZmluaXNoJywgKCkgPT4gcmVzb2x2ZSh3cy50b1N0cmluZygpKSk7XG4gIH0pO1xufVxuXG5jbGFzcyBEdXBsZXhpZmllZFN0cmVhbSBleHRlbmRzIER1cGxleCB7XG4gIF93cml0YWJsZTogV3JpdGFibGU7XG4gIF9yZWFkYWJsZTogUmVhZGFibGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgd3M6IFdyaXRhYmxlLFxuICAgIHJzOiBSZWFkYWJsZSxcbiAgICBvcHRzOiB7IHdyaXRhYmxlT2JqZWN0TW9kZT86IGJvb2xlYW47IHJlYWRhYmxlT2JqZWN0TW9kZT86IGJvb2xlYW4gfSA9IHt9LFxuICApIHtcbiAgICBzdXBlcih7XG4gICAgICB3cml0YWJsZU9iamVjdE1vZGU6IG9wdHMud3JpdGFibGVPYmplY3RNb2RlID8/IHdzLndyaXRhYmxlT2JqZWN0TW9kZSxcbiAgICAgIHJlYWRhYmxlT2JqZWN0TW9kZTogb3B0cy5yZWFkYWJsZU9iamVjdE1vZGUgPz8gcnMucmVhZGFibGVPYmplY3RNb2RlLFxuICAgIH0pO1xuICAgIHRoaXMuX3dyaXRhYmxlID0gd3M7XG4gICAgdGhpcy5fcmVhZGFibGUgPSBycztcbiAgICB3cy5vbmNlKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVuZCgpO1xuICAgIH0pO1xuICAgIHRoaXMub25jZSgnZmluaXNoJywgKCkgPT4ge1xuICAgICAgd3MuZW5kKCk7XG4gICAgfSk7XG4gICAgcnMub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xuICAgICAgdGhpcy5fcmVhZFN0cmVhbSgpO1xuICAgIH0pO1xuICAgIHJzLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgIHRoaXMucHVzaChudWxsKTtcbiAgICB9KTtcbiAgICB3cy5vbignZXJyb3InLCAoZXJyKSA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKSk7XG4gICAgcnMub24oJ2Vycm9yJywgKGVycikgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGVycikpO1xuICB9XG5cbiAgX3dyaXRlKGNodW5rOiBhbnksIGVuY29kaW5nOiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcbiAgICB0aGlzLl93cml0YWJsZS53cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIF9yZWFkKG46IG51bWJlcikge1xuICAgIHRoaXMuX3JlYWRTdHJlYW0obik7XG4gIH1cblxuICBfcmVhZFN0cmVhbShuPzogbnVtYmVyKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgd2hpbGUgKChkYXRhID0gdGhpcy5fcmVhZGFibGUucmVhZChuKSkgIT09IG51bGwpIHtcbiAgICAgIHRoaXMucHVzaChkYXRhKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdFN0cmVhbXNBc0R1cGxleChcbiAgd3M6IFdyaXRhYmxlLFxuICByczogUmVhZGFibGUsXG4gIG9wdHM/OiB7IHdyaXRhYmxlT2JqZWN0TW9kZT86IGJvb2xlYW47IHJlYWRhYmxlT2JqZWN0TW9kZT86IGJvb2xlYW4gfSxcbik6IER1cGxleCB7XG4gIHJldHVybiBuZXcgRHVwbGV4aWZpZWRTdHJlYW0od3MsIHJzLCBvcHRzKTtcbn1cbiJdfQ==
"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionListCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
const consts = require("../../../../lib/core/constants");
class PackageVersionListCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageVersionListCommandImpl = require('../../../../lib/package/packageVersionListCommand');
        return this.execLegacyCommand(new PackageVersionListCommandImpl(), context);
    }
}
exports.PackageVersionListCommand = PackageVersionListCommand;
PackageVersionListCommand.theDescription = messages.getMessage('cliDescription', [], 'package_version_list');
PackageVersionListCommand.longDescription = messages.getMessage('cliLongDescription', [], 'package_version_list');
PackageVersionListCommand.help = messages.getMessage('help', [], 'package_version_list');
PackageVersionListCommand.requiresProject = false;
PackageVersionListCommand.orgType = consts.DEFAULT_DEV_HUB_USERNAME;
PackageVersionListCommand.requiresDevhubUsername = true;
PackageVersionListCommand.flagsConfig = {
    createdlastdays: command_1.flags.number({
        char: 'c',
        description: messages.getMessage('createdLastDaysDescription', [], 'packaging'),
        longDescription: messages.getMessage('createdLastDaysLongDescription', [], 'packaging'),
        required: false,
    }),
    concise: command_1.flags.builtin({
        description: messages.getMessage('conciseDescription', [], 'package_version_list'),
        longDescription: messages.getMessage('conciseLongDescription', [], 'package_version_list'),
    }),
    modifiedlastdays: command_1.flags.number({
        char: 'm',
        description: messages.getMessage('modifiedLastDaysDescription', [], 'packaging'),
        longDescription: messages.getMessage('modifiedLastDaysLongDescription', [], 'packaging'),
        required: false,
    }),
    packages: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('packagesDescription', [], 'package_version_list'),
        longDescription: messages.getMessage('packagesLongDescription', [], 'package_version_list'),
        required: false,
    }),
    released: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('releasedDescription', [], 'package_version_list'),
        longDescription: messages.getMessage('releasedLongDescription', [], 'package_version_list'),
        required: false,
    }),
    orderby: command_1.flags.array({
        char: 'o',
        description: messages.getMessage('orderByDescription', [], 'package_version_list'),
        longDescription: messages.getMessage('orderByLongDescription', [], 'package_version_list'),
        required: false,
    }),
    verbose: command_1.flags.builtin({
        description: messages.getMessage('verboseDescription', [], 'package_version_list'),
        longDescription: messages.getMessage('verboseLongDescription', [], 'package_version_list'),
    }),
};

//# sourceMappingURL=list.js.map

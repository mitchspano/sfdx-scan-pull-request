"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionCreateCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
const consts = require("../../../../lib/core/constants");
class PackageVersionCreateCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageVersionCreateCommandImpl = require('../../../../lib/package/packageVersionCreateCommand');
        return this.execLegacyCommand(new PackageVersionCreateCommandImpl(), context);
    }
}
exports.PackageVersionCreateCommand = PackageVersionCreateCommand;
PackageVersionCreateCommand.theDescription = messages.getMessage('cliDescription', [], 'package_version_create');
PackageVersionCreateCommand.longDescription = messages.getMessage('cliLongDescription', [], 'package_version_create');
PackageVersionCreateCommand.help = messages.getMessage('help', [], 'package_version_create');
PackageVersionCreateCommand.orgType = consts.DEFAULT_DEV_HUB_USERNAME;
PackageVersionCreateCommand.requiresDevhubUsername = true;
PackageVersionCreateCommand.requiresProject = true;
PackageVersionCreateCommand.flagsConfig = {
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package', [], 'package_version_create'),
        longDescription: messages.getMessage('longPackage', [], 'package_version_create'),
        required: false,
    }),
    path: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('path', [], 'package_version_create'),
        longDescription: messages.getMessage('longPath', [], 'package_version_create'),
        required: false,
    }),
    definitionfile: command_1.flags.filepath({
        char: 'f',
        description: messages.getMessage('definitionfile', [], 'package_version_create'),
        longDescription: messages.getMessage('longDefinitionfile', [], 'package_version_create'),
        required: false,
    }),
    branch: command_1.flags.string({
        char: 'b',
        description: messages.getMessage('branch', [], 'package_version_create'),
        longDescription: messages.getMessage('longBranch', [], 'package_version_create'),
        required: false,
    }),
    tag: command_1.flags.string({
        char: 't',
        description: messages.getMessage('tag', [], 'package_version_create'),
        longDescription: messages.getMessage('longTag', [], 'package_version_create'),
        required: false,
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('key', [], 'package_version_create'),
        longDescription: messages.getMessage('longKey', [], 'package_version_create'),
        required: false,
    }),
    installationkeybypass: command_1.flags.boolean({
        char: 'x',
        description: messages.getMessage('keyBypass', [], 'package_version_create'),
        longDescription: messages.getMessage('longKeyBypass', [], 'package_version_create'),
        required: false,
    }),
    preserve: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('preserve', [], 'package_version_create'),
        longDescription: messages.getMessage('longPreserve', [], 'package_version_create'),
        required: false,
        hidden: true,
    }),
    validateschema: command_1.flags.boolean({
        char: 'j',
        description: messages.getMessage('validateschema', [], 'package_version_create'),
        longDescription: messages.getMessage('longValidateschema', [], 'package_version_create'),
        required: false,
        hidden: true,
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('wait', [], 'package_version_create'),
        longDescription: messages.getMessage('longWait', [], 'package_version_create'),
        required: false,
        default: kit_1.Duration.minutes(0),
    }),
    buildinstance: command_1.flags.string({
        char: 's',
        description: messages.getMessage('instance', [], 'package_version_create'),
        longDescription: messages.getMessage('longInstance', [], 'package_version_create'),
        required: false,
        hidden: true,
    }),
    versionname: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('versionname', [], 'package_version_create'),
        longDescription: messages.getMessage('longVersionname', [], 'package_version_create'),
        required: false,
    }),
    versionnumber: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('versionnumber', [], 'package_version_create'),
        longDescription: messages.getMessage('longVersionnumber', [], 'package_version_create'),
        required: false,
    }),
    versiondescription: command_1.flags.string({
        char: 'e',
        description: messages.getMessage('versiondescription', [], 'package_version_create'),
        longDescription: messages.getMessage('longVersiondescription', [], 'package_version_create'),
        required: false,
    }),
    codecoverage: command_1.flags.boolean({
        char: 'c',
        description: messages.getMessage('codeCoverage', [], 'package_version_create'),
        longDescription: messages.getMessage('longCodeCoverage', [], 'package_version_create'),
        required: false,
        default: false,
    }),
    releasenotesurl: command_1.flags.url({
        description: messages.getMessage('releaseNotesUrl', [], 'package_version_create'),
        longDescription: messages.getMessage('releaseNotesUrlLong', [], 'package_version_create'),
        required: false,
    }),
    postinstallurl: command_1.flags.url({
        description: messages.getMessage('postInstallUrl', [], 'package_version_create'),
        longDescription: messages.getMessage('postInstallUrlLong', [], 'package_version_create'),
        required: false,
    }),
    postinstallscript: command_1.flags.string({
        description: messages.getMessage('postInstallScript', [], 'package_version_create'),
        longDescription: messages.getMessage('postInstallScriptLong', [], 'package_version_create'),
        required: false,
    }),
    uninstallscript: command_1.flags.string({
        description: messages.getMessage('uninstallScript', [], 'package_version_create'),
        longDescription: messages.getMessage('uninstallScriptLong', [], 'package_version_create'),
        required: false,
    }),
    skipvalidation: command_1.flags.boolean({
        description: messages.getMessage('skipValidation', [], 'package_version_create'),
        longDescription: messages.getMessage('skipValidationLong', [], 'package_version_create'),
        required: false,
        default: false,
    }),
    skipancestorcheck: command_1.flags.boolean({
        description: messages.getMessage('skipAncestorCheck', [], 'package_version_create'),
        longDescription: messages.getMessage('skipAncestorCheckLong', [], 'package_version_create'),
        required: false,
        default: false,
    }),
};

//# sourceMappingURL=create.js.map

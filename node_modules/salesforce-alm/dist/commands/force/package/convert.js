"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageConvert = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
const consts = require("../../../lib/core/constants");
class PackageConvert extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageConvertCommandImpl = require('../../../lib/package/packageConvertCommand');
        return this.execLegacyCommand(new PackageConvertCommandImpl(), context);
    }
}
exports.PackageConvert = PackageConvert;
PackageConvert.theDescription = messages.getMessage('cliDescription', [], 'package_convert');
PackageConvert.longDescription = messages.getMessage('cliLongDescription', [], 'package_convert');
PackageConvert.help = messages.getMessage('help', [], 'package_convert');
PackageConvert.orgType = consts.DEFAULT_DEV_HUB_USERNAME;
PackageConvert.requiresDevhubUsername = true;
PackageConvert.requiresProject = false;
PackageConvert.hidden = true;
PackageConvert.flagsConfig = {
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package', [], 'package_convert'),
        longDescription: messages.getMessage('longPackage', [], 'package_convert'),
        required: true,
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('key', [], 'package_convert'),
        longDescription: messages.getMessage('longKey', [], 'package_convert'),
        required: false,
    }),
    installationkeybypass: command_1.flags.boolean({
        char: 'x',
        description: messages.getMessage('keyBypass', [], 'package_convert'),
        longDescription: messages.getMessage('longKeyBypass', [], 'package_convert'),
        required: false,
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('wait', [], 'package_convert'),
        longDescription: messages.getMessage('longWait', [], 'package_convert'),
        required: false,
        default: kit_1.Duration.minutes(0),
    }),
    buildinstance: command_1.flags.string({
        char: 's',
        description: messages.getMessage('instance', [], 'package_convert'),
        longDescription: messages.getMessage('longInstance', [], 'package_convert'),
        required: false,
        hidden: true,
    }),
};

//# sourceMappingURL=convert.js.map

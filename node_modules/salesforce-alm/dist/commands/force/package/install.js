"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageInstallCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
class PackageInstallCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageInstallCommandImpl = require('../../../lib/package/packageInstallCommand');
        const heroku = require('heroku-cli-util');
        return this.execLegacyCommand(new PackageInstallCommandImpl(heroku.prompt), context);
    }
}
exports.PackageInstallCommand = PackageInstallCommand;
PackageInstallCommand.theDescription = messages.getMessage('cliDescription', [], 'package_install');
PackageInstallCommand.longDescription = messages.getMessage('cliDescriptionLong', [], 'package_install');
PackageInstallCommand.help = messages.getMessage('help', [], 'package_install');
PackageInstallCommand.requiresProject = false;
PackageInstallCommand.requiresUsername = true;
PackageInstallCommand.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('wait', [], 'package_install'),
        longDescription: messages.getMessage('waitLong', [], 'package_install'),
        required: false,
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('installationKey', [], 'package_install'),
        longDescription: messages.getMessage('installationKeyLong', [], 'package_install'),
        required: false,
    }),
    publishwait: command_1.flags.minutes({
        char: 'b',
        description: messages.getMessage('publishWait', [], 'package_install'),
        longDescription: messages.getMessage('publishWaitLong', [], 'package_install'),
        required: false,
    }),
    noprompt: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('noPrompt', [], 'package_install'),
        longDescription: messages.getMessage('noPromptLong', [], 'package_install'),
        required: false,
    }),
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package', [], 'package_install'),
        longDescription: messages.getMessage('packageLong', [], 'package_install'),
        required: false,
    }),
    apexcompile: command_1.flags.enum({
        char: 'a',
        description: messages.getMessage('apexCompile', [], 'package_install'),
        longDescription: messages.getMessage('apexCompileLong', [], 'package_install'),
        required: false,
        default: 'all',
        options: ['all', 'package'],
    }),
    securitytype: command_1.flags.enum({
        char: 's',
        description: messages.getMessage('securityType', [], 'package_install'),
        longDescription: messages.getMessage('securityTypeLong', [], 'package_install'),
        required: false,
        default: 'AdminsOnly',
        options: ['AllUsers', 'AdminsOnly'],
    }),
    upgradetype: command_1.flags.enum({
        char: 't',
        description: messages.getMessage('upgradeType', [], 'package_install'),
        longDescription: messages.getMessage('upgradeTypeLong', [], 'package_install'),
        required: false,
        default: 'Mixed',
        options: ['DeprecateOnly', 'Mixed', 'Delete'],
    }),
};

//# sourceMappingURL=install.js.map

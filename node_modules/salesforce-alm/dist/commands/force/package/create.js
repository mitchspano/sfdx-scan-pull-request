"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageCreateCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const messages = Messages();
const consts = require("../../../lib/core/constants");
class PackageCreateCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const PackageCreateCommandImpl = require('../../../lib/package/packageCreateCommand');
        return this.execLegacyCommand(new PackageCreateCommandImpl(), context);
    }
}
exports.PackageCreateCommand = PackageCreateCommand;
PackageCreateCommand.theDescription = messages.getMessage('cliDescription', [], 'package_create');
PackageCreateCommand.longDescription = messages.getMessage('cliLongDescription', [], 'package_create');
PackageCreateCommand.help = messages.getMessage('help', [], 'package_create');
PackageCreateCommand.orgType = consts.DEFAULT_DEV_HUB_USERNAME;
PackageCreateCommand.requiresDevhubUsername = true;
PackageCreateCommand.requiresProject = true;
PackageCreateCommand.flagsConfig = {
    name: command_1.flags.string({
        char: 'n',
        description: messages.getMessage('name', [], 'package_create'),
        longDescription: messages.getMessage('nameLong', [], 'package_create'),
        required: true,
    }),
    packagetype: command_1.flags.enum({
        char: 't',
        description: messages.getMessage('packageType', [], 'package_create'),
        longDescription: messages.getMessage('packageTypeLong', [], 'package_create'),
        required: true,
        options: ['Managed', 'Unlocked'],
    }),
    description: command_1.flags.string({
        char: 'd',
        description: messages.getMessage('description', [], 'package_create'),
        longDescription: messages.getMessage('descriptionLong', [], 'package_create'),
        required: false,
    }),
    nonamespace: command_1.flags.boolean({
        char: 'e',
        description: messages.getMessage('noNamespace', [], 'package_create'),
        longDescription: messages.getMessage('noNamespaceLong', [], 'package_create'),
        required: false,
    }),
    path: command_1.flags.directory({
        char: 'r',
        description: messages.getMessage('path', [], 'package_version_create'),
        longDescription: messages.getMessage('longPath', [], 'package_version_create'),
        required: true,
    }),
    orgdependent: command_1.flags.boolean({
        description: messages.getMessage('orgDependent', [], 'package_create'),
        longDescription: messages.getMessage('orgDependentLong', [], 'package_create'),
        required: false,
    }),
    errornotificationusername: command_1.flags.string({
        char: 'o',
        description: messages.getMessage('errorNotificationUsername', [], 'package_create'),
        longDescription: messages.getMessage('errorNotificationUsernameLong', [], 'package_create'),
        required: false,
    }),
};

//# sourceMappingURL=create.js.map

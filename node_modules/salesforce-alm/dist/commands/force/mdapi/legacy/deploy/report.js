"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdapiDeployReportCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const ToolbeltCommand_1 = require("../../../../../ToolbeltCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'mdapi_deploy');
const consts = require("../../../../../lib/core/constants");
const Stash = require("../../../../../lib/core/stash");
class MdapiDeployReportCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const MdapiDeployReportCommandImpl = require('../../../../../lib/mdapi/mdapiDeployReportCommand');
        return this.execLegacyCommand(new MdapiDeployReportCommandImpl(context), context);
    }
    resolveUsername(context) {
        return context.flags.jobid ? undefined : Stash.get('targetusername', Stash.Commands.MDAPI_DEPLOY);
    }
}
exports.MdapiDeployReportCommand = MdapiDeployReportCommand;
MdapiDeployReportCommand.deprecated = {
    version: 55.0,
    to: 'force:mdapi:deploy:report',
};
MdapiDeployReportCommand.theDescription = messages.getMessage('mdDeployReportCommandCliDescription');
MdapiDeployReportCommand.longDescription = messages.getMessage('mdDeployReportCommandCliLong');
MdapiDeployReportCommand.help = messages.getMessage('mdDeployReportCommandCliHelp');
MdapiDeployReportCommand.requiresProject = false;
MdapiDeployReportCommand.requiresUsername = true;
MdapiDeployReportCommand.flagsConfig = {
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('mdapiCliWait', [consts.DEFAULT_MDAPI_WAIT_MINUTES]),
        longDescription: messages.getMessage('mdapiCliWaitLong', [consts.DEFAULT_MDAPI_WAIT_MINUTES]),
        required: false,
    }),
    jobid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('mdDeployCommandCliJobId'),
        longDescription: messages.getMessage('mdDeployCommandCliJobIdLong'),
        required: false,
    }),
    verbose: command_1.flags.builtin({
        description: messages.getMessage('mdDeployCommandCliVerbose'),
        longDescription: messages.getMessage('mdDeployReportCommandCliVerboseLong'),
    }),
};

//# sourceMappingURL=report.js.map

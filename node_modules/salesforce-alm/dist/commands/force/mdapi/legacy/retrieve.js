"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MdapiRetrieveCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const consts = require("../../../../lib/core/constants");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('salesforce-alm', 'mdapi_retrieve');
class MdapiRetrieveCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        // eslint-disable-next-line @typescript-eslint/no-shadow
        const MdapiRetrieveCommandImpl = require('../../../../lib/mdapi/mdapiRetrieveCommand');
        return this.execLegacyCommand(new MdapiRetrieveCommandImpl(context), context);
    }
}
exports.MdapiRetrieveCommand = MdapiRetrieveCommand;
MdapiRetrieveCommand.deprecated = {
    version: 55.0,
    to: 'force:mdapi:retrieve',
};
MdapiRetrieveCommand.theDescription = messages.getMessage('retrieveCommandDescription');
MdapiRetrieveCommand.longDescription = messages.getMessage('retrieveCommandLongDescription');
MdapiRetrieveCommand.help = messages.getMessage('retrieveCommandHelp');
MdapiRetrieveCommand.requiresProject = false;
MdapiRetrieveCommand.requiresUsername = true;
MdapiRetrieveCommand.flagsConfig = {
    apiversion: command_1.flags.builtin({
        // @ts-ignore force char override for backward compat -- don't try this at home!
        char: 'a',
        description: messages.getMessage('apiversionFlagDescription'),
        longDescription: messages.getMessage('apiversionFlagLongDescription'),
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('waitFlagDescription', [consts.DEFAULT_MDAPI_RETRIEVE_WAIT_MINUTES]),
        longDescription: messages.getMessage('waitFlagLongDescription'),
        required: false,
    }),
    retrievetargetdir: command_1.flags.directory({
        char: 'r',
        description: messages.getMessage('retrievetargetdirFlagDescription'),
        longDescription: messages.getMessage('retrievetargetdirFlagLongDescription'),
        required: true,
    }),
    unpackaged: command_1.flags.filepath({
        char: 'k',
        description: messages.getMessage('unpackagedFlagDescription'),
        longDescription: messages.getMessage('unpackagedFlagLongDescription'),
        required: false,
    }),
    verbose: command_1.flags.builtin({
        description: messages.getMessage('verboseFlagDescription'),
        longDescription: messages.getMessage('verboseFlagLongDescription'),
    }),
    sourcedir: command_1.flags.directory({
        char: 'd',
        description: messages.getMessage('sourcedirFlagDescription', [consts.WORKSPACE_CONFIG_FILENAME]),
        longDescription: messages.getMessage('sourcedirFlagLongDescription', [consts.WORKSPACE_CONFIG_FILENAME]),
        required: false,
    }),
    packagenames: command_1.flags.array({
        char: 'p',
        description: messages.getMessage('packagenamesFlagDescription'),
        longDescription: messages.getMessage('packagenamesFlagLongDescription'),
        required: false,
    }),
    singlepackage: command_1.flags.boolean({
        char: 's',
        description: messages.getMessage('singlepackageFlagDescription'),
        longDescription: messages.getMessage('singlepackageFlagLongDescription'),
        required: false,
    }),
};

//# sourceMappingURL=retrieve.js.map

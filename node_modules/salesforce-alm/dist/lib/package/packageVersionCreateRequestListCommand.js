"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
// Node
const util = require("util");
// Local
const Messages = require("../messages");
const messages = Messages();
const logger = require("../core/logApi");
const PackageVersionCreateRequestApi = require("./packageVersionCreateRequestApi");
const pkgUtils = require("./packageUtils");
class PackageVersionCreateRequestListCommand {
    constructor() {
        this.logger = logger.child('package:version:create:list');
    }
    execute(context) {
        return this._execute(context).catch((err) => {
            // TODO
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkgUtils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.packageVersionCreateRequestApi = new PackageVersionCreateRequestApi(context.org.force, context.org);
        return this.packageVersionCreateRequestApi.list(context.flags).then((results) => {
            this.cnt = util.isArray(results) ? results.length : 0;
            return results;
        });
    }
    /**
     * indicates that the human readable message should be tabular
     *
     * @returns {[{}...]}
     */
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue(`Package Version Create Requests  [${this.cnt || 0}]`));
        const columnData = {
            Id: {},
            Status: {
                header: messages.getMessage('status', [], 'package_version_create_list'),
            },
            Package2Id: {
                header: messages.getMessage('packageId', [], 'package_version_create_list'),
            },
            Package2VersionId: {
                header: messages.getMessage('packageVersionId', [], 'package_version_create_list'),
            },
            SubscriberPackageVersionId: {
                header: messages.getMessage('subscriberPackageVersionId', [], 'package_version_create_list'),
            },
            Tag: {
                header: messages.getMessage('tag', [], 'package_version_create_list'),
            },
            Branch: {
                header: messages.getMessage('branch', [], 'package_version_create_list'),
            },
            CreatedDate: { header: 'Created Date' },
            CreatedBy: {
                header: messages.getMessage('createdBy', [], 'package_list'),
            },
        };
        return columnData;
    }
}
module.exports = PackageVersionCreateRequestListCommand;

//# sourceMappingURL=packageVersionCreateRequestListCommand.js.map

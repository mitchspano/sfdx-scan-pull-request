declare class PackageVersionCreateCommand {
    [property: string]: any;
    private apiVersionFromPackageXml;
    constructor();
    _generateMDFolderForArtifact(options: any): any;
    _validateDependencyValues(dependency: any): any;
    /**
     *  A dependency in the workspace config file may be specified using either a subscriber package version id (04t)
     *  or a package Id (0Ho) + a version number.  Additionally, a build number may be the actual build number, or a
     *  keyword: LATEST or RELEASED (meaning the latest or released build number for a given major.minor.patch).
     *
     *  This method resolves a package Id + version number to a subscriber package version id (04t)
     *  and adds it as a SubscriberPackageVersionId parameter in the dependency object.
     */
    _retrieveSubscriberPackageVersionId(dependency: any, branchFromFlagOrDef: any): any;
    _resolveBuildNumber(versionNumber: any, packageId: any, branch: any): any;
    _createRequestObject(packageId: any, context: any, preserveFiles: any, packageVersTmpRoot: any, packageVersBlobZipFile: any): any;
    _getPackageDescriptorJsonFromPackageId(packageId: any, flags: any): any;
    /**
     * Convert the list of command line options to a JSON object that can be used to create an Package2VersionCreateRequest entity.
     *
     * @param context
     * @param packageId
     * @returns {{Package2Id: (*|p|boolean), Package2VersionMetadata: *, Tag: *, Branch: number}}
     * @private
     */
    _createPackageVersionCreateRequestFromOptions(context: any, packageId: any, versionNumberString: any): any;
    _getPackagePropertyFromPackage(packageDirs: any, packageValue: any, context: any): "package" | "id";
    _getPackageValuePropertyFromDirectory(context: any, directoryFlag: any): any;
    /**
     * Returns the property value that corresponds to the propertyToLookup.  This value found for a particular
     * package directory element that matches the knownProperty and knownValue.  In other words, we locate a package
     * directory element whose knownProperty matches the knownValue, then we grab the value for the propertyToLookup
     * and return it.
     *
     * @param context
     * @param packageDirs The list of all the package directories from the sfdx-project.json
     * @param propertyToLookup The property ID whose value we want to find
     * @param knownProperty The JSON property in the packageDirectories that is already known
     * @param knownValue The value that corresponds to the knownProperty in the packageDirectories JSON
     * @param knownFlag The flag details e.g. short/long name, etc. Only used for the error message
     */
    _getConfigPackageDirectoriesValue(context: any, packageDirs: any, propertyToLookup: any, knownProperty: any, knownValue: any, knownFlag: any): any;
    execute(context: any): Promise<any>;
    _execute(context: any): Promise<any>;
    rejectWithInstallKeyError(context: any): any;
    _validateFlagsForPackageType(packageId: string, flags: any): Promise<void>;
    /**
     *
     * @param result - the data representing the Package Version, must include a 'Status' property
     * @returns {string} a human readable message for CLI output
     */
    getHumanSuccessMessage(result: any): any;
    /**
     * Cleans invalid attribute(s) from the packageDescriptorJSON
     */
    _cleanPackageDescriptorJson(packageDescriptorJson: any): void;
    /**
     * Sets default or override values for packageDescriptorJSON attribs
     */
    _setPackageDescriptorJsonValues(packageDescriptorJson: any, context: any): void;
}
export = PackageVersionCreateCommand;

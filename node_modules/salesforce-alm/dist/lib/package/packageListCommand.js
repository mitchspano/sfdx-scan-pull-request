"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
// Local
const Messages = require("../messages");
const messages = Messages();
const logger = require("../core/logApi");
const pkgUtils = require("./packageUtils");
const QUERY = 'SELECT Id, SubscriberPackageId, Name, Description, NamespacePrefix, ContainerOptions, IsOrgDependent, ConvertedFromPackageId, ' +
    'PackageErrorUsername, CreatedById ' +
    'FROM Package2 ' +
    'WHERE IsDeprecated != true ' +
    'ORDER BY NamespacePrefix, Name';
class PackageListCommand {
    constructor() {
        this.logger = logger.child('package:list');
        this.results = [];
        this.verbose = false;
    }
    execute(context) {
        return this._execute(context).catch((err) => {
            // TODO:
            // until package2 is GA, wrap perm-based errors w/ 'contact sfdc' action (REMOVE once package2 is GA'd)
            throw pkgUtils.applyErrorAction(err);
        });
    }
    _execute(context) {
        this.org = context.org;
        this.force = this.org.force;
        this.verbose = context.flags.verbose;
        return this.force.toolingQuery(this.org, QUERY).then((queryResult) => {
            const records = queryResult.records;
            if (records && records.length > 0) {
                this.results = records.map(({ Id, SubscriberPackageId, Name, Description, NamespacePrefix, ContainerOptions, ConvertedFromPackageId, IsOrgDependent, PackageErrorUsername, CreatedById, }) => {
                    const aliases = pkgUtils.getPackageAliasesFromId(Id, this.force);
                    const Alias = aliases.join();
                    IsOrgDependent = ContainerOptions === 'Managed' ? 'N/A' : IsOrgDependent === true ? 'Yes' : 'No';
                    return {
                        Id,
                        SubscriberPackageId,
                        Name,
                        Description,
                        NamespacePrefix,
                        ContainerOptions,
                        ConvertedFromPackageId,
                        Alias,
                        IsOrgDependent,
                        PackageErrorUsername,
                        CreatedBy: CreatedById,
                    };
                });
            }
            return this.results;
        });
    }
    getColumnData() {
        this.logger.styledHeader(this.logger.color.blue(`Packages [${this.results.length}]`));
        const columns = {
            NamespacePrefix: { header: messages.getMessage('namespace', [], 'package_list') },
            Name: { header: messages.getMessage('name', [], 'package_list') },
            Id: { header: messages.getMessage('id', [], 'package_list') },
            Alias: { header: messages.getMessage('alias', [], 'package_list') },
            Description: { header: messages.getMessage('description', [], 'package_list') },
            ContainerOptions: { header: messages.getMessage('packageType', [], 'package_list') },
        };
        if (this.verbose) {
            columns['SubscriberPackageId'] = { header: messages.getMessage('packageId', [], 'package_list') };
            columns['ConvertedFromPackageId'] = { header: messages.getMessage('convertedFromPackageId', [], 'package_list') };
            columns['IsOrgDependent'] = { header: messages.getMessage('isOrgDependent', [], 'package_list') };
            columns['PackageErrorUsername'] = {
                header: messages.getMessage('errorNotificationUsername', [], 'package_list'),
            };
            columns['CreatedBy'] = { header: messages.getMessage('createdBy', [], 'package_list') };
        }
        return columns;
    }
}
module.exports = PackageListCommand;

//# sourceMappingURL=packageListCommand.js.map

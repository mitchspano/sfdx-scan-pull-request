declare const _default: {
    ACCOUNT_SETTINGS_API: string;
    ACTIVITIES_SETTINGS_API: string;
    APEX_SETTINGS_API: string;
    CHATTER_SETTINGS_API: string;
    CONTRACT_SETTINGS_API: string;
    COMMUNITIES_SETTINGS_API: string;
    DEV_HUB_SETTINGS_API: string;
    EMAIL_ADMINISTRATION_SETTINGS_API: string;
    ENHANCED_NOTE_SETTINGS_API: string;
    ENTITLEMENT_SETTINGS_API: string;
    EVENT_SETTINGS_API: string;
    FORECASTING_SETTINGS_API: string;
    IDEAS_SETTINGS_API: string;
    KNOWLEDGE_SETTINGS_API: string;
    LANGUAGE_SETTINGS_API: string;
    LIGHTNING_EXPERIENCE_SETTINGS_API: string;
    LIVE_AGENT_SETTINGS_API: string;
    MOBILE_SETTINGS_API: string;
    NAME_SETTINGS_API: string;
    OPPORTUNITY_SETTINGS_API: string;
    ORDER_SETTINGS_API: string;
    ORG_PREFERENCE_SETTINGS: string;
    PRODUCT_SETTINGS_API: string;
    QUOTE_SETTINGS_API: string;
    SECURITY_SETTINGS_API: string;
    SEARCH_SETTINGS_API: string;
    SOCIAL_PROFILE_SETTINGS_API: string;
    ORGANIZATION_SETTINGS_DETAIL_API: string;
    TERRITORY2_SETTINGS_API: string;
    PATH_ASSISTANT_SETTINGS_API: string;
    SECURITY_SETTINGS_PASSWORD_POLICY_API: string;
    /**
     *  This method returns the correct name of the preference
     *  only if it is being migrated from the org preference settings
     *  to a new object.
     */
    newPrefNameForOrgSettingsMigration(prefName: any): string;
    /**
     * Does a lookup for the proper apiName for
     * the given final pref name.
     */
    whichApiFromFinalPrefName(prefName: any): string;
    /**
     *
     * Return true if this preference was deprected in the migration from org preference settings to concreate settings types.
     *
     * @param apiVersion
     */
    isMigrationDeprecated(prefType: any): boolean;
    /**
     * Takes in an org preference name and returns the MD-API name
     *
     * @param prefName The org preference name
     * @returns the MDAPI name for the org preference
     */
    forMdApi(prefName: any, apiVersion?: string): string;
    /**
     * Takes in an org preference name and returns the API through which it is set
     *
     * @param prefName The org preference name
     * @returns the API name for the org preference
     */
    whichApi(prefName: any, apiVersion?: string): string;
    /**
     * Convenience method for testing to get Org Preference Map
     *
     * @returns the Org Preference Map
     */
    allPrefsMap(apiVersion?: string): Map<string, string>;
};
export = _default;

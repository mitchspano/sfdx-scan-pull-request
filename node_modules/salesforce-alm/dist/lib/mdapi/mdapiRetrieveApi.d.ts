export interface MdRetrieveOptions {
    retrievetargetdir?: string;
    unpackaged?: string;
    autoUpdatePackage?: boolean;
    rollbackOnError?: boolean;
    runTest?: boolean;
    unzip?: boolean;
    disableLogging?: boolean;
    json?: boolean;
    wait?: number;
    packagenames?: string;
    jobid?: number;
    apiversion?: string;
    singlepackage?: string;
}
/**
 * API that wraps Metadata API to retrieve source defined by given or generated package.xml.
 *
 * @param force
 * @constructor
 */
export declare class MdRetrieveApi {
    private org;
    private force;
    private logger;
    private _fsStatAsync;
    private isJsonOutput;
    retrieveTargetPath: any;
    constructor(org: any);
    retrieve(options: MdRetrieveOptions): Promise<any>;
    _log(message: any): void;
    static getDefaultOptions(): MdRetrieveOptions;
    static _getPackageJson(mdApi: any, options: any): Promise<any>;
    _reportStatus(options: any): any;
    _formatRetrieveOptions(options: any, unpackagedJson: any): any;
    _parsePackageNames(packagenames: any): any;
    _setStashVars(result: any, options: any): Promise<any>;
    validate(context: any): Promise<any>;
    _validatePath(pathToValidate: any, validationFunc: any, successFunc: any, error: any): any;
    _resolvePath(...args: any[]): any;
}

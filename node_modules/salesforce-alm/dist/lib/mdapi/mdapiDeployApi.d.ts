/// <reference types="node" />
import * as fs from 'fs';
/**
 * API that wraps Metadata API to deploy source - directory or zip - to given org.
 *
 * @param force
 * @constructor
 */
declare class MdDeployApi {
    private readonly scratchOrg;
    private force;
    private logger;
    private timer;
    private _fsStatAsync;
    private _reporter;
    private loggingEnabled;
    private readonly stashTarget;
    constructor(org: any, pollIntervalStrategy?: any, stashTarget?: string);
    _getElapsedTime(): string;
    _zip(dir: any, zipfile: any): any;
    _log(message: any): void;
    _logError(message: any): void;
    _getMetadata({ deploydir, zipfile }: {
        deploydir: any;
        zipfile: any;
    }): any;
    _sendMetadata(zipPath: any, options: any): Promise<any>;
    _createReadStream(zipPath: any): fs.ReadStream;
    deploy(options: any): Promise<any>;
    validate(context: any): any;
    _validateFileStat(pathToValidate: any, validationFunc: any, successFunc: any, error: any): any;
    _doDeployStatus(result: any, options: any): Promise<any>;
    _setStashVars(result: any, options: any): Promise<any>;
    _doDeploy(options: any): Promise<any>;
    _doDeployRecentValidation(options: any): Promise<any>;
    _throwErrorIfDeployFailed(result: any): any;
    _setExitCode(code: any): void;
    _minToMs(min: any): number;
}
export = MdDeployApi;

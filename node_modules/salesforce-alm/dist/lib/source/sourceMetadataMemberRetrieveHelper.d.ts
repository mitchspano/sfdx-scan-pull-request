import MdapiPackage = require('./mdapiPackage');
import { SourceWorkspaceAdapter } from './sourceWorkspaceAdapter';
import MetadataRegistry = require('./metadataRegistry');
interface MdapiPackages {
    [key: string]: MdapiPackage;
}
interface MdApiItem {
    fullName: string;
    type: string;
    isNameObsolete?: boolean;
}
/**
 * Class used to derive changed org metadata.
 */
declare class SourceMetadataMemberRetrieveHelper {
    private swa;
    readonly metadataRegistry: MetadataRegistry;
    private readonly forceIgnore;
    private logger;
    private readonly username;
    constructor(sourceWorkspaceAdapter?: SourceWorkspaceAdapter);
    shouldAddMember(mdApiItem: MdApiItem, obsoleteNames: MdApiItem[]): boolean;
    /**
     * gets all source metadata revisions from the server from <fromRevision>.
     *
     * @returns
     * "Package": {
     *   "$": {
     *     "xmlns": "http://soap.sforce.com/2006/04/metadata"
     *   },
     *   "types": [
     *     {
     *       "name": "ApexClass",
     *       "members": [...]
     *     },
     *     ...
     *   ],
     *   "version": 38
     *}
     */
    getRevisionsAsPackage(obsoleteNames?: MdApiItem[]): Promise<MdapiPackages>;
    private determinePackage;
}
export = SourceMetadataMemberRetrieveHelper;

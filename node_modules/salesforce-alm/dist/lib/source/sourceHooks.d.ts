import { Optional, Dictionary } from '@salesforce/ts-types';
import { Interfaces } from '@oclif/core';
import { WorkspaceElementObj } from './workspaceElement';
declare type HookOpts<T> = {
    Command: Interfaces.Command.Class;
    argv: string[];
    commandId: string;
    result: Optional<T>;
};
interface SourceInfo {
    workspaceElements: WorkspaceElementObj[];
}
interface MetadataInfo {
    mdapiFilePath: string[];
}
export declare type MetadataSourceResult = Dictionary<SourceInfo & MetadataInfo>;
declare type PreDeployOpts = HookOpts<MetadataSourceResult>;
export declare type SourceResult = Dictionary<SourceInfo>;
declare type PostSourceUpdateOpts = HookOpts<SourceResult>;
export declare type MetadataResult = Dictionary<MetadataInfo>;
declare type PostRetriveOpts = HookOpts<MetadataResult>;
declare type DeployResult = {
    id: string;
    checkOnly: boolean;
    completedDate: string;
    createdDate: string;
    details?: DeployDetails;
    done: boolean;
    errorMessage?: string;
    errorStatusCode?: string;
    ignoreWarnings?: boolean;
    lastModifiedDate: string;
    numberComponentErrors: number;
    numberComponentsDeployed: number;
    numberComponentsTotal: number;
    numberTestErrors: number;
    numberTestsCompleted: number;
    numberTestsTotal: number;
    rollbackOnError?: boolean;
    startDate: string;
    status: string;
    success: boolean;
};
declare type DeployDetails = {
    componentSuccesses: DeployMessage[];
    componentFailures: DeployMessage[];
};
declare type DeployMessage = {
    componentType: string;
    fullName: string;
    Id: string;
    created: string;
    deleted: string;
    changed: string;
    success: string;
};
declare type PostDeployOpts = HookOpts<DeployResult>;
declare type PreRetrieveOpts = HookOpts<{
    packageXmlPath: string;
}>;
/**
 * Extends OCLIF's Hooks interface to add types for hooks that run on sfdx source commands
 */
export interface SourceHooks extends Interfaces.Hook<string> {
    predeploy: PreDeployOpts;
    postsourceupdate: PostSourceUpdateOpts;
    postdeploy: PostDeployOpts;
    postretrieve: PostRetriveOpts;
    preretrieve: PreRetrieveOpts;
}
export declare type SourceHook = (this: any, options: any) => any;
export declare namespace SourceHook {
    type PreDeploy = SourceHooks['predeploy'];
    type PostSrConvert = SourceHooks['postsourceupdate'];
    type PostDeploy = SourceHooks['postdeploy'];
    type PostRetrieve = SourceHooks['postretrieve'];
    type PreRetrieve = SourceHooks['preretrieve'];
}
export {};

import { SourceOptions } from './types';
export interface SourceRetrieveOptions extends SourceOptions {
    ignorewarnings?: boolean;
    apiversion?: string;
    packagenames?: string[];
    wait?: number;
}
export interface SourceRetrieveOutput {
    inboundFiles: Array<{
        state: string;
        fullName: string;
        type: string;
        filePath: string;
    }>;
    warnings?: string[];
    packages?: Array<{
        name: string;
        path: string;
    }>;
}
/**
 * API for retrieving metadata from an org and updating a local SFDX project.
 */
export declare class SourceRetrieve {
    private org;
    private defaultPackagePath;
    private logger;
    private projectPath;
    private tmpOutputDir;
    private swa;
    constructor(org: any);
    retrieve(options: SourceRetrieveOptions): Promise<SourceRetrieveOutput>;
    private retrieveFromSourcePath;
    private retrieveFromMetadata;
    private retrieveFromManifest;
    private createManifest;
    private processResults;
    static isRetrieveSuccessful(result: any): boolean;
}

/**
 * the class is intended to generate a data structure need by manifestCreateApi createManifest
 */
declare class MdapiPackage {
    [property: string]: any;
    /**
     * ctor - creates a default package structure.
     */
    constructor(force?: any);
    /**
     * Set the package version
     *
     * @param version the version intended to be included in package.xml
     */
    setVersion(version: any): void;
    /**
     * Set the package name
     *
     * @param packageName name of the package to associate the metadata with, null == don't associate with package
     */
    setPackageName(packageName: any): void;
    isEmpty(): boolean;
    /**
     * Convert a Folder MD type from a manifest (package.xml) entry to the name used in
     * a client side representation such as a key in a map of AggregateSourceElements.
     *
     * @param type {string} the name of the folder MD type from the package.xml.
     *      E.g., Document --> DocumentFolder
     */
    static convertFolderTypeKey(type: any): any;
    /**
     * Add a member with a type to the data structure. The type is created if it doesn't already exists
     *
     * @param fullName - the fullname attribute from the source metadata member
     * @param type - the type also contained in the source metadata member fullname attribute
     */
    addMember(fullName: any, type: any): void;
    /**
     * this function "fixes" up folder types and sorts all type members within.
     *
     * @returns {MdapiPackage}
     */
    getPackage(metadataRegistry: any): {
        Package: any;
    };
}
export = MdapiPackage;

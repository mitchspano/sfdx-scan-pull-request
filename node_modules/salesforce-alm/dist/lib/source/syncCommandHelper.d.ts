import { Logger } from '@salesforce/core';
import { AggregateSourceElements } from './aggregateSourceElements';
import MetadataRegistry = require('./metadataRegistry');
declare const self: {
    getDeployFailures(resp: any, aggregateSourceElements: AggregateSourceElements, metadataRegistry: MetadataRegistry, logger?: Logger): any[];
    getFullNameFromDeleteFailure(failure: any): string;
    /**
     * report formatting for retrieve failures.
     *
     * @param resp - the result of toolingRetrieve
     * @param detailProperty - the name of the property with the deploy details. Defaults to 'DeployDetails'.
     * @returns {string} represents reported deployment errors
     * @private
     */
    getRetrieveFailureMessage(resp: any, messages: any): string;
    /**
     * helper method used by the sync commands to retrieve status of a container async request.
     *
     * @param force - the force api
     * @param api - scratch org api
     * @param sobjectId - id of the container async request
     * @param messages - L10N access obeject
     * @param callback - callback that resolves a value once the ContainerAsyncRequest is complete.
     * @param resolve - outer promise resolve function
     * @param reject - outer promise reject handler
     * @returns {Promise}
     */
    retrieveContainerStatus(force: any, api: any, sobjectId: any, messages: any, callback: any, resolve: any, reject: any): any;
    /**
     * Removes a parent path to make a relative path.
     *
     * @param parent - the parent path (usually a project directory)
     * @param elementPath - the full path that contains the parent.
     * @returns {*}
     */
    trimParentFromPath(parent: any, elementPath: any): any;
    getColumnMetaInfo(messages: any, withoutState?: any): {
        fullName: {
            header: any;
        };
        type: {
            header: any;
        };
        filePath: {
            header: any;
        };
    };
    createDeployFailureRow(rows: any, failure: any, projectPath: any): void;
    createConflictRows(rows: any, conflictFileInfo: any, projectPath: any): void;
    createStatusLocalRows(rows: any, outputFileInfo: any, projectPath: any): void;
    createStatusRemoteRows(rows: any, sourceMember: any, projectPath: any): void;
    createDisplayRows(rows: any, outputFileInfo: any, projectPath: any): void;
};
export = self;

import { Nullable } from '@salesforce/ts-types';
import { MetadataDocumentAnnotation } from '../metadataDocument';
import { DecompositionWorkspaceStrategy } from './decompositionWorkspaceStrategy';
import { DecompositionConfig, DecomposedSubtypeConfig } from './decompositionConfig';
/**
 * Workspace decomposition strategy where decomposed subtypes are given
 * their own directory (mostly).
 *
 * It works like this.
 * 1. If the type is not singleton each instance gets a directory with
 * the name being the full name of the aggregate entity subordinate to the
 * normal directory for that type (eg. --/objects/Obj__c).
 * 2. If the type is singleton (eg. CustomLabels) then the decomposed documents
 * are stored directly subordinate to the normal directory for that type
 * (eg. --/labels).
 * 3. When there exists more than one subtype each subtype gets its own directory
 * subordinate to that from the previous steps (eg. --/objects/Obj__c/fields).
 * 4. When there exists only a single subtype (eg. MatchingCriteria) then the decomposed
 * documents do not get a subtype-specific directory
 * (eg. --/matchingRules).
 *
 * These exceptions are intended to avoid unnatural manifestations like, eg,
 * --/matchingRules/matchingRules/myMatchingRule.rule
 */
export declare class FolderPerSubtypeWorkspaceDecomposition implements DecompositionWorkspaceStrategy {
    private decompositionConfig;
    constructor(decompositionConfig: DecompositionConfig);
    getDecomposedFileName(annotation: MetadataDocumentAnnotation, decomposedSubtypeConfig: DecomposedSubtypeConfig): string;
    getContainerPath(metadataFilePath: string, ext: string): string;
    findDecomposedPaths(metadataFilePath: string, ext: string): Map<DecomposedSubtypeConfig, string[]>;
    getDecomposedSubtypeDirFromMetadataFile(metadataFilePath: string, ext: string, decomposedSubtypeConfig: DecomposedSubtypeConfig): string;
    getDecomposedSubtypeDirFromAnnotation(annotation: MetadataDocumentAnnotation, metadataType: string, aggregateFullName: string, decomposedSubtypeConfig: DecomposedSubtypeConfig): Nullable<string>;
    private getDecomposedSourceDirFromMetadataFile;
    getFullNameFromMetadataFile(metadataFilePath: string, ext: string): string;
    private getFragmentDirs;
    private static getFragmentFilesInDir;
}

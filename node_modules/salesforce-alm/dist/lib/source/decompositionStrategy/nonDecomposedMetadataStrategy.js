"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonDecomposedMetadataStrategy = void 0;
const xmlMetadataDocument_1 = require("../xmlMetadataDocument");
/**
 * Null decomposition strategy.
 */
class NonDecomposedMetadataStrategy {
    constructor(decompositionConfig) {
        this.decompositionConfig = decompositionConfig;
    }
    newContainerDocument(metadataName) {
        return new xmlMetadataDocument_1.XmlMetadataDocument(metadataName);
    }
    newDecompositionDocument(metadataName) {
        return new xmlMetadataDocument_1.XmlMetadataDocument(metadataName);
    }
    newComposedDocument(metadataName) {
        return new xmlMetadataDocument_1.XmlMetadataDocument(metadataName);
    }
    compose(container, decompositions) {
        return container;
    }
    decompose(composed, name, manifest) {
        return [composed, new Map()];
    }
    isComposable() {
        return false;
    }
}
exports.NonDecomposedMetadataStrategy = NonDecomposedMetadataStrategy;

//# sourceMappingURL=nonDecomposedMetadataStrategy.js.map
